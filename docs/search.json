[{"path":"https://ostluft.github.io/rOstluft/articles/Technische_Entscheidungen.html","id":"übersicht","dir":"Articles","previous_headings":"","what":"Übersicht","title":"[GER] Technische Entscheidungen","text":"diesem Dokument werden die Gründe für technische Entscheide festgehalten. Viele Probleme sind bereits von klugen Köpfen gelöst worden. Wo immer möglich sollten Packages von Drittpersonen genützt werden. Dabei ist aber zu beachten das eine umfassende Dokumenation, gute Test Coverage und eine breite Nutzung des Packages vorhanden ist.","code":""},{"path":"https://ostluft.github.io/rOstluft/articles/Technische_Entscheidungen.html","id":"verwendete-gesprochene-sprachen","dir":"Articles","previous_headings":"","what":"Verwendete gesprochene Sprachen","title":"[GER] Technische Entscheidungen","text":"Code, Datenfelder Bezeichnung, Kommentare im Code und somit die automatische generierte API Dokumentation werden (gebrochenem) Englisch geschrieben. Längere Texte und begleitende Dokumentationen Deutsch.","code":""},{"path":"https://ostluft.github.io/rOstluft/articles/Technische_Entscheidungen.html","id":"style-guide","dir":"Articles","previous_headings":"","what":"Style Guide","title":"[GER] Technische Entscheidungen","text":"Für eine konsistente und kohärente Code Basis ist die Einhaltung eines Code Style Guide unverzichtbar. Zudem erlaubt dies den Einsatz von einem Code Linter zur automatischen Qualitätskontrolle. Für dieses Projekt wird der tidyverse styleguide verwendet. Styler und lintr1 können zur Unterstützund des Anwender installiert werden.","code":""},{"path":"https://ostluft.github.io/rOstluft/articles/Technische_Entscheidungen.html","id":"versionskontrolle-und-distribution","dir":"Articles","previous_headings":"","what":"Versionskontrolle und Distribution","title":"[GER] Technische Entscheidungen","text":"Für die Versionkontrolle wird Git verwendet. RStudio hat eingebauten Support. Das Package wird auf github unter Ostluft/rOstluft gehostet. Daten für Tests und Beispiele sind unter Ostluft/rOstluft.data zu finden. Dies erlaubt die Distribution mit Hilfe der devtools: Das Package auf CRAN zu veröffentlichen ist ein relativ aufwendiger Prozess, und darauf wird aufs Erste verzichtet.","code":"#install.packages(\"devtools\") devtools::install_github(\"Ostluft/rOstluft\")"},{"path":"https://ostluft.github.io/rOstluft/articles/Technische_Entscheidungen.html","id":"encoding","dir":"Articles","previous_headings":"","what":"Encoding","title":"[GER] Technische Entscheidungen","text":"Alle Daten werden als UTF-8 abgelegt. Dies wird Zukunft viel Ärger und Frustrationen ersparen.","code":""},{"path":"https://ostluft.github.io/rOstluft/articles/Technische_Entscheidungen.html","id":"importieren-von-strukturierten-daten","dir":"Articles","previous_headings":"","what":"Importieren von strukturierten Daten","title":"[GER] Technische Entscheidungen","text":"Eine der Herausforderung beim importieren von Textdateien ist die Verwendung der korrekten Codierung. Die Input Dateien werden meistens nicht utf-8 vorliegen sondern vermutlich einer ISO 8859 oder einer Windows Code Page Variante. Folglich muss eine Konversion nach utf-8 erfolgen. Die Funktion fread des Packages data.table ist die schnellste Funktione (ca. 2x schneller als die readr Funktionen und ca. 20x schneller als die R base Funktionen2) konvertiert aber den Input nicht nach utf-8: encoding: default “unknown”. possible options “UTF-8” “Latin-1”. Note: used re-encode input, rather enables handling encoded strings native encoding. Das gleiche gilt für die Funktion read.table im Basis Package utils: two approaches reading input local encoding. input known UTF-8 Latin1, use encoding argument declare . input encoding, may translated input. fileEncoding argument achieves setting connection re-encoding current locale. Note Windows systems running UTF-8 locale, may possible. Das Package readr unterstützt via dem locale Argument hingegen die automatische Konvertierung nach utf-8: readr functions yield strings encoded UTF-8. Aus diesem Grund werden für alle read Operationen von Textdateien die entsprechenden Funktionen aus dem readr Package verwendet.","code":""},{"path":"https://ostluft.github.io/rOstluft/articles/Technische_Entscheidungen.html","id":"oop","dir":"Articles","previous_headings":"","what":"OOP","title":"[GER] Technische Entscheidungen","text":"Aus historischen Gründen gibt es R mehrere Klassentypen (S3, S4, RC, R6)34. Für unsere Zwecke eignet sich die R6 Implementation. Dies erlaubt uns die für eine Ablage notwendigen Konfigurationen und Funktionen einem Objekt zu vereinigen. Alternativ kann ein reiner Prozeduraler Stil genutzt werden, dem die notwendigen Angaben für einen store (Pfad, Zugangsdaten, etc) einem Objekt gehalten werden und dieses Objekt immer als Argument einer Funktion übergeben wird. Vorteile OOP: Erlaubt Referenzierung Semantik (kann auch ein Nachteil sein) Nur eine Überprüfung des store Arguments notwendig beim Instanzieren der Klasse, bei Prozeduralen Stil muss dies bei jedem Methodenaufruf erfolgen Bessere strukturierung und abstraktion des Codes, einfachere Wartbarkeit. Konstruktor und vorallem Dekonstruktor Funktionen. Dies erlaubt eine saubere Initialisierung und Freigabe von Ressourcen Nachteile OOP: Autovervollständigung für Klassenmethoden nur wenn eine Klasseninstanz mit dem Namen der Variablen im Globalen Environment ist Debugging von R6 Methoden ist aufwendiger, da RStudio keine Haltepunkte innerhalb der Methode zulässt. Erstellung von Roxygen Dokumentationen für R6 Klassen ist hart.","code":""},{"path":"https://ostluft.github.io/rOstluft/articles/Technische_Entscheidungen.html","id":"dokumentation","dir":"Articles","previous_headings":"","what":"Dokumentation","title":"[GER] Technische Entscheidungen","text":"Roxygen2 erlaubt das Erzeugen von Dokumentation aus Inline Kommentars im Quellcode. Diese werden direkt RStudio eingebunden, bzw. das R Hilfesystem. Mit Hilfe von Vignetten können Tutorials, Beispiele oder weitergehende Erläuterungen dem Package hinzugefügt werden. Werden diese zwei Werkzeuge benützt kann relativ einfach mit pkgdown eine statische Webseite generiert werden.","code":""},{"path":"https://ostluft.github.io/rOstluft/articles/Technische_Entscheidungen.html","id":"tidyverse","dir":"Articles","previous_headings":"","what":"tidyverse","title":"[GER] Technische Entscheidungen","text":"tidyverse opinionated collection R packages designed data science. packages share underlying design philosophy, grammar, data structures. Grundsätzlich sollten die Packages aus der tidyverse Sammlung benützt werden. Die Packages sind der Regel gut dokumentiert, bzw. man findet Hilfe im Internet auf StackOverflow oder dem Forum der RStudio Community. Die RStudio Cheat Sheets bieten einen guten Überblick der Funktionalitäten der einzelnen Packages. Des weiteren entsprechen die Interfaces der Funktionen modernen Programmierstandards und abstrahieren einige R Eigenheiten.","code":""},{"path":"https://ostluft.github.io/rOstluft/articles/Technische_Entscheidungen.html","id":"zugriffe-auf-das-dateisystem","dir":"Articles","previous_headings":"","what":"Zugriffe auf das Dateisystem","title":"[GER] Technische Entscheidungen","text":"Arbeiten mit dem Dateisystem erfolgt mit dem Package fs. Hauptgrund ist wieder die saubere Konvertierung von und nach utf-8 von allen Inputs und Ausgaben. Die R Base Funktionenen benützen das Systemencoding.","code":""},{"path":"https://ostluft.github.io/rOstluft/articles/Technische_Entscheidungen.html","id":"inspirationen-rpackages-die-nützlich-sein-könnten","dir":"Articles","previous_headings":"","what":"Inspirationen / RPackages die nützlich sein könnten","title":"[GER] Technische Entscheidungen","text":"Hier eine Sammlung von Links die bei der Implementation als Inspiration dienen können, bzw. interessante Standpunkte vertreten:","code":""},{"path":"https://ostluft.github.io/rOstluft/articles/Technische_Entscheidungen.html","id":"storr","dir":"Articles","previous_headings":"","what":"storr","title":"[GER] Technische Entscheidungen","text":"Das Package storr ist ein einfacher Objekt Cache implementiert als Key-Value Store. Leider eignet er sich nicht direkt als Basis für unser Vorhaben, aber hier kann man sicher das eine oder andere Konzept übernehmen oder später für die Memoisation von grösseren Abfragen nutzen. Oder bei der Verarbeitung der Input Daten könnte er als einfacher Speicher für ein Job Result Log verwendet werden.","code":""},{"path":"https://ostluft.github.io/rOstluft/articles/Technische_Entscheidungen.html","id":"drake","dir":"Articles","previous_headings":"","what":"drake","title":"[GER] Technische Entscheidungen","text":"Mit drake lassen sich Abläufe planen. Der Clou dabei ist, dass Zwischenresultate memosiert werden und Prozesse parallisiert werden können. Dies ist zwar für die Erstellung und Pflege des Datensatz nur bedingt interessant, für spätere automatisierte Auswertungen es nützlich werden.","code":""},{"path":"https://ostluft.github.io/rOstluft/articles/Technische_Entscheidungen.html","id":"data-table-vs-dplyr","dir":"Articles","previous_headings":"","what":"data.table vs dplyr","title":"[GER] Technische Entscheidungen","text":"Der Hauptunterschied zwischen data.table und dplyr ist, dass data.table Updates per Reference erlaubt, während bei dplyr der Input immer als Immutable Object behandelt wird. Dies ermöglicht data.table gewisse Aufgaben massiv schneller zu verarbeiten. Allerdings ist für unsere Datengrösse Performance nicht die grösste Sorge. Der Syntax von dplyr ist mehr expressiv und somit verständlicher. Auf Stackoverflow hat es eine Interessante Diskussion zu dem Thema mit Beiträgen von beiden Authoren der jeweiligen Packages.","code":""},{"path":"https://ostluft.github.io/rOstluft/articles/Technische_Entscheidungen.html","id":"dokumentieren-der-r6-klassen","dir":"Articles","previous_headings":"","what":"Dokumentieren der R6 Klassen","title":"[GER] Technische Entscheidungen","text":"Ein Nachteil von der Nutzung von R6 Klassen ist, dass die Dokumentierung mit Roxygen nicht gerade unkompliziert ist. Einige Links zu Beispielen findet man diesem Github Issue: Documenting R6 classes without roxygen2","code":""},{"path":"https://ostluft.github.io/rOstluft/articles/Technische_Entscheidungen.html","id":"logging","dir":"Articles","previous_headings":"","what":"Logging","title":"[GER] Technische Entscheidungen","text":"Für automatisierte Prozesse ist auf eine Form von Logging nicht zu verzichten. Im ReadMe des Package loggit findet man eine gute Einführung zum Thema loggen unter R. Unter anderem auch Links zu anderen R Packages.","code":""},{"path":"https://ostluft.github.io/rOstluft/articles/Technische_Entscheidungen.html","id":"tsibble-zoo-xts","dir":"Articles","previous_headings":"","what":"tsibble, zoo, xts","title":"[GER] Technische Entscheidungen","text":"Das Arbeiten mit Zeitreihen ist nichts neues und es existieren einige Packages die sich diesen Aspekten beschäftigen: Tsibble zoo xts","code":""},{"path":"https://ostluft.github.io/rOstluft/articles/Technische_Entscheidungen.html","id":"openair","dir":"Articles","previous_headings":"","what":"openair","title":"[GER] Technische Entscheidungen","text":"Die Daten sollten sich nahtlos das Package openair überführen lassen. Dieses Package ist auf Luftqualität Auswertungen spezialisiert und enthält viele nützliche Funktionen.","code":""},{"path":"https://ostluft.github.io/rOstluft/articles/Technische_Entscheidungen.html","id":"programming-with-dplyr","dir":"Articles","previous_headings":"","what":"Programming with dplyr","title":"[GER] Technische Entscheidungen","text":"Vignette über die Parametrisierung von dplyr Funktionen: dplyr functions use non-standard evaluation (NSE). catch-term means don’t follow usual R rules evaluation. Instead, capture expression typed evaluate custom way. […] Unfortunately benefits come free. two main drawbacks: dplyr arguments referentially transparent. means can’t replace value seemingly equivalent object ’ve defined elsewhere. dplyr code ambiguous. Depending variables defined . Fortunately, dplyr provides tools overcome challenges. require little typing, small amount upfront work worth help save time long run.","code":""},{"path":"https://ostluft.github.io/rOstluft/articles/tutorial.html","id":"einleitung","dir":"Articles","previous_headings":"","what":"Einleitung","title":"[GER] Tutorial","text":"Dieses Dokument soll einem Anwender des Packages rOstluft::rOstluft einen Überblick der enthaltenen Funktionalität bieten und die gängigsten Arbeitsabläufe aufzeigen. Der Fokus dieses Packages liegt der Bereitstellung von Daten aus verschiedenen Datenquellen einem einheitlichen Format zur Analyse der Luftqualität. Ausserdem enthält es Werkzeuge für einige übliche Aufgaben, die während solchen Analysen anfallen. Diese sind Umrechnungen zwischen verschiedenen Mittelungsintervallen, Statistische Methoden mit Berücksichtung der Datenverfügbarkeit, Umwandlung von Volumen- und Massenkonzentrationen und lesen von Daten vorliegend verschiedenen Formaten.","code":""},{"path":"https://ostluft.github.io/rOstluft/articles/tutorial.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"[GER] Tutorial","text":"Der Quellcode von rOstluft ist auf github gehosted. Die einfachste Variante ist die Installation mit Hilfe des Packages devtools: Zusätzlich muss das Package aws.s3 manuell aus dem cloudyr Repositorium installiert werden, weil die CRANR Version veraltet ist: Ist dies wegen Einschränkungen durch Firewalls oder Proxies nicht möglich. Muss der Quellcode manuell von github heruntergeladen werden (Clone download > Download ZIP), entpackt und manuell installiert werden. Allerdings bestehen Abhängigkeiten zu Packages die auf CRAN bereitgestellt werden. Können auch keine CRAN Packages installiert werden, müssen zuerst alle CRAN Abhängkigkeiten und deren Abhängigkeiten installiert werden. Zusätzlich besteht noch die Github Abhängkigkeit zu rOstluft.data. Dieses Packages muss auf die gleiche Weise zuerst installiert werden mit folgenden Schritten: Falls das installieren von rOstluft scheitert, fehlt vermutlich eine Abhängigkeit. Welche das ist, kann der Fehlermeldung entnommen werden. Nach der Installation kann das Packages verwendet werden:","code":"#install.packages(\"devtools\") devtools::install_github(\"Ostluft/rOstluft\") install.packages(\"aws.s3\", repos = c(\"cloudyr\" = \"http://cloudyr.github.io/drat\")) download.file(\"https://github.com/Ostluft/rOstluft/archive/master.zip\", \"rOstluft-master.zip\") download.file(\"https://github.com/Ostluft/rOstluft.data/archive/master.zip\", \"rOstluft.data-master.zip\")  install.packages(\"devtools\") install.packages(\"aws.s3\", repos = c(\"cloudyr\" = \"http://cloudyr.github.io/drat\"))  deps <- c('dplyr', 'tidyr', 'lubridate', 'R6', 'rappdirs', 'tibble', 'base64url', 'forcats',           'fs', 'purrr', 'readr', 'stringr', 'stringi', 'sp', 'rgdal', 'rlang', 'magrittr')  for (p in deps) {   install.packages(p) }  devtools::install_local(\"rOstluft.data-master.zip\", dependencies = FALSE) devtools::install_local(\"rOstluft-master.zip\", dependencies = FALSE) library(rOstluft)"},{"path":[]},{"path":"https://ostluft.github.io/rOstluft/articles/tutorial.html","id":"ostluft-amazon-aws-s3","dir":"Articles","previous_headings":"","what":"Ostluft Amazon AWS S3","title":"[GER] Tutorial","text":"Die zentrale Datenablage innerhalb von Ostluft erfolgt auf Amazon AWS S3.Aus Lizenztechnischen Gründen kann das Bucket nicht öffentlich zugänglich gemacht werden. Die Zugangsdaten werden von Jörg Sintermann vergeben. Die Zugangsdaten werden einfachsten über eine .Renvirion Datei im Verzeichnis des RStudio Projektes oder im HOME Verzeichnis des Users1 dem Package zugänglich gemacht. Inhalt der .Renvirion Datei: Weitere Möglichkeiten sind der Dokumentation von aws.signature zu finden. Sämtliche Daten die einmal von Amazon S3 geöffnet wurden, werden lokal auf dem Rechner gespeichert. Bei jedem folgenden Zugriff wird nur überprüft, ob die Daten noch identisch sind. Der Zugriff auf die Daten erfügt dann über ein store Objekt, welches auf folgende Art initialisiert wird: Dieses store Objekt verfügt über verschiedene Methoden, zur Abfrage von Daten sind jedoch nur zwei von Bedeutung: $get_content(): holt eine Übersicht über alle im store enthaltene Daten $get(): Aktuelle Datenabfrage. Welche Daten geholt werden, muss über Funktionsargumente definiert werden Eine Datenabfrage holt immer die Daten von einem komplettem Jahr einer Station für einen bestimmten Mittelungszeitraum: Jedes der Argumente kann auch ein Vector sein mit mehreren Werte. Es wird dann Kombination aller Möglichkeiten abgefragt. Die letzte Funktionalität von $get() ist die Filterung der Daten vor der Rückgabe. Mit dem Argument “filter” als dplyr::filter() kompatibler Ausdruck:","code":"AWS_ACCESS_KEY_ID = \"XXXXXXXXXXXXXXXXXXXX\" AWS_SECRET_ACCESS_KEY = \"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\" AWS_DEFAULT_REGION = \"eu-central-1\" store <- storage_s3_rds(\"tutorial\", format = format_rolf(), bucket = \"rostluft\", prefix = \"aqmet\") #> store tutorial initialized under 'C:\\Users\\tom\\AppData\\Local/rOstluft/tutorial'  # oder nutze den vordefinierten store (name ist optional, default ist \"aqmet\") store <- store_aqmet(\"tutorial\") content <- store$get_content() content #> # A tibble: 193,549 x 6 #>     year interval site          parameter unit      n #>    <dbl> <fct>    <fct>         <fct>     <fct> <int> #>  1  2020 y1       Wgi_Weiertal  NH3       µg/m3     11 #>  2  2020 y1       WeF_Weid      NH3       µg/m3     11 #>  3  2020 y1       Wdi_Waldhof   NH3       µg/m3     11 #>  4  2020 y1       Tan_NABEL     NH3       µg/m3     11 #>  5  2020 y1       SHn_Ebnet     NH3       µg/m3     11 #>  6  2020 y1       Rap_Hochhaus  NH3       µg/m3     11 #>  7  2020 y1       Oeg_St.Anton  NH3       µg/m3     11 #>  8  2020 y1       LaR_Grabewis  NH3       µg/m3     11 #>  9  2020 y1       Gon_Gontenbad NH3       µg/m3     11 #> 10  2020 y1       Fra_Sand      NH3       µg/m3     11 #> # ... with 193,539 more rows  dplyr::sample_n(content, 10) #> # A tibble: 10 x 6 #>     year interval site                    parameter        unit      n #>    <dbl> <fct>    <fct>                   <fct>            <fct> <int> #>  1  2010 y1       Wet_Weieraecher         NO2_min_min30    µg/m3     11 #>  2  2006 m1       Zch_Schimmelstrasse     O3_nb_d1>160     1        12 #>  3  2009 y1       8200_0010               NO2              µg/m3     11 #>  4  1987 d1       Pilatus                 StrGlo_max_min10 W/m2    365 #>  5  2018 d1       Sch_Güterstrasse        p_min_min30      hPa     3622 #>  6  2003 min30    Zch_Stampfenbachstrasse p                hPa   17482 #>  7  2004 min30    Neu_Galgenbuck          NO2              ppb   17382 #>  8  2016 m1       Opf_Balsberg            NO2_nb_h1>200    1        12 #>  9  2013 d1       Arb_Bahnhofstrasse      WD               °       3611 #> 10  1997 m1       Säntis                  T_max_min10      °C       1212 store$get(site = \"Zch_Schimmelstrasse\", year = 2014, interval = \"min30\") #> # A tibble: 261,315 x 6 #>    starttime           site                parameter interval unit      value #>    <dttm>              <fct>               <fct>     <fct>    <fct>     <dbl> #>  1 2014-01-01 00:00:00 Zch_Schimmelstrasse O3        min30    µg/m3     1.59   #>  2 2014-01-01 00:00:00 Zch_Schimmelstrasse CO        min30    ppm       0.637 #>  3 2014-01-01 00:00:00 Zch_Schimmelstrasse Hr        min30    %Hr      87.4   #>  4 2014-01-01 00:00:00 Zch_Schimmelstrasse NO2       min30    ppb      28.1   #>  5 2014-01-01 00:00:00 Zch_Schimmelstrasse NO        min30    ppb      61.5   #>  6 2014-01-01 00:00:00 Zch_Schimmelstrasse NOx       min30    ppb      89.6   #>  7 2014-01-01 00:00:00 Zch_Schimmelstrasse O3        min30    ppb       0.798 #>  8 2014-01-01 00:00:00 Zch_Schimmelstrasse PM10      min30    µg/m3   102.     #>  9 2014-01-01 00:00:00 Zch_Schimmelstrasse PN        min30    1/cm3 25971     #> 10 2014-01-01 00:00:00 Zch_Schimmelstrasse RainDur   min30    min       0     #> # ... with 261,305 more rows sites <- c(\"Zch_Schimmelstrasse\", \"Zch_Rosengartenstrasse\", \"Zch_Stampfenbachstrasse\") data <- store$get(site = sites, year = 2014:2015, interval = \"min30\") data #> # A tibble: 1,391,156 x 6 #>    starttime           site                   parameter interval unit    value #>    <dttm>              <fct>                  <fct>     <fct>    <fct>   <dbl> #>  1 2014-01-01 00:00:00 Zch_Rosengartenstrasse O3        min30    µg/m3   1.55   #>  2 2014-01-01 00:00:00 Zch_Rosengartenstrasse Hr        min30    %Hr    92.7   #>  3 2014-01-01 00:00:00 Zch_Rosengartenstrasse NO2       min30    ppb    18.6   #>  4 2014-01-01 00:00:00 Zch_Rosengartenstrasse NO        min30    ppb    42.8   #>  5 2014-01-01 00:00:00 Zch_Rosengartenstrasse NOx       min30    ppb    61.4   #>  6 2014-01-01 00:00:00 Zch_Rosengartenstrasse O3        min30    ppb     0.776 #>  7 2014-01-01 00:00:00 Zch_Rosengartenstrasse PM10      min30    µg/m3 298.     #>  8 2014-01-01 00:00:00 Zch_Rosengartenstrasse RainDur   min30    min     0     #>  9 2014-01-01 00:00:00 Zch_Rosengartenstrasse T         min30    °C     -2.18   #> 10 2014-01-01 00:00:00 Zch_Rosengartenstrasse p         min30    hPa   966.    #> # ... with 1,391,146 more rows  dplyr::sample_n(data, 10) #> # A tibble: 10 x 6 #>    starttime           site                    parameter interval unit   value #>    <dttm>              <fct>                   <fct>     <fct>    <fct>  <dbl> #>  1 2015-09-23 11:30:00 Zch_Rosengartenstrasse  O3        min30    µg/m3 36.3    #>  2 2015-07-10 03:00:00 Zch_Schimmelstrasse     WVv       min30    m/s    0.900 #>  3 2014-08-21 14:00:00 Zch_Rosengartenstrasse  NO        min30    ppb   39.6   #>  4 2015-05-15 21:00:00 Zch_Rosengartenstrasse  O3        min30    µg/m3 39.1    #>  5 2014-07-17 00:00:00 Zch_Rosengartenstrasse  RainDur   min30    min    0     #>  6 2015-03-02 01:00:00 Zch_Schimmelstrasse     RainDur   min30    min   30     #>  7 2014-01-05 11:00:00 Zch_Schimmelstrasse     RainDur   min30    min    0.15  #>  8 2015-02-07 22:30:00 Zch_Schimmelstrasse     CO        min30    ppm    0.444 #>  9 2015-10-16 09:30:00 Zch_Stampfenbachstrasse NO        min30    ppb   21.1   #> 10 2014-10-07 23:00:00 Zch_Stampfenbachstrasse WVv       min30    m/s    1.15 store$get(site = sites, year = 2014, interval = \"min30\", filter = parameter == \"PM10\") #> # A tibble: 51,319 x 6 #>    starttime           site                   parameter interval unit  value #>    <dttm>              <fct>                  <fct>     <fct>    <fct> <dbl> #>  1 2014-01-01 00:00:00 Zch_Rosengartenstrasse PM10      min30    µg/m3 298.   #>  2 2014-01-01 00:30:00 Zch_Rosengartenstrasse PM10      min30    µg/m3 557.   #>  3 2014-01-01 01:00:00 Zch_Rosengartenstrasse PM10      min30    µg/m3 308.   #>  4 2014-01-01 01:30:00 Zch_Rosengartenstrasse PM10      min30    µg/m3 169.   #>  5 2014-01-01 02:00:00 Zch_Rosengartenstrasse PM10      min30    µg/m3 128.   #>  6 2014-01-01 02:30:00 Zch_Rosengartenstrasse PM10      min30    µg/m3  82.99 #>  7 2014-01-01 03:00:00 Zch_Rosengartenstrasse PM10      min30    µg/m3  38.33 #>  8 2014-01-01 03:30:00 Zch_Rosengartenstrasse PM10      min30    µg/m3  32.66 #>  9 2014-01-01 04:00:00 Zch_Rosengartenstrasse PM10      min30    µg/m3  32.44 #> 10 2014-01-01 04:30:00 Zch_Rosengartenstrasse PM10      min30    µg/m3  31.77 #> # ... with 51,309 more rows"},{"path":"https://ostluft.github.io/rOstluft/articles/tutorial.html","id":"lokales-arbeiten-mit-den-aws-s3-daten","dir":"Articles","previous_headings":"","what":"Lokales Arbeiten mit den AWS S3 Daten","title":"[GER] Tutorial","text":"Ein Nachteil des S3 Storage ist, dass bei jeder Datenabfrage eine Internetverbindung zur Überprüfung, ob aktualisierte Daten verfügbar sind, vorhanden sein muss. Selbst wenn die Daten bereits lokal gespeichert sind. Nicht nur wird eine Internetverbindung benötigt, die Überprüfung braucht auch eine kurze Zeit. Hat man alle notwendigen Daten bereits herunter geladen, kann man jedoch mit einem lokalen Store arbeiten. Praktischerweise hat der S3 Store eine Funktion, welche einen lokalen Store zurückgibt. Dieser verfügt über die gleichen Funktionalität wie der S3 Store: Dem aufmerksamen Leser ist vermutlich aufgefallen, dass die Inhaltsübersicht von $get_content() nicht dem lokalen Inhalt entspricht. Es ist immer noch die Übersicht welche Daten S3 verfügbar wären. man wissen welche Daten lokal verfügbar sind, hilft einem die Funktion $list_chunks() weiter. Auch der S3 Store verfügt über die $list_chunks() Funktion. Im normal Fall ist Nutzung von $get_content() über $list_chunks() zu bevorzugen. Die Rückgabe von $get_content() enthält die gemessen Parameter und die Anzahl der gültigen Punkte. Bei $list_chunks() hingegen sind einige interne Informationen über den Store enthalten. Um die Vorbereitung um mit einem lokalen Store zu arbeiten zu vereinfachen verfügt der S3 Store über die Funktion $download(...). Die dot Argumente werden als Filter auf die Rückgabe von $list_chunks() angewendet. Ohne Argumente wird der komplette Store heruntergeladen. Folgendes Beispiel lädt samtliche 30 Minutenmittelwerte für die Station Rosengartenstrasse nach dem Jahr 2015 (Achtung == verwenden, es sind Filter Ausdrücke!):","code":"lokal <- store$get_local_storage() lokal$get_content() #> # A tibble: 193,549 x 6 #>     year interval site          parameter unit      n #>    <dbl> <fct>    <fct>         <fct>     <fct> <int> #>  1  2020 y1       Wgi_Weiertal  NH3       µg/m3     11 #>  2  2020 y1       WeF_Weid      NH3       µg/m3     11 #>  3  2020 y1       Wdi_Waldhof   NH3       µg/m3     11 #>  4  2020 y1       Tan_NABEL     NH3       µg/m3     11 #>  5  2020 y1       SHn_Ebnet     NH3       µg/m3     11 #>  6  2020 y1       Rap_Hochhaus  NH3       µg/m3     11 #>  7  2020 y1       Oeg_St.Anton  NH3       µg/m3     11 #>  8  2020 y1       LaR_Grabewis  NH3       µg/m3     11 #>  9  2020 y1       Gon_Gontenbad NH3       µg/m3     11 #> 10  2020 y1       Fra_Sand      NH3       µg/m3     11 #> # ... with 193,539 more rows  lokal$get(site = sites, year = 2014, interval = \"min30\", filter = parameter == \"PM10\") #> # A tibble: 51,319 x 6 #>    starttime           site                   parameter interval unit  value #>    <dttm>              <fct>                  <fct>     <fct>    <fct> <dbl> #>  1 2014-01-01 00:00:00 Zch_Rosengartenstrasse PM10      min30    µg/m3 298.   #>  2 2014-01-01 00:30:00 Zch_Rosengartenstrasse PM10      min30    µg/m3 557.   #>  3 2014-01-01 01:00:00 Zch_Rosengartenstrasse PM10      min30    µg/m3 308.   #>  4 2014-01-01 01:30:00 Zch_Rosengartenstrasse PM10      min30    µg/m3 169.   #>  5 2014-01-01 02:00:00 Zch_Rosengartenstrasse PM10      min30    µg/m3 128.   #>  6 2014-01-01 02:30:00 Zch_Rosengartenstrasse PM10      min30    µg/m3  82.99 #>  7 2014-01-01 03:00:00 Zch_Rosengartenstrasse PM10      min30    µg/m3  38.33 #>  8 2014-01-01 03:30:00 Zch_Rosengartenstrasse PM10      min30    µg/m3  32.66 #>  9 2014-01-01 04:00:00 Zch_Rosengartenstrasse PM10      min30    µg/m3  32.44 #> 10 2014-01-01 04:30:00 Zch_Rosengartenstrasse PM10      min30    µg/m3  31.77 #> # ... with 51,309 more rows tibble::glimpse(lokal$list_chunks()) #> Rows: 6 #> Columns: 7 #> $ chunk_name              <fs::path> \"min30/bWluMzDCu1pjaF9Sb3NlbmdhcnRlbnN0cm~ #> $ interval                <chr> \"min30\", \"min30\", \"min30\", \"min30\", \"min30\", \"~ #> $ site                    <chr> \"Zch_Rosengartenstrasse\", \"Zch_Rosengartenstra~ #> $ year                    <chr> \"2014\", \"2015\", \"2014\", \"2015\", \"2014\", \"2015\" #> $ local.path              <fs::path> \"C:/Users/tom/AppData/Local/rOstluft/tutorial/~ #> $ local.modification_time <dttm> 2022-03-15 10:51:21, 2022-03-15 10:51:21,~ #> $ local.size              <fs::bytes> 808.31K, 924.68K, 1.22M, 1.22M, 1.22M, 1.13M~ tibble::glimpse(store$list_chunks()) #> Rows: 14,434 #> Columns: 11 #> $ chunk_name              <fs::path> \"d1/ZDHCu01hdV9Qw7xudMK7MTk5MA\", \"d1/ZDHC~ #> $ interval                <chr> \"d1\", \"d1\", \"d1\", \"d1\", \"d1\", \"d1\", \"d1\", \"d1\"~ #> $ site                    <chr> \"Mau_Pünt\", \"Mau_Pünt\", \"Mau_Pünt\", \"Mau_Pünt\"~nt\"~ #> $ year                    <chr> \"1990\", \"1991\", \"1992\", \"1993\", \"1994\", \"1995\"~ #> $ s3.key                  <chr> \"aqmet/data/d1/ZDHCu01hdV9Qw7xudMK7MTk5MA.rds\"~ #> $ s3.lastmodified         <chr> \"2021-04-17T08:00:16.000Z\", \"2021-04-17T08:00:~ #> $ s3.etag                 <chr> \"ddc11854df5a44ef81495fa307d98ab6\", \"26174d489~ #> $ s3.size                 <fs::bytes> 15.71K, 27.03K, 29.17K, 28.24K, 16.88K, ~ #> $ local.path              <fs::path> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N~ #> $ local.modification_time <dttm> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N~ #> $ local.size              <fs::bytes> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, ~ store$download(site == \"Zch_Rosengartenstrasse\", interval == \"min30\", year > 2015) #> list()  lokal$list_chunks() %>% dplyr::select(\"site\", \"year\", \"interval\") #> # A tibble: 11 x 3 #>    site                    year  interval #>    <chr>                   <chr> <chr>    #>  1 Zch_Rosengartenstrasse  2020  min30    #>  2 Zch_Rosengartenstrasse  2017  min30    #>  3 Zch_Rosengartenstrasse  2018  min30    #>  4 Zch_Rosengartenstrasse  2019  min30    #>  5 Zch_Rosengartenstrasse  2014  min30    #>  6 Zch_Rosengartenstrasse  2015  min30    #>  7 Zch_Rosengartenstrasse  2016  min30    #>  8 Zch_Stampfenbachstrasse 2014  min30    #>  9 Zch_Stampfenbachstrasse 2015  min30    #> 10 Zch_Schimmelstrasse     2014  min30    #> 11 Zch_Schimmelstrasse     2015  min30"},{"path":"https://ostluft.github.io/rOstluft/articles/tutorial.html","id":"eigene-daten-in-einem-lokalen-store","dir":"Articles","previous_headings":"","what":"Eigene Daten in einem lokalen Store","title":"[GER] Tutorial","text":"Der aqmet S3 Store enthält nur bereinigte Daten von abgeschlossenen Jahren. Werden Daten benötigt, die nicht S3 vorhanden sind, bietet sich die Nutzung eines seperaten lokalen Stores : diesen kann man nun Daten mit der Store Funktion $put() oder der Hilfsfunktion import_directory() importieren: Wie gewohnt kann erhält man mit $get_content() eine Übersicht und die Daten mit $get():","code":"my_store = storage_local_rds(\"eigene_daten\", format_rolf(), read.only = FALSE) #> Local store eigene_daten initialized under 'C:\\Users\\tom\\AppData\\Local/rOstluft/eigene_daten' examples_path <- system.file(\"extdata\", package = \"rOstluft.data\") import_directory(my_store, examples_path, read_airmo_csv, glob = \"*Jan.csv\") #> Importing 'D:/tom/Documents/R/win-library/4.1/rOstluft.data/extdata/Zch_Stampfenbachstrasse_d1_2013_Jan.csv' with size 25.5K. File 1 of 3 #> Read 'D:/tom/Documents/R/win-library/4.1/rOstluft.data/extdata/Zch_Stampfenbachstrasse_d1_2013_Jan.csv' in 0.56 seconds. Got 2170 data points #> First put to storage. Save columns types to C:/Users/tom/AppData/Local/rOstluft/eigene_daten/columns.rds #> Put data into store eigene_daten in 0.10 seconds #> Importing 'D:/tom/Documents/R/win-library/4.1/rOstluft.data/extdata/Zch_Stampfenbachstrasse_h1_2013_Jan.csv' with size 143K. File 2 of 3 #> Read 'D:/tom/Documents/R/win-library/4.1/rOstluft.data/extdata/Zch_Stampfenbachstrasse_h1_2013_Jan.csv' in 0.07 seconds. Got 14116 data points #> Put data into store eigene_daten in 0.13 seconds #> Importing 'D:/tom/Documents/R/win-library/4.1/rOstluft.data/extdata/Zch_Stampfenbachstrasse_min30_2013_Jan.csv' with size 259K. File 3 of 3 #> Read 'D:/tom/Documents/R/win-library/4.1/rOstluft.data/extdata/Zch_Stampfenbachstrasse_min30_2013_Jan.csv' in 0.08 seconds. Got 28234 data points #> Put data into store eigene_daten in 0.10 seconds #> Finished import after 1.05 seconds  fn <- fs::path(examples_path, \"Zch_Rosengartenstrasse_2010-2014.csv\") data <- read_airmo_csv(fn) my_store$put(data) #> # A tibble: 18 x 6 #>     year interval site                   parameter unit      n #>    <dbl> <fct>    <fct>                  <fct>     <fct> <int> #>  1  2013 min30    Zch_Rosengartenstrasse NO        µg/m3  42699 #>  2  2013 min30    Zch_Rosengartenstrasse NO2       µg/m3  42699 #>  3  2013 min30    Zch_Rosengartenstrasse NOx       ppb    4269 #>  4  2013 min30    Zch_Rosengartenstrasse O3        µg/m3  42777 #>  5  2013 min30    Zch_Rosengartenstrasse PM10      µg/m3  40255 #>  6  2013 min30    Zch_Rosengartenstrasse Hr        %Hr    4010 #>  7  2013 min30    Zch_Rosengartenstrasse p         hPa    4291 #>  8  2013 min30    Zch_Rosengartenstrasse RainDur   min    4291 #>  9  2013 min30    Zch_Rosengartenstrasse T         °C     40100 #> 10  2014 min30    Zch_Rosengartenstrasse NO        µg/m3 174155 #> 11  2014 min30    Zch_Rosengartenstrasse NO2       µg/m3 174155 #> 12  2014 min30    Zch_Rosengartenstrasse NOx       ppb   17415 #> 13  2014 min30    Zch_Rosengartenstrasse O3        µg/m3 173666 #> 14  2014 min30    Zch_Rosengartenstrasse PM10      µg/m3 167888 #> 15  2014 min30    Zch_Rosengartenstrasse Hr        %Hr   17517 #> 16  2014 min30    Zch_Rosengartenstrasse p         hPa   17519 #> 17  2014 min30    Zch_Rosengartenstrasse RainDur   min   17519 #> 18  2014 min30    Zch_Rosengartenstrasse T         °C    175177 my_store$get_content() #> # A tibble: 126 x 6 #>     year interval site                   parameter unit      n #>    <dbl> <fct>    <fct>                  <fct>     <fct> <int> #>  1  2014 min30    Zch_Rosengartenstrasse NO        µg/m3 174155 #>  2  2014 min30    Zch_Rosengartenstrasse NO2       µg/m3 174155 #>  3  2014 min30    Zch_Rosengartenstrasse NOx       ppb   17415 #>  4  2014 min30    Zch_Rosengartenstrasse O3        µg/m3 173666 #>  5  2014 min30    Zch_Rosengartenstrasse PM10      µg/m3 167888 #>  6  2014 min30    Zch_Rosengartenstrasse Hr        %Hr   17517 #>  7  2014 min30    Zch_Rosengartenstrasse p         hPa   17519 #>  8  2014 min30    Zch_Rosengartenstrasse RainDur   min   17519 #>  9  2014 min30    Zch_Rosengartenstrasse T         °C    175177 #> 10  2013 min30    Zch_Rosengartenstrasse NO        µg/m3  42699 #> # ... with 116 more rows  my_store$get(site = \"Zch_Stampfenbachstrasse\", interval = c(\"d1\", \"h1\"), year = 2013)  %>%   dplyr::arrange(.data$starttime, .data$parameter) #> # A tibble: 16,286 x 6 #>    starttime           site                    parameter   interval unit   value #>    <dttm>              <fct>                   <fct>       <fct>    <fct>  <dbl> #>  1 2013-01-01 00:00:00 Zch_Stampfenbachstrasse CO          d1       mg/m3  0.381 #>  2 2013-01-01 00:00:00 Zch_Stampfenbachstrasse CO          d1       ppm    0.327 #>  3 2013-01-01 00:00:00 Zch_Stampfenbachstrasse CO          h1       mg/m3  0.805 #>  4 2013-01-01 00:00:00 Zch_Stampfenbachstrasse CO          h1       ppm    0.692 #>  5 2013-01-01 00:00:00 Zch_Stampfenbachstrasse CO_max_min~ d1       mg/m3  0.966 #>  6 2013-01-01 00:00:00 Zch_Stampfenbachstrasse CO_min_min~ d1       mg/m3  0.190 #>  7 2013-01-01 00:00:00 Zch_Stampfenbachstrasse CO_nb_min30 d1       1     48     #>  8 2013-01-01 00:00:00 Zch_Stampfenbachstrasse Hr          d1       %Hr   76.0   #>  9 2013-01-01 00:00:00 Zch_Stampfenbachstrasse Hr          h1       %Hr   82.9   #> 10 2013-01-01 00:00:00 Zch_Stampfenbachstrasse Hr_max_min~ d1       %Hr   88.4   #> # ... with 16,276 more rows"},{"path":"https://ostluft.github.io/rOstluft/articles/tutorial.html","id":"einlesefunktionen-von-daten","dir":"Articles","previous_headings":"","what":"Einlesefunktionen von Daten","title":"[GER] Tutorial","text":"Um Daten R einzulesen exisitieren für folgende Quellen bereits Funktionen: Ostluft: read_airmo_csv() und read_airmo_dat() für Exporte aus der AIRMO MeteoSchweiz: read_smn() und read_smn_multiple() für SwissMetNet Exporte ETHZ/IAC: read_ethz_iac() Meteo Stationen auf dem Hönggerberg und dem Hauptgebäude CHN Existiert für die vorliegenden Daten keine Funktion und man möchte die selber schreiben dieser Stelle einige Hinweise und Tipps.","code":""},{"path":"https://ostluft.github.io/rOstluft/articles/tutorial.html","id":"verwende-readr-funktionen-und-definiere-die-zeichenkodierung","dir":"Articles","previous_headings":"","what":"Verwende readr Funktionen und definiere die Zeichenkodierung","title":"[GER] Tutorial","text":"Ein generelles Problem beim einlesen von Textdateien ist die Zeichenkodierung. Die meisten haben vermutlich “�” schon Texten gesehen. Alle Daten im aqmet Store und alle Rückgabewerte von read_xxx() Funktionen sind UTF-8 kodiert. Mit dem readr Packages wird bei korrekter Definition der Locale der Text automatisch zu UTF-8 konvertiert. Im Gegensatz zu den R Base Funktionen oderdata.table::fread().","code":""},{"path":"https://ostluft.github.io/rOstluft/articles/tutorial.html","id":"ausgabeformat-rolf","dir":"Articles","previous_headings":"","what":"Ausgabeformat rolf","title":"[GER] Tutorial","text":"Für ein reibungsloses Zusammenspiel mit den Stores zu garantieren muss das Format rolf eingehalten werden. rolf setzt einen tibble mit folgenden Spalten und Klassen voraus: Selbst wenn der Datei keine Einheiten enthalten sind, ist es besser die Spalte unit mit NA zu initialisieren. Ein weiterer Trick ist es die Spalten Ende explizit zu selektionieren. Hier ein Beispiel, wie es read_smn() gelöst ist: Mit dem dplyr::select Ende ist man sicher nur die Spalten der Rückgabe zu haben die man haben und es ist einfach noch Spalten umzubenennen und die Reihenfolge zu ändern.","code":"data <- dplyr::mutate(data,   stn = forcats::as_factor(.data$stn),   parameter = forcats::as_factor(.data$parameter),   interval = forcats::as_factor(interval),   unit = factor(NA) ) dplyr::select(data, starttime = \"time\", site = \"stn\", \"parameter\", \"interval\", \"unit\", \"value\")"},{"path":"https://ostluft.github.io/rOstluft/articles/tutorial.html","id":"zusammenfügen-von-daten-im-rolf-format","dir":"Articles","previous_headings":"","what":"Zusammenfügen von Daten im rolf Format","title":"[GER] Tutorial","text":"Die Verwendung von Factoren im rolf Format hat seine Vor- und Nachteile. Der Hauptvorteil liegt bei schnelleren Lese- und Schreiboperation, der grösste Nachteil beim Zusammenfügen der Daten. Jedoch unterstützt seit dplyr v1.0.0 dplyr::bind_rows das Zusammenfügen von Factor Spalten. Diese Funktion unterstützt ausserdem Quasiquotation von rlang2. Somit kann auch eine grosse Liste von tibbles im rolf Format komfortable aneinander gefügt werden: dplyr::bind_rows() entfernt jedoch keine Duplikate aus den Daten. Es hängt die Daten einfach aneinander. Möchte man Duplikate entfernen, bzw. Daten aktualisieren mit neueren Daten muss man die Funktion $merge() des Format Objekts benützen. Dieses wurde beim Erzeugen des Store direkt initialisiert und ist als Feld $format verfügbar. Alternativ kann ein seperates Format Objekt erzeugt werden. Die Daten im ersten Datenframe werden über Daten im zweiten Datenframe priorisiert. Die $merge() Funktion unterstützt nur 2 Argumente. Muss eine Liste von tibbles gemerget werden muss man purrr::reduce() benützen. Mit Hilfe des Argument .dir kann man die Priosierung setzen. Mit “forward”\" haben die Daten die zuerst der Liste auftauchen Priorität, mit “backward” die Letzten.","code":"df1 <- read_airmo_csv(fs::path(examples_path, \"Zch_Stampfenbachstrasse_h1_2013_Jan.csv\")) df2 <- read_airmo_csv(fs::path(examples_path, \"Zch_Stampfenbachstrasse_d1_2013_Jan.csv\")) df_comb <- dplyr::bind_rows(df1, df2) df_comb %>% dplyr::arrange(.data$starttime, .data$parameter) #> # A tibble: 16,286 x 6 #>    starttime           site                    parameter interval unit   value #>    <dttm>              <fct>                   <fct>     <fct>    <fct>  <dbl> #>  1 2013-01-01 00:00:00 Zch_Stampfenbachstrasse CO        h1       mg/m3  0.805 #>  2 2013-01-01 00:00:00 Zch_Stampfenbachstrasse CO        h1       ppm    0.692 #>  3 2013-01-01 00:00:00 Zch_Stampfenbachstrasse CO        d1       mg/m3  0.381 #>  4 2013-01-01 00:00:00 Zch_Stampfenbachstrasse CO        d1       ppm    0.327 #>  5 2013-01-01 00:00:00 Zch_Stampfenbachstrasse Hr        h1       %Hr   82.9   #>  6 2013-01-01 00:00:00 Zch_Stampfenbachstrasse Hr        d1       %Hr   76.0   #>  7 2013-01-01 00:00:00 Zch_Stampfenbachstrasse NO        h1       µg/m3 80.5    #>  8 2013-01-01 00:00:00 Zch_Stampfenbachstrasse NO        h1       ppb   64.6   #>  9 2013-01-01 00:00:00 Zch_Stampfenbachstrasse NO        d1       µg/m3 17.6    #> 10 2013-01-01 00:00:00 Zch_Stampfenbachstrasse NO        d1       ppb   14.1   #> # ... with 16,276 more rows  # liste mit 20+ tibbles df_list <- read_smn_multiple(fs::path(examples_path, \"smn_multi.txt\"), as_list = TRUE) length(df_list) #> [1] 28 df_comb <- dplyr::bind_rows(!!!df_list) df_comb %>% dplyr::arrange(.data$starttime, .data$parameter) #> # A tibble: 1,399 x 6 #>    starttime           site  parameter interval unit  value #>    <dttm>              <fct> <fct>     <fct>    <fct> <dbl> #>  1 2010-01-01 00:00:00 KLO   dkl010b0  h1       NA    319   #>  2 2010-01-01 00:00:00 KLO   fkl010b0  h1       NA      1.5 #>  3 2010-01-01 00:00:00 KLO   gre000b0  h1       NA      0   #>  4 2010-01-01 00:00:00 KLO   tre200b0  h1       NA      2.3 #>  5 2010-01-01 00:00:00 UEB   dk1towb0  h1       NA    249   #>  6 2010-01-01 00:00:00 UEB   fk1towb0  h1       NA      1.7 #>  7 2010-01-01 00:00:00 UEB   ta1towb0  h1       NA      3.7 #>  8 2010-01-01 01:00:00 KLO   dkl010b0  h1       NA    317   #>  9 2010-01-01 01:00:00 KLO   fkl010b0  h1       NA      1.7 #> 10 2010-01-01 01:00:00 KLO   gre000b0  h1       NA      0   #> # ... with 1,389 more rows # kopiere Daten und setze einige NA -> Resultat sollte NA enthalten df1 <- df2 df1$value[1:150] <- NA  df_comb <- store$format$merge(df1, df2) df_comb %>% dplyr::arrange(.data$starttime, .data$parameter) #> # A tibble: 2,170 x 6 #>    starttime           site                    parameter    interval unit  value #>    <dttm>              <fct>                   <fct>        <fct>    <fct> <dbl> #>  1 2013-01-01 00:00:00 Zch_Stampfenbachstrasse CO           d1       mg/m3  NA   #>  2 2013-01-01 00:00:00 Zch_Stampfenbachstrasse CO           d1       ppm    NA   #>  3 2013-01-01 00:00:00 Zch_Stampfenbachstrasse CO_max_min30 d1       mg/m3  NA   #>  4 2013-01-01 00:00:00 Zch_Stampfenbachstrasse CO_min_min30 d1       mg/m3  NA   #>  5 2013-01-01 00:00:00 Zch_Stampfenbachstrasse CO_nb_min30  d1       1      NA   #>  6 2013-01-01 00:00:00 Zch_Stampfenbachstrasse Hr           d1       %Hr    76.0 #>  7 2013-01-01 00:00:00 Zch_Stampfenbachstrasse Hr_max_min30 d1       %Hr    88.4 #>  8 2013-01-01 00:00:00 Zch_Stampfenbachstrasse Hr_min_min30 d1       %Hr    50.3 #>  9 2013-01-01 00:00:00 Zch_Stampfenbachstrasse Hr_nb_min30  d1       1      48   #> 10 2013-01-01 00:00:00 Zch_Stampfenbachstrasse NO           d1       µg/m3  17.66 #> # ... with 2,160 more rows  rolf <- format_rolf() df_comb <- rolf$merge(df1, df2) df_comb %>% dplyr::arrange(.data$starttime, .data$parameter) #> # A tibble: 2,170 x 6 #>    starttime           site                    parameter    interval unit  value #>    <dttm>              <fct>                   <fct>        <fct>    <fct> <dbl> #>  1 2013-01-01 00:00:00 Zch_Stampfenbachstrasse CO           d1       mg/m3  NA   #>  2 2013-01-01 00:00:00 Zch_Stampfenbachstrasse CO           d1       ppm    NA   #>  3 2013-01-01 00:00:00 Zch_Stampfenbachstrasse CO_max_min30 d1       mg/m3  NA   #>  4 2013-01-01 00:00:00 Zch_Stampfenbachstrasse CO_min_min30 d1       mg/m3  NA   #>  5 2013-01-01 00:00:00 Zch_Stampfenbachstrasse CO_nb_min30  d1       1      NA   #>  6 2013-01-01 00:00:00 Zch_Stampfenbachstrasse Hr           d1       %Hr    76.0 #>  7 2013-01-01 00:00:00 Zch_Stampfenbachstrasse Hr_max_min30 d1       %Hr    88.4 #>  8 2013-01-01 00:00:00 Zch_Stampfenbachstrasse Hr_min_min30 d1       %Hr    50.3 #>  9 2013-01-01 00:00:00 Zch_Stampfenbachstrasse Hr_nb_min30  d1       1      48   #> 10 2013-01-01 00:00:00 Zch_Stampfenbachstrasse NO           d1       µg/m3  17.66 #> # ... with 2,160 more rows df_comb <- purrr::reduce(df_list, rolf$merge, .dir = \"forward\") df_comb %>% dplyr::arrange(.data$starttime, .data$parameter) #> # A tibble: 1,399 x 6 #>    starttime           site  parameter interval unit  value #>    <dttm>              <fct> <fct>     <fct>    <fct> <dbl> #>  1 2010-01-01 00:00:00 KLO   dkl010b0  h1       NA    319   #>  2 2010-01-01 00:00:00 KLO   fkl010b0  h1       NA      1.5 #>  3 2010-01-01 00:00:00 KLO   gre000b0  h1       NA      0   #>  4 2010-01-01 00:00:00 KLO   tre200b0  h1       NA      2.3 #>  5 2010-01-01 00:00:00 UEB   dk1towb0  h1       NA    249   #>  6 2010-01-01 00:00:00 UEB   fk1towb0  h1       NA      1.7 #>  7 2010-01-01 00:00:00 UEB   ta1towb0  h1       NA      3.7 #>  8 2010-01-01 01:00:00 KLO   dkl010b0  h1       NA    317   #>  9 2010-01-01 01:00:00 KLO   fkl010b0  h1       NA      1.7 #> 10 2010-01-01 01:00:00 KLO   gre000b0  h1       NA      0   #> # ... with 1,389 more rows"},{"path":"https://ostluft.github.io/rOstluft/articles/tutorial.html","id":"metadaten","dir":"Articles","previous_headings":"","what":"Metadaten","title":"[GER] Tutorial","text":"Daten aus verschiedenen Quellen werden verschiedene Schemen für die Vergabe von Namen haben. MeteoSchweiz zum Beispiel kodiert im Parameter Namen gleichzeitig das Mittelungsinterval: Um die Bezeichnungen zu normalisieren kommt es zu einem Zusammenspiel von im Store bereitgestellte Daten und der Funktion meta_apply(). Das Store Objekt verfügt über die Funktion $get_meta(), welche im AWS S3 bereitgestellte Metadaten zurück gibt. Wird $get_meta() ohne Argument aufgerufen erhält man eine Liste mit sämtlichen Metadaten im Store. Kennt man bereits den Namen kann man direkt die entsprechenden Metadaten holen: Die meta_apply() benützt die Metadaten als “Lookup Table”. Es wird folgende Operation ausgeführt: Wobei die jeweiligen Spalten jeweils als Argument übergeben werden. Die Funktion verfügt über verschiende Modi um mit fehlenden Einträgen umzugehen. Im folgenden Beispiel werden bei den MeteoSchweiz Daten die “unit” Spalte basierend auf den “parameter” Spalte ausgefüllt. Da die Parameter noch die MeteoSchweiz Bezeichnungen haben müssen wir als Meta Key die Spalte “parameter_original” und “unit” als Value verwenden. Es werden die Daten aus rOstluft.data verwendet. diesen fehlt den Metadaten der MeteoSchweiz Parameter rre150z0 (Niederschlag). Der Default Modus “strict” stoppt das Script: Im einfachsten Fall werden Zeilen mit fehlenden Einträge einfach gelöscht. Dies geschieht mit dem Modus “drop”: Sollte der Parameter für spätere Bearbeitung behalten werden, kommt der Modus “keep” zum Zug: Mit Hilfe des Modus “replace” kann eine zusätzliche “Lookup Table” übergeben werden. Werte dieser Tabelle haben Priorität über Werte der Meta Tabelle. Im Beispiel wird die fehlende Einheit für rre150z0 bereit gestellt und die Einheit für dkl010z0 von ° zu deg überschrieben. Hier ein Beispiel für die komplette Überführung der MeteoSchweiz Daten, inkl. manuelle Umbennung von rre150z0 und Änderung der Einheit für die Windrichtung (WD) von ° zu deg:","code":"meta <- store$get_meta() names(meta) #>  [1] \"all\"                          \"ecmwf\"                        #>  [3] \"ethz\"                         \"hysplit\"                      #>  [5] \"hysplit_cluster_trajectories\" \"meteoschweiz\"                 #>  [7] \"meteotest\"                    \"nabel\"                        #>  [9] \"ostluft\"                      \"seepolizei\"  meteoschweiz <- store$get_meta(\"meteoschweiz\") tibble::glimpse(meteoschweiz) #> List of 1 #>  $ meteoschweiz: tibble [265 x 15] (S3: tbl_df/tbl/data.frame) #>   ..$ site_short        : chr [1:265] \"TAE\" \"TAE\" \"TAE\" \"TAE\" ... #>   ..$ site              : chr [1:265] \"Aadorf/Tänikon\" \"Aadorf/Tänikon\" \"Aadorf/Tänikon\" \"Aadorf/Tänikon\" ... #>   ..$ Länge             : chr [1:265] \"8°54'\" \"8°54'\" \"8°54'\" \"8°54'\" ... #>   ..$ Breite            : chr [1:265] \"47°29'\" \"47°29'\" \"47°29'\" \"47°29'\" ... #>   ..$ x                 : num [1:265] 2710517 2710517 2710517 2710517 2710517 ... #>   ..$ y                 : num [1:265] 1259824 1259824 1259824 1259824 1259824 ... #>   ..$ masl              : num [1:265] 539 539 539 539 539 539 539 539 539 539 ... #>   ..$ parameter_original: chr [1:265] \"tre200s0\" \"ure200s0\" \"prestas0\" \"prestas0\" ... #>   ..$ source            : chr [1:265] \"MeteoSchweiz\" \"MeteoSchweiz\" \"MeteoSchweiz\" \"MeteoSchweiz\" ... #>   ..$ unit              : chr [1:265] \"°C\" \"%\" \"hPa\" \"hPa\" ... #>   ..$ Beschreibung      : chr [1:265] \"Lufttemperatur\" \"Relative\" \"Luftdruck\" \"Luftdruck\" ... #>   ..$ timezone_original : chr [1:265] \"UTC\" \"UTC\" \"UTC\" \"UTC\" ... #>   ..$ site_long         : logi [1:265] NA NA NA NA NA NA ... #>   ..$ interval          : chr [1:265] \"min10\" \"min10\" \"min10\" \"min10\" ... #>   ..$ parameter         : chr [1:265] \"T\" \"Hr\" \"p\" \"p\" ... meta_apply(data, meta, data_src, data_dest, meta_key, meta_val)  data$data_dest = meta[meta$meta_key == data$data_src]$meta_val meteoschweiz <- readRDS(fs::path(examples_path, \"meta_smn.rds\")) data <- read_smn(fs::path(examples_path, \"smn.txt\"), na.rm = FALSE) data <- dplyr::arrange(data, .data$starttime, .data$parameter) data #> # A tibble: 60 x 6 #>    starttime           site  parameter interval unit  value #>    <dttm>              <fct> <fct>     <fct>    <fct> <dbl> #>  1 2018-01-01 00:50:00 CHU   dkl010z0  min10    NA    216   #>  2 2018-01-01 00:50:00 CHU   fkl010z0  min10    NA      1.7 #>  3 2018-01-01 00:50:00 CHU   fkl010z1  min10    NA      3   #>  4 2018-01-01 00:50:00 CHU   gre000z0  min10    NA      5   #>  5 2018-01-01 00:50:00 CHU   hto000s0  min10    NA     NA   #>  6 2018-01-01 00:50:00 CHU   prestas0  min10    NA    946.  #>  7 2018-01-01 00:50:00 CHU   rre150z0  min10    NA      0   #>  8 2018-01-01 00:50:00 CHU   sre000z0  min10    NA      0   #>  9 2018-01-01 00:50:00 CHU   tre200s0  min10    NA      2.3 #> 10 2018-01-01 00:50:00 CHU   ure200s0  min10    NA     82.7 #> # ... with 50 more rows  tryCatch({   meta_apply(data, meteoschweiz, \"parameter\", \"unit\", \"parameter_original\", \"unit\") }, error = function(e) {   sprintf(e$message) }) #> [1] \"apply meta data$unit = meta[meta$parameter_original == data$parameter]$unit:\\n  missing keys in meta$parameter_original: rre150z0\" df <- meta_apply(data, meteoschweiz, \"parameter\", \"unit\", \"parameter_original\", \"unit\", mode = \"drop\") #> Warning in meta_apply(data, meteoschweiz, \"parameter\", \"unit\", \"parameter_original\", : apply meta data$unit = meta[meta$parameter_original == data$parameter]$unit: #>   missing keys in meta$parameter_original: rre150z0 #>   dropping missing prameters df #> # A tibble: 54 x 6 #>    starttime           site  parameter interval unit  value #>    <dttm>              <fct> <fct>     <fct>    <fct> <dbl> #>  1 2018-01-01 00:50:00 CHU   dkl010z0  min10    °     216    #>  2 2018-01-01 00:50:00 CHU   fkl010z0  min10    m/s     1.7 #>  3 2018-01-01 00:50:00 CHU   fkl010z1  min10    m/s     3   #>  4 2018-01-01 00:50:00 CHU   gre000z0  min10    W/m2    5   #>  5 2018-01-01 00:50:00 CHU   hto000s0  min10    cm     NA   #>  6 2018-01-01 00:50:00 CHU   prestas0  min10    hPa   946.  #>  7 2018-01-01 00:50:00 CHU   sre000z0  min10    min     0   #>  8 2018-01-01 00:50:00 CHU   tre200s0  min10    °C      2.33 #>  9 2018-01-01 00:50:00 CHU   ure200s0  min10    %      82.7 #> 10 2018-01-01 01:00:00 CHU   dkl010z0  min10    °     209    #> # ... with 44 more rows df <- meta_apply(data, meteoschweiz, \"parameter\", \"unit\", \"parameter_original\", \"unit\", mode = \"keep\") #> Warning in meta_apply(data, meteoschweiz, \"parameter\", \"unit\", \"parameter_original\", : apply meta data$unit = meta[meta$parameter_original == data$parameter]$unit: #>   missing keys in meta$parameter_original: rre150z0 #>   keeping values: NA df #> # A tibble: 60 x 6 #>    starttime           site  parameter interval unit  value #>    <dttm>              <fct> <fct>     <fct>    <fct> <dbl> #>  1 2018-01-01 00:50:00 CHU   dkl010z0  min10    °     216    #>  2 2018-01-01 00:50:00 CHU   fkl010z0  min10    m/s     1.7 #>  3 2018-01-01 00:50:00 CHU   fkl010z1  min10    m/s     3   #>  4 2018-01-01 00:50:00 CHU   gre000z0  min10    W/m2    5   #>  5 2018-01-01 00:50:00 CHU   hto000s0  min10    cm     NA   #>  6 2018-01-01 00:50:00 CHU   prestas0  min10    hPa   946.  #>  7 2018-01-01 00:50:00 CHU   rre150z0  min10    NA      0   #>  8 2018-01-01 00:50:00 CHU   sre000z0  min10    min     0   #>  9 2018-01-01 00:50:00 CHU   tre200s0  min10    °C      2.33 #> 10 2018-01-01 00:50:00 CHU   ure200s0  min10    %      82.7 #> # ... with 50 more rows df <- meta_apply(data, meteoschweiz, \"parameter\", \"unit\", \"parameter_original\", \"unit\",                  mode = \"replace\", replacements = list(rre150z0 = \"mm\", dkl010z0 = \"deg\")) #> apply meta data$unit = meta[meta$parameter_original == data$parameter]$unit: #>   missing keys in meta$parameter_original: rre150z0 #>   replacements used: dkl010z0, rre150z0 df #> # A tibble: 60 x 6 #>    starttime           site  parameter interval unit  value #>    <dttm>              <fct> <fct>     <fct>    <fct> <dbl> #>  1 2018-01-01 00:50:00 CHU   dkl010z0  min10    deg   216   #>  2 2018-01-01 00:50:00 CHU   fkl010z0  min10    m/s     1.7 #>  3 2018-01-01 00:50:00 CHU   fkl010z1  min10    m/s     3   #>  4 2018-01-01 00:50:00 CHU   gre000z0  min10    W/m2    5   #>  5 2018-01-01 00:50:00 CHU   hto000s0  min10    cm     NA   #>  6 2018-01-01 00:50:00 CHU   prestas0  min10    hPa   946.  #>  7 2018-01-01 00:50:00 CHU   rre150z0  min10    mm      0   #>  8 2018-01-01 00:50:00 CHU   sre000z0  min10    min     0   #>  9 2018-01-01 00:50:00 CHU   tre200s0  min10    °C      2.33 #> 10 2018-01-01 00:50:00 CHU   ure200s0  min10    %      82.7 #> # ... with 50 more rows df <- meta_apply(data, meteoschweiz, \"parameter\", \"unit\", \"parameter_original\", \"unit\",                  mode = \"replace\", replacements = list(rre150z0 = \"mm\", dkl010z0 = \"deg\")) #> apply meta data$unit = meta[meta$parameter_original == data$parameter]$unit: #>   missing keys in meta$parameter_original: rre150z0 #>   replacements used: dkl010z0, rre150z0  df <- meta_apply(df, meteoschweiz, \"parameter\", \"parameter\", \"parameter_original\", \"parameter\",                  mode = \"replace\", replacements = list(rre150z0 = \"Niederschlag\")) #> apply meta data$parameter = meta[meta$parameter_original == data$parameter]$parameter: #>   missing keys in meta$parameter_original: rre150z0 #>   replacements used: rre150z0  df <- meta_apply(df, meteoschweiz, \"site\", \"site\", \"site_short\", \"site\")  df #> # A tibble: 60 x 6 #>    starttime           site  parameter    interval unit  value #>    <dttm>              <fct> <fct>        <fct>    <fct> <dbl> #>  1 2018-01-01 00:50:00 Chur  WD           min10    deg   216   #>  2 2018-01-01 00:50:00 Chur  WVs          min10    m/s     1.7 #>  3 2018-01-01 00:50:00 Chur  WVs_max      min10    m/s     3   #>  4 2018-01-01 00:50:00 Chur  StrGlo       min10    W/m2    5   #>  5 2018-01-01 00:50:00 Chur  SnowDep      min10    cm     NA   #>  6 2018-01-01 00:50:00 Chur  p            min10    hPa   946.  #>  7 2018-01-01 00:50:00 Chur  Niederschlag min10    mm      0   #>  8 2018-01-01 00:50:00 Chur  SunDur       min10    min     0   #>  9 2018-01-01 00:50:00 Chur  T            min10    °C      2.33 #> 10 2018-01-01 00:50:00 Chur  Hr           min10    %      82.7 #> # ... with 50 more rows"},{"path":"https://ostluft.github.io/rOstluft/articles/tutorial.html","id":"openair-kompatibles-wide-format","dir":"Articles","previous_headings":"","what":"openair kompatibles Wide Format","title":"[GER] Tutorial","text":"Das Long Format ist nicht für jede Analyse geeignet. Aus diesem Grund enthält rOstluft die Funktionalität Daten im rolf Format ein openair kompatibles Wide Format umzuwandeln. Ein Nachteil Wide Format ist, dass Informationen die zu einer Spalte gehören, wie die Einheit einer Messgrösse, verloren gehen. Dies führt auch dazu, das man nicht die gleiche Messgrösse mit unterschiedlichen Einheiten den Daten haben kann. Ausser man nennt die Messgrösse um. Die Funktion rolf_to_openair() geht folgende Kompromisse ein: Die Einheiten werden entfernt, aber im Attribute “units” des Datenframes gespeichert. Messgrössen mit der Einheit ppb oder ppm werden ebenfalls entfernt (Dieser Automatismus lässt sich mit dem Argument keep_ppb abschalten). Openair nimmt , dass alle Messgrössen als Massenkonzentrationen vorliegen. Weitere Konventionen openair sind das die Zeitinformation der Spalte “date” als Date oder POSIXct vorliegen, die Windgeschwindigkeit der Spalte “ws” und die Windrichtung der Spalte “wd”. Sämtliche Character und Factor Spalten dienen als Gruppierungsspalten. Diese werden von openair ignoriert oder gar entfernt, wenn nicht das Argument type benützt wird. Dieses erlaubt die explizite Nutzung einer Spalte als Gruppierungskriterium. Es können mehrere Gruppierungskriterien getrennt durch ein Komma definiert werden. Die openair Funktion openair::cutData() übernimmt die Gruppierung. Diese Daten können nun direkt openair verwendet werden:   openair_to_rolf() konventiert Daten zurück ins rolf Format. Der Nutzer muss die fehlenden Informationen bereitstellen: rolf_to_openair_single() bietet die Möglichkeit einen bestimmten Parameter rauszupicken: Die weitere Optionen für die Funktion rolf_to_openair() sind der Dokumentation zu finden.","code":"data <- read_airmo_csv(fs::path(examples_path, \"Zch_Stampfenbachstrasse_2010-2014.csv\")) wide <- rolf_to_openair(data) tibble::glimpse(wide) #> Rows: 87,626 #> Columns: 16 #> $ date    <dttm> 2010-01-01 00:00:00, 2010-01-01 00:30:00, 2010-01-01 01:00:00~ #> $ site    <fct> Zch_Stampfenbachstrasse, Zch_Stampfenbachstrasse, Zch_Stampfen~ #> $ CO      <dbl> 0.513, 0.609, 0.822, 1.063, 0.861, 0.760, 0.633, 0.666, 0.780,~ #> $ NO      <dbl> 9.50, 26.85, 59.95, 85.55, 72.04, 49.74, 26.50, 36.18, 60.38, ~ #> $ NO2     <dbl> 37.0, 46.5, 54.6, 60.5, 58.8, 52.9, 49.0, 50.9, 56.3, 48.8, 47~ #> $ NOx     <dbl> 26.9, 45.8, 76.6, 100.2, 88.5, 67.5, 46.9, 55.6, 77.8, 72.6, 5~ #> $ O3      <dbl> 11.812, 7.989, 2.111, 1.410, 2.517, 2.416, 3.606, 1.617, 2.600~ #> $ PM10    <dbl> 49.7, 82.3, 152.9, 169.2, 190.1, 158.9, 93.0, 54.9, 58.7, 81.7~ #> $ SO2     <dbl> 2.36, 3.13, 4.19, 4.60, 3.97, 2.71, 2.29, 2.46, 2.86, 3.36, 4.~ #> $ Hr      <dbl> 87.9, 88.6, 91.1, 91.8, 92.0, 92.4, 92.8, 92.0, 90.4, 91.5, 92~ #> $ p       <dbl> 942, 942, 942, 942, 942, 942, 941, 941, 941, 941, 940, 940, 94~ #> $ RainDur <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,~ #> $ StrGlo  <dbl> 7.49e-03, 7.27e-03, 1.02e-02, 7.81e-03, 1.22e-02, 1.57e-02, 1.~ #> $ T       <dbl> 5.61, 5.57, 5.35, 5.39, 5.11, 4.81, 4.58, 4.80, 5.38, 5.12, 4.~ #> $ wd      <dbl> 159.57, 147.91, 258.24, 2.90, 27.75, 35.41, 40.24, 164.05, 182~ #> $ ws      <dbl> 0.904, 0.314, 0.630, 0.625, 1.905, 2.281, 2.245, 0.846, 0.361,~ openair::windRose(wide) openair::pollutionRose(wide, \"NO2\", type=\"year\") openair_to_rolf(wide, interval = \"min30\", units = attr(wide, \"units\")) #> # A tibble: 1,226,764 x 6 #>    starttime           site                    parameter interval unit  value #>    <dttm>              <fct>                   <fct>     <fct>    <fct> <dbl> #>  1 2010-01-01 00:00:00 Zch_Stampfenbachstrasse CO        min30    mg/m3 0.513 #>  2 2010-01-01 00:30:00 Zch_Stampfenbachstrasse CO        min30    mg/m3 0.609 #>  3 2010-01-01 01:00:00 Zch_Stampfenbachstrasse CO        min30    mg/m3 0.822 #>  4 2010-01-01 01:30:00 Zch_Stampfenbachstrasse CO        min30    mg/m3 1.06  #>  5 2010-01-01 02:00:00 Zch_Stampfenbachstrasse CO        min30    mg/m3 0.861 #>  6 2010-01-01 02:30:00 Zch_Stampfenbachstrasse CO        min30    mg/m3 0.760 #>  7 2010-01-01 03:00:00 Zch_Stampfenbachstrasse CO        min30    mg/m3 0.633 #>  8 2010-01-01 03:30:00 Zch_Stampfenbachstrasse CO        min30    mg/m3 0.666 #>  9 2010-01-01 04:00:00 Zch_Stampfenbachstrasse CO        min30    mg/m3 0.780 #> 10 2010-01-01 04:30:00 Zch_Stampfenbachstrasse CO        min30    mg/m3 0.654 #> # ... with 1,226,754 more rows rolf_to_openair_single(data, \"NO2\", unit = \"µg/m3\"\", keep_interval==TRUE)) #> # A tibble: 86,883 x 5 #>    date                site                    interval unit    NO2 #>    <dttm>              <fct>                   <fct>    <fct> <dbl> #>  1 2010-01-01 00:00:00 Zch_Stampfenbachstrasse min30    µg/m3  37.00 #>  2 2010-01-01 00:30:00 Zch_Stampfenbachstrasse min30    µg/m3  46.55 #>  3 2010-01-01 01:00:00 Zch_Stampfenbachstrasse min30    µg/m3  54.66 #>  4 2010-01-01 01:30:00 Zch_Stampfenbachstrasse min30    µg/m3  60.55 #>  5 2010-01-01 02:00:00 Zch_Stampfenbachstrasse min30    µg/m3  58.88 #>  6 2010-01-01 02:30:00 Zch_Stampfenbachstrasse min30    µg/m3  52.99 #>  7 2010-01-01 03:00:00 Zch_Stampfenbachstrasse min30    µg/m3  49.00 #>  8 2010-01-01 03:30:00 Zch_Stampfenbachstrasse min30    µg/m3  50.99 #>  9 2010-01-01 04:00:00 Zch_Stampfenbachstrasse min30    µg/m3  56.33 #> 10 2010-01-01 04:30:00 Zch_Stampfenbachstrasse min30    µg/m3  48.88 #> # ... with 86,873 more rows"},{"path":"https://ostluft.github.io/rOstluft/articles/tutorial.html","id":"berechnung-von-statistiken","dir":"Articles","previous_headings":"","what":"Berechnung von Statistiken","title":"[GER] Tutorial","text":"Statistiken und die Verdichtung von Daten ist ein grundlegender Bestandteil einer Datenanalyse. rOstluft gibt es die Funktion resample() zur Berechnung von Statistiken von einem Interval zu einem anderen. Die Funktion calculate_statstable() erlaubt die Definition von Berechnungen über mehrere verschiedene Intervale, ist aber weniger flexibel.","code":""},{"path":"https://ostluft.github.io/rOstluft/articles/tutorial.html","id":"resample","dir":"Articles","previous_headings":"","what":"resample","title":"[GER] Tutorial","text":"resample() aggregiert die Daten folgenden Schritten: pad_serie(): Auffüllen von Lücken mit NA (kann übersprungen werden) Gruppiere Serie mit neuem Interval mit Hilfe von lubridate::floor_date() Berechne definierte Statistiken für den Parameter kombiniere die neu berechneten Serien resample() verfügt über die Funktionalität Datenverfügbarkeit und Lücken mit den Argumenten data_thresh und max_gap zu berücksichtigen:","code":"data <- read_airmo_csv(fs::path(examples_path, \"Zch_Stampfenbachstrasse_min30_2013_Jan.csv\"))  # Behalte nur Massenkonzentrationen data <- dplyr::filter(data, !(.data$unit == \"ppb\" | .data$unit == \"ppm\"))  statistics <- list(   \"default_statistic\" = \"drop\",   \"O3\" = list(\"mean\", \"perc95\", \"n\", \"min\", \"max\"),   \"RainDur\" = \"sum\",   \"WD\" = \"wind.direction\",   \"WVs\" = \"wind.speed_scalar\",   \"WVv\" = \"wind.speed_vector\" )  # Monatsmittelwerte resample(data, statistics, \"m1\") #> # A tibble: 9 x 6 #>   starttime           site                    parameter   interval unit    value #>   <dttm>              <fct>                   <fct>       <fct>    <fct>   <dbl> #> 1 2013-01-01 00:00:00 Zch_Stampfenbachstrasse O3          m1       µg/m3 2.12e+11 #> 2 2013-01-01 00:00:00 Zch_Stampfenbachstrasse O3_95%_min~ m1       µg/m3 6.44e+11 #> 3 2013-01-01 00:00:00 Zch_Stampfenbachstrasse O3_nb_min30 m1       1     1.49e+3 #> 4 2013-01-01 00:00:00 Zch_Stampfenbachstrasse O3_min_min~ m1       µg/m3 1.04e+00 #> 5 2013-01-01 00:00:00 Zch_Stampfenbachstrasse O3_max_min~ m1       µg/m3 7.67e+11 #> 6 2013-01-01 00:00:00 Zch_Stampfenbachstrasse RainDur     m1       min   6.26e+3 #> 7 2013-01-01 00:00:00 Zch_Stampfenbachstrasse WVs         m1       m/s   1.69e+0 #> 8 2013-01-01 00:00:00 Zch_Stampfenbachstrasse WVv         m1       m/s   4.57e-1 #> 9 2013-01-01 00:00:00 Zch_Stampfenbachstrasse WD          m1       °     2.58e+22  # Tagesmittelwerte resample(data, statistics, \"d1\") %>%   dplyr::arrange(.data$starttime) #> # A tibble: 279 x 6 #>    starttime           site                    parameter   interval unit   value #>    <dttm>              <fct>                   <fct>       <fct>    <fct>  <dbl> #>  1 2013-01-01 00:00:00 Zch_Stampfenbachstrasse O3          d1       µg/m3  42.9   #>  2 2013-01-01 00:00:00 Zch_Stampfenbachstrasse O3_95%_min~ d1       µg/m3  70.3   #>  3 2013-01-01 00:00:00 Zch_Stampfenbachstrasse O3_nb_min30 d1       1      48    #>  4 2013-01-01 00:00:00 Zch_Stampfenbachstrasse O3_min_min~ d1       µg/m3   2.588 #>  5 2013-01-01 00:00:00 Zch_Stampfenbachstrasse O3_max_min~ d1       µg/m3  74.1   #>  6 2013-01-01 00:00:00 Zch_Stampfenbachstrasse RainDur     d1       min   495.   #>  7 2013-01-01 00:00:00 Zch_Stampfenbachstrasse WVs         d1       m/s     2.22 #>  8 2013-01-01 00:00:00 Zch_Stampfenbachstrasse WVv         d1       m/s     1.98 #>  9 2013-01-01 00:00:00 Zch_Stampfenbachstrasse WD          d1       °     227.    #> 10 2013-01-02 00:00:00 Zch_Stampfenbachstrasse O3          d1       µg/m3  36.0   #> # ... with 269 more rows # Jahresmittelwerte nur mit Daten vom Januar resample(data, statistics, \"y1\") #> # A tibble: 9 x 6 #>   starttime           site                    parameter   interval unit    value #>   <dttm>              <fct>                   <fct>       <fct>    <fct>   <dbl> #> 1 2013-01-01 00:00:00 Zch_Stampfenbachstrasse O3          y1       µg/m3 2.12e+11 #> 2 2013-01-01 00:00:00 Zch_Stampfenbachstrasse O3_95%_min~ y1       µg/m3 6.44e+11 #> 3 2013-01-01 00:00:00 Zch_Stampfenbachstrasse O3_nb_min30 y1       1     1.49e+3 #> 4 2013-01-01 00:00:00 Zch_Stampfenbachstrasse O3_min_min~ y1       µg/m3 1.04e+00 #> 5 2013-01-01 00:00:00 Zch_Stampfenbachstrasse O3_max_min~ y1       µg/m3 7.67e+11 #> 6 2013-01-01 00:00:00 Zch_Stampfenbachstrasse RainDur     y1       min   6.26e+3 #> 7 2013-01-01 00:00:00 Zch_Stampfenbachstrasse WVs         y1       m/s   1.69e+0 #> 8 2013-01-01 00:00:00 Zch_Stampfenbachstrasse WVv         y1       m/s   4.57e-1 #> 9 2013-01-01 00:00:00 Zch_Stampfenbachstrasse WD          y1       °     2.58e+22  # Jahresmittelwerte 80% Datenverfügbarkeit => all NAA resample(data, statistics, \"y1\", data_thresh = 0.8) #> # A tibble: 9 x 6 #>   starttime           site                    parameter    interval unit  value #>   <dttm>              <fct>                   <fct>        <fct>    <fct> <dbl> #> 1 2013-01-01 00:00:00 Zch_Stampfenbachstrasse O3           y1       µg/m3    NAm #> 2 2013-01-01 00:00:00 Zch_Stampfenbachstrasse O3_95%_min30 y1       µg/m3    NAm #> 3 2013-01-01 00:00:00 Zch_Stampfenbachstrasse O3_nb_min30  y1       1        NA #> 4 2013-01-01 00:00:00 Zch_Stampfenbachstrasse O3_min_min30 y1       µg/m3    NAm #> 5 2013-01-01 00:00:00 Zch_Stampfenbachstrasse O3_max_min30 y1       µg/m3    NAm #> 6 2013-01-01 00:00:00 Zch_Stampfenbachstrasse RainDur      y1       min      NA #> 7 2013-01-01 00:00:00 Zch_Stampfenbachstrasse WVs          y1       m/s      NA #> 8 2013-01-01 00:00:00 Zch_Stampfenbachstrasse WVv          y1       m/s      NA #> 9 2013-01-01 00:00:00 Zch_Stampfenbachstrasse WD           y1       °        NAm  # Jahresmittelwerte 10 Tage Lücke = 48' 30min Werte => all NAA resample(data, statistics, \"y1\", max_gap = 480) #> # A tibble: 9 x 6 #>   starttime           site                    parameter    interval unit  value #>   <dttm>              <fct>                   <fct>        <fct>    <fct> <dbl> #> 1 2013-01-01 00:00:00 Zch_Stampfenbachstrasse O3           y1       µg/m3    NAm #> 2 2013-01-01 00:00:00 Zch_Stampfenbachstrasse O3_95%_min30 y1       µg/m3    NAm #> 3 2013-01-01 00:00:00 Zch_Stampfenbachstrasse O3_nb_min30  y1       1        NA #> 4 2013-01-01 00:00:00 Zch_Stampfenbachstrasse O3_min_min30 y1       µg/m3    NAm #> 5 2013-01-01 00:00:00 Zch_Stampfenbachstrasse O3_max_min30 y1       µg/m3    NAm #> 6 2013-01-01 00:00:00 Zch_Stampfenbachstrasse RainDur      y1       min      NA #> 7 2013-01-01 00:00:00 Zch_Stampfenbachstrasse WVs          y1       m/s      NA #> 8 2013-01-01 00:00:00 Zch_Stampfenbachstrasse WVv          y1       m/s      NA #> 9 2013-01-01 00:00:00 Zch_Stampfenbachstrasse WD           y1       °        NAm"},{"path":"https://ostluft.github.io/rOstluft/articles/tutorial.html","id":"default_statistic","dir":"Articles","previous_headings":"resample","what":"default_statistic","title":"[GER] Tutorial","text":"der Liste werden für jeden Parameter die Statistiken definiert, welche angewendet werden sollen. Der Listeneintrag default_statistic wird auf alle nicht eingetragenen Parameter angewendet. Die Statistik drop schliesst einen Parameter aus den Resultaten aus. Dies erlaubt die schnelle Berechnung von Statistiken für ein paar wenige Parametern. Gleichzeitig ist es auch möglich die gleichen Statistiken auf viele Parameter anzuwenden und ein paar wenige Ausnahmen zu definieren:","code":"statistics <- list(   \"default_statistic\" = \"mean\",   \"RainDur\" = \"sum\",   \"StrGlo\" = \"max\",   \"WD\" = \"drop\",   \"WVv\" = \"drop\" )  resample(data, statistics, \"m1\") #> # A tibble: 11 x 6 #>    starttime           site                    parameter  interval unit    value #>    <dttm>              <fct>                   <fct>      <fct>    <fct>   <dbl> #>  1 2013-01-01 00:00:00 Zch_Stampfenbachstrasse CO         m1       mg/m3 4.36e-1 #>  2 2013-01-01 00:00:00 Zch_Stampfenbachstrasse Hr         m1       %Hr   7.97e+1 #>  3 2013-01-01 00:00:00 Zch_Stampfenbachstrasse NO         m1       µg/m3 2.41e+11 #>  4 2013-01-01 00:00:00 Zch_Stampfenbachstrasse NO2        m1       µg/m3 4.04e+11 #>  5 2013-01-01 00:00:00 Zch_Stampfenbachstrasse O3         m1       µg/m3 2.12e+11 #>  6 2013-01-01 00:00:00 Zch_Stampfenbachstrasse p          m1       hPa   9.64e+2 #>  7 2013-01-01 00:00:00 Zch_Stampfenbachstrasse PM10       m1       µg/m3 2.63e+11 #>  8 2013-01-01 00:00:00 Zch_Stampfenbachstrasse RainDur    m1       min   6.26e+3 #>  9 2013-01-01 00:00:00 Zch_Stampfenbachstrasse SO2        m1       µg/m3 2.54e+00 #> 10 2013-01-01 00:00:00 Zch_Stampfenbachstrasse StrGlo_ma~ m1       W/m2  5.12e+2 #> 11 2013-01-01 00:00:00 Zch_Stampfenbachstrasse T          m1       °C    2.12e+00"},{"path":"https://ostluft.github.io/rOstluft/articles/tutorial.html","id":"automatismen-und-einschränkungen","dir":"Articles","previous_headings":"resample","what":"Automatismen und Einschränkungen","title":"[GER] Tutorial","text":"Die Funktion benennt für die meisten Statistiken den Parameter gemäss dem AIRMO Schema3 um. Die Statistiken mean, median, sum, sd, percentile benennen den Paremeter nicht um und sind somit nicht kombinierbar. Das Auffüllen der Lücken kann mittels des Argument skip_padding übersprungen werden. Zusätzlich kann mittels start_date, end_date und drop_last das Füllen kontrolliert werden. Normalerweise nimmt die Funktion das letzte Datum und füllt bis zum letzten neuen Intervall auf. Werden zum Beispiel Tagesmittelwerte berechnet und es sind nur Daten bis zum 22. Dezember 2017 10:00 Uhr vorhanden, wird der letzte Wert der Serie 2017-12-22 00:00 sein. Wird eine komplette Jahresreihe benötigt, kann entweder das end_date auf 2017-12-31 oder auf 2018-01-01 und drop_last auf TRUE gesetzt werden.","code":""},{"path":"https://ostluft.github.io/rOstluft/articles/tutorial.html","id":"windmittelung","dir":"Articles","previous_headings":"resample","what":"Windmittelung","title":"[GER] Tutorial","text":"Ein weiterer Spezialfall sind die Windberechnungen. Für die vektorielle Mittelung müssen die Paremeter zusammengefasst werden. Es müssen für alle drei Statistiken (wind.direction, wind.speed_vector, wind.speed_scalar) die Parameter definiert werden. Ist nur eine der Geschwindigkeiten vorhanden, wird die andere auf Basis der Vorhandenen berechnet. Zusätzlich ist die Windmittelung nicht kombinierbar mit anderen Statistiken.","code":""},{"path":"https://ostluft.github.io/rOstluft/articles/tutorial.html","id":"statstable","dir":"Articles","previous_headings":"","what":"Statstable","title":"[GER] Tutorial","text":"Werden viele verschiedene und mehrstufige Statistiken benötigt ist die Berechnung mit resample() umständlich. Die Funktion calculate_statstable() hingegen bietet diese Funktionalität, hat aber folgende Einschränkungen: Datenreihen werden immer auf komplette Jahre aufgefüllt max_gap wird nur auf Berechnungen zu Jahresintervallen berücksichtigt und Tagen definiert data_thresh ist für alle Berechnungen identisch. Intervall h8gl erwartet Intervall h1 als Basis Die Verwendung von default_statistic und _input_ führt schnell zu unerwarteten Ergebnissen Zur Analyse von Luftqualität sind diese Einschränkungen kein Problem, bzw. sogar erwünscht. Die Funktion calculate_statstable() erwartet wie der Name schon vermuten lässt die Defintion der Statistiken einer Tabellenform. Die Tabelle hat die vier Spalten “parameter”, “statistic”, “”, “”. Jede Zeile enthält eine zu berechnende Statistik für einen Parameter vom Basis Interval (“”) zum neuen Interval (“”). Die Tabelle wird dann gruppiert zuerst mit “”, dann mit “” und zuletzt mit Parameter. Auf diese Weise wird eine Liste generiert die mit resample() kompatibel ist. Ist keine default_statistic definiert wird automatisch default_statistic = \"drop\" zur Liste hinzugefügt. welcher Reihenfolge die verschiedenen “” Intervalle berechnet werden, kann optional mit Hilfe des Argument order definiert werden. Der Default Wert ist c(\"input\", \"h1\", \"h8gl\", \"d1\", \"m1\", \"y1\"). Um die Tabelle einer kompakten Form zu erstellen kann jeder Zelle mehrere Werte getrennt durch “,” zusammengefasst werden. Hier die Tabelle zur Berechnung der LRV Grenzwerte aus 30min Werten (entspricht 6 Aufrufe von resample()): Wird diese Tabelle verwendet resultiert eine Liste mit h1, m1 und y1 Einträgen, welche die berechneten Grössen enthält: Nur die m1 und y1 sind für die LRV relevant:","code":"lrv_table <- tibble::tribble(   ~parameter, ~statistic, ~from, ~to,   \"SO2, NO2, PM10\", \"mean\", \"input\", \"y1\",   \"SO2, NO2\", \"perc95\", \"input\", \"y1\",   \"O3\", \"perc98\", \"input\", \"m1\",   \"O3\", \"mean\", \"input\", \"h1\",   \"O3\", \"n>120\", \"h1\", \"y1\",   \"SO2, NO2, CO, PM10\", \"mean\", \"input\", \"d1\",   \"SO2\", \"n>100\", \"d1\", \"y1\",   \"NO2\", \"n>80\", \"d1\", \"y1\",   \"CO\", \"n>8\", \"d1\", \"y1\",   \"PM10\", \"n>50\", \"d1\", \"y1\" ) knitr::kable(lrv_table) data <- read_airmo_csv(fs::path(examples_path, \"Zch_Stampfenbachstrasse_min30_2017.csv\"))  # Berechne Massenkonzentrationen aus Volumenkonzentrationen data <- calculate_mass_concentrations(data)  stats <- calculate_statstable(data, lrv_table) stats #> $y1 #> # A tibble: 10 x 6 #>    starttime           site                    parameter    interval unit  value #>    <dttm>              <fct>                   <fct>        <fct>    <fct> <dbl> #>  1 2017-01-01 00:00:00 Zch_Stampfenbachstrasse NO2          y1       µg/m3 30.4   #>  2 2017-01-01 00:00:00 Zch_Stampfenbachstrasse NO2_95%_min~ y1       µg/m3 68.8   #>  3 2017-01-01 00:00:00 Zch_Stampfenbachstrasse PM10         y1       µg/m3 15.9   #>  4 2017-01-01 00:00:00 Zch_Stampfenbachstrasse SO2          y1       µg/m3  1.055 #>  5 2017-01-01 00:00:00 Zch_Stampfenbachstrasse SO2_95%_min~ y1       µg/m3  2.177 #>  6 2017-01-01 00:00:00 Zch_Stampfenbachstrasse O3_nb_h1>120 y1       1     81    #>  7 2017-01-01 00:00:00 Zch_Stampfenbachstrasse CO_nb_d1>8   y1       1      0    #>  8 2017-01-01 00:00:00 Zch_Stampfenbachstrasse NO2_nb_d1>80 y1       1      1    #>  9 2017-01-01 00:00:00 Zch_Stampfenbachstrasse PM10_nb_d1>~ y1       1      8    #> 10 2017-01-01 00:00:00 Zch_Stampfenbachstrasse SO2_nb_d1>1~ y1       1      0    #>  #> $m1 #> # A tibble: 12 x 6 #>    starttime           site                    parameter    interval unit  value #>    <dttm>              <fct>                   <fct>        <fct>    <fct> <dbl> #>  1 2017-01-01 00:00:00 Zch_Stampfenbachstrasse O3_98%_min30 m1       µg/m3  62.55 #>  2 2017-02-01 00:00:00 Zch_Stampfenbachstrasse O3_98%_min30 m1       µg/m3  79.33 #>  3 2017-03-01 00:00:00 Zch_Stampfenbachstrasse O3_98%_min30 m1       µg/m3  94.44 #>  4 2017-04-01 00:00:00 Zch_Stampfenbachstrasse O3_98%_min30 m1       µg/m3 105.   #>  5 2017-05-01 00:00:00 Zch_Stampfenbachstrasse O3_98%_min30 m1       µg/m3 128.   #>  6 2017-06-01 00:00:00 Zch_Stampfenbachstrasse O3_98%_min30 m1       µg/m3 134.   #>  7 2017-07-01 00:00:00 Zch_Stampfenbachstrasse O3_98%_min30 m1       µg/m3 113.   #>  8 2017-08-01 00:00:00 Zch_Stampfenbachstrasse O3_98%_min30 m1       µg/m3 109.   #>  9 2017-09-01 00:00:00 Zch_Stampfenbachstrasse O3_98%_min30 m1       µg/m3  82.66 #> 10 2017-10-01 00:00:00 Zch_Stampfenbachstrasse O3_98%_min30 m1       µg/m3  74.99 #> 11 2017-11-01 00:00:00 Zch_Stampfenbachstrasse O3_98%_min30 m1       µg/m3  67.66 #> 12 2017-12-01 00:00:00 Zch_Stampfenbachstrasse O3_98%_min30 m1       µg/m3  71.88 #>  #> $h1 #> # A tibble: 8,760 x 6 #>    starttime           site                    parameter interval unit  value #>    <dttm>              <fct>                   <fct>     <fct>    <fct> <dbl> #>  1 2017-01-01 00:00:00 Zch_Stampfenbachstrasse O3        h1       µg/m3  1.455 #>  2 2017-01-01 01:00:00 Zch_Stampfenbachstrasse O3        h1       µg/m3  1.355 #>  3 2017-01-01 02:00:00 Zch_Stampfenbachstrasse O3        h1       µg/m3  1.022 #>  4 2017-01-01 03:00:00 Zch_Stampfenbachstrasse O3        h1       µg/m3  1.544 #>  5 2017-01-01 04:00:00 Zch_Stampfenbachstrasse O3        h1       µg/m3  2.411 #>  6 2017-01-01 05:00:00 Zch_Stampfenbachstrasse O3        h1       µg/m3  2.144 #>  7 2017-01-01 06:00:00 Zch_Stampfenbachstrasse O3        h1       µg/m3  2.411 #>  8 2017-01-01 07:00:00 Zch_Stampfenbachstrasse O3        h1       µg/m3  2.677 #>  9 2017-01-01 08:00:00 Zch_Stampfenbachstrasse O3        h1       µg/m3  3.744 #> 10 2017-01-01 09:00:00 Zch_Stampfenbachstrasse O3        h1       µg/m3  6.522 #> # ... with 8,750 more rows #>  #> $d1 #> # A tibble: 1,460 x 6 #>    starttime           site                    parameter interval unit  value #>    <dttm>              <fct>                   <fct>     <fct>    <fct> <dbl> #>  1 2017-01-01 00:00:00 Zch_Stampfenbachstrasse CO        d1       mg/m3 0.381 #>  2 2017-01-02 00:00:00 Zch_Stampfenbachstrasse CO        d1       mg/m3 0.339 #>  3 2017-01-03 00:00:00 Zch_Stampfenbachstrasse CO        d1       mg/m3 0.349 #>  4 2017-01-04 00:00:00 Zch_Stampfenbachstrasse CO        d1       mg/m3 0.248 #>  5 2017-01-05 00:00:00 Zch_Stampfenbachstrasse CO        d1       mg/m3 0.278 #>  6 2017-01-06 00:00:00 Zch_Stampfenbachstrasse CO        d1       mg/m3 0.282 #>  7 2017-01-07 00:00:00 Zch_Stampfenbachstrasse CO        d1       mg/m3 0.378 #>  8 2017-01-08 00:00:00 Zch_Stampfenbachstrasse CO        d1       mg/m3 0.349 #>  9 2017-01-09 00:00:00 Zch_Stampfenbachstrasse CO        d1       mg/m3 0.388 #> 10 2017-01-10 00:00:00 Zch_Stampfenbachstrasse CO        d1       mg/m3 0.314 #> # ... with 1,450 more rows lrv <- dplyr::bind_rows(stats$y1, stats$m1)"},{"path":"https://ostluft.github.io/rOstluft/articles/tutorial.html","id":"inputs_","dir":"Articles","previous_headings":"","what":"_inputs_","title":"[GER] Tutorial","text":"Der Parameter _inputs_ ist ein Hilfskonstrukt wie default_statistic. Ein Problem bei mehrstufigen Berechnungen ist, dass unter Umständen bereits Resultate im Input für weitere Berechnungen enthalten sind. folgenden Bespiel wird zuerst aus den 30min Werten d1 Mittelwerte, Anzahl Datenpunkte, min und max berechnet für d1, m1 und y1. Danach sollte das Tagesmaximum für das Jahr bestimmt werden: Wird für die Berechnung des maximalen Tagesmittelwert des Jahres _inputs_ statt default_statistic verwendet, werden nur die Statistiken für Parameter berechnet die den Input Daten enthalten sind. Im Allgemeinen dürfte die explizite Definition der Statistiken für jeden Parameter gegenüber der Verwendung von default_statistic und _inputs_ vorzuziehen. Ansonsten kann das Resultat unerwartete Ergebnisse enthalten. Die Definition der statstable kann auch einer Textdatei oder Exceldatei erfolgen und dann eingelesen werden, statt im Code definiert werden. dieser Stelle noch die Berechnungen aller Statistiken im aqmet Store. Aus 21 Input Grössen werden 419 Statistiken berechnet:","code":"# Ein Parameter reicht für die Veranschaulichungg O3 <- dplyr::filter(data, .data$parameter == \"O3\")  statstable <- tibble::tribble(   ~parameter, ~statistic, ~from, ~to,   \"default_statistic\", \"mean, n, min, max\", \"input\", \"d1, m1, y1\",   \"default_statistic\", \"max\", \"d1\", \"y1\" )  # Keine Berücksichtung der Datenverfügbarkeitit stats <- calculate_statstable(O3, statstable, data_thresh = 0, max_gap = NULL) stats$y1 #> # A tibble: 8 x 6 #>   starttime           site                    parameter   interval unit    value #>   <dttm>              <fct>                   <fct>       <fct>    <fct>   <dbl> #> 1 2017-01-01 00:00:00 Zch_Stampfenbachstrasse O3          y1       µg/m3 4.53e+11 #> 2 2017-01-01 00:00:00 Zch_Stampfenbachstrasse O3_nb_min30 y1       1     1.75e+4 #> 3 2017-01-01 00:00:00 Zch_Stampfenbachstrasse O3_min_min~ y1       µg/m3 2.44e-1m #> 4 2017-01-01 00:00:00 Zch_Stampfenbachstrasse O3_max_min~ y1       µg/m3 1.54e+22 #> 5 2017-01-01 00:00:00 Zch_Stampfenbachstrasse O3_max_d1   y1       µg/m3 1.16e+22 #> 6 2017-01-01 00:00:00 Zch_Stampfenbachstrasse O3_nb_min3~ y1       1     4.8 e+1 #> 7 2017-01-01 00:00:00 Zch_Stampfenbachstrasse O3_min_min~ y1       µg/m3 9.00e+11 #> 8 2017-01-01 00:00:00 Zch_Stampfenbachstrasse O3_max_min~ y1       µg/m3 1.54e+22 statstable <- tibble::tribble(   ~parameter, ~statistic, ~from, ~to,   \"default_statistic\", \"mean, n, min, max\", \"input\", \"d1, m1, y1\",   \"_inputs_\", \"max\", \"d1\", \"y1\" )  # Keine Berücksichtung der Datenverfügbarkeitit stats <- calculate_statstable(O3, statstable, data_thresh = 0, max_gap = NULL) stats$y1 #> # A tibble: 5 x 6 #>   starttime           site                    parameter   interval unit    value #>   <dttm>              <fct>                   <fct>       <fct>    <fct>   <dbl> #> 1 2017-01-01 00:00:00 Zch_Stampfenbachstrasse O3          y1       µg/m3 4.53e+11 #> 2 2017-01-01 00:00:00 Zch_Stampfenbachstrasse O3_nb_min30 y1       1     1.75e+4 #> 3 2017-01-01 00:00:00 Zch_Stampfenbachstrasse O3_min_min~ y1       µg/m3 2.44e-1m #> 4 2017-01-01 00:00:00 Zch_Stampfenbachstrasse O3_max_min~ y1       µg/m3 1.54e+22 #> 5 2017-01-01 00:00:00 Zch_Stampfenbachstrasse O3_max_d1   y1       µg/m3 1.16e+22"},{"path":"https://ostluft.github.io/rOstluft/articles/tutorial.html","id":"umwandlung-von-volumen--und-massenkonzentrationen","dir":"Articles","previous_headings":"","what":"Umwandlung von Volumen- und Massenkonzentrationen","title":"[GER] Tutorial","text":"Die Umwandlung der Konzentrationen erfolgt äquivalent zu den Berechnungen der AIRMO. Sollen andere Konstanten verwendet werden, ist die Dokumentation von convert_set_R() zu konsultieren. Die Funktionen convert_conc() und convert_conc_multiple() verfügen beide über Varianten wie die umgewandelten Daten zurückgegeben werden. Definiert wird dies mit dem Argument method. Bei “return” werden nur die umgewandelten Daten zurückgegeben, bei “append” werden sie Ende angehängt und zuletzt bei “replace” werden die ursprünglichen Daten ersetzt. Die Funktion calculate_mass_concentrations() ist eine Hilfsfunktion, die aus Volumenkonzentrationen für CO, , NO2, NO2, SO2 einem tibble automatisch die Massenkonzentrationen berechnet. Mit dem Argument keep_ppb können optional die Volumenkonzentration behalten werden. Das Default vorgehen ist die Volumenkonzentrationen zu ersetzen.","code":"data <- read_airmo_csv(fs::path(examples_path, \"Zch_Stampfenbachstrasse_min30_2013_Jan.csv\"))  # Behalte nur Volumenkonzentrationen data <- dplyr::filter(data, .data$unit == \"ppb\" | .data$unit == \"ppm\")  convert_conc(data, \"NO\", \"ppb\", \"µg/m3\"\", method==\"return\")) #> # A tibble: 1,484 x 6 #>    starttime           site                    parameter interval unit  value #>    <dttm>              <fct>                   <fct>     <fct>    <fct> <dbl> #>  1 2013-01-01 00:00:00 Zch_Stampfenbachstrasse NO        min30    µg/m3  79.33 #>  2 2013-01-01 00:30:00 Zch_Stampfenbachstrasse NO        min30    µg/m3  81.88 #>  3 2013-01-01 01:00:00 Zch_Stampfenbachstrasse NO        min30    µg/m3  75.66 #>  4 2013-01-01 01:30:00 Zch_Stampfenbachstrasse NO        min30    µg/m3  81.22 #>  5 2013-01-01 02:00:00 Zch_Stampfenbachstrasse NO        min30    µg/m3 101.   #>  6 2013-01-01 02:30:00 Zch_Stampfenbachstrasse NO        min30    µg/m3  61.44 #>  7 2013-01-01 03:00:00 Zch_Stampfenbachstrasse NO        min30    µg/m3  63.66 #>  8 2013-01-01 03:30:00 Zch_Stampfenbachstrasse NO        min30    µg/m3  61.00 #>  9 2013-01-01 04:00:00 Zch_Stampfenbachstrasse NO        min30    µg/m3  63.66 #> 10 2013-01-01 04:30:00 Zch_Stampfenbachstrasse NO        min30    µg/m3  70.77 #> # ... with 1,474 more rows  conversions <- tibble::tribble(   ~parameter, ~from, ~to,   \"CO\", \"ppm\", \"mg/m3\",   \"NO\", \"ppb\", \"µg/m3\"\",   \"O3\", \"ppb\", \"µg/m3\"\",   \"NO2\", \"ppb\", \"µg/m3\"\",   \"SO2\", \"ppb\", \"µg/m3\"\" ) convert_conc_multiple(data, conversions, method = \"return\") %>%   dplyr::arrange(.data$starttime) #> # A tibble: 7,424 x 6 #>    starttime           site                    parameter interval unit   value #>    <dttm>              <fct>                   <fct>     <fct>    <fct>  <dbl> #>  1 2013-01-01 00:00:00 Zch_Stampfenbachstrasse CO        min30    mg/m3  0.782 #>  2 2013-01-01 00:00:00 Zch_Stampfenbachstrasse NO        min30    µg/m3 79.3    #>  3 2013-01-01 00:00:00 Zch_Stampfenbachstrasse O3        min30    µg/m3  3.48   #>  4 2013-01-01 00:00:00 Zch_Stampfenbachstrasse NO2       min30    µg/m3 63.0    #>  5 2013-01-01 00:00:00 Zch_Stampfenbachstrasse SO2       min30    µg/m3 11.7    #>  6 2013-01-01 00:30:00 Zch_Stampfenbachstrasse CO        min30    mg/m3  0.828 #>  7 2013-01-01 00:30:00 Zch_Stampfenbachstrasse NO        min30    µg/m3 81.8    #>  8 2013-01-01 00:30:00 Zch_Stampfenbachstrasse O3        min30    µg/m3  3.40   #>  9 2013-01-01 00:30:00 Zch_Stampfenbachstrasse NO2       min30    µg/m3 64.7    #> 10 2013-01-01 00:30:00 Zch_Stampfenbachstrasse SO2       min30    µg/m3 12.2    #> # ... with 7,414 more rows  convert_conc_multiple(data, conversions, method = \"append\") %>%   dplyr::arrange(.data$starttime) #> # A tibble: 16,332 x 6 #>    starttime           site                    parameter interval unit   value #>    <dttm>              <fct>                   <fct>     <fct>    <fct>  <dbl> #>  1 2013-01-01 00:00:00 Zch_Stampfenbachstrasse CO        min30    ppm    0.672 #>  2 2013-01-01 00:00:00 Zch_Stampfenbachstrasse NO        min30    ppb   63.6   #>  3 2013-01-01 00:00:00 Zch_Stampfenbachstrasse NO2       min30    ppb   33.0   #>  4 2013-01-01 00:00:00 Zch_Stampfenbachstrasse NOx       min30    ppb   96.5   #>  5 2013-01-01 00:00:00 Zch_Stampfenbachstrasse O3        min30    ppb    1.75  #>  6 2013-01-01 00:00:00 Zch_Stampfenbachstrasse SO2       min30    ppb    4.41  #>  7 2013-01-01 00:00:00 Zch_Stampfenbachstrasse CO        min30    mg/m3  0.782 #>  8 2013-01-01 00:00:00 Zch_Stampfenbachstrasse NO        min30    µg/m3 79.3    #>  9 2013-01-01 00:00:00 Zch_Stampfenbachstrasse O3        min30    µg/m3  3.48   #> 10 2013-01-01 00:00:00 Zch_Stampfenbachstrasse NO2       min30    µg/m3 63.0    #> # ... with 16,322 more rows  convert_conc_multiple(data, conversions, method = \"replace\") %>%   dplyr::arrange(.data$starttime) #> # A tibble: 8,908 x 6 #>    starttime           site                    parameter interval unit   value #>    <dttm>              <fct>                   <fct>     <fct>    <fct>  <dbl> #>  1 2013-01-01 00:00:00 Zch_Stampfenbachstrasse NOx       min30    ppb   96.5   #>  2 2013-01-01 00:00:00 Zch_Stampfenbachstrasse CO        min30    mg/m3  0.782 #>  3 2013-01-01 00:00:00 Zch_Stampfenbachstrasse NO        min30    µg/m3 79.3    #>  4 2013-01-01 00:00:00 Zch_Stampfenbachstrasse O3        min30    µg/m3  3.48   #>  5 2013-01-01 00:00:00 Zch_Stampfenbachstrasse NO2       min30    µg/m3 63.0    #>  6 2013-01-01 00:00:00 Zch_Stampfenbachstrasse SO2       min30    µg/m3 11.7    #>  7 2013-01-01 00:30:00 Zch_Stampfenbachstrasse NOx       min30    ppb   99.4   #>  8 2013-01-01 00:30:00 Zch_Stampfenbachstrasse CO        min30    mg/m3  0.828 #>  9 2013-01-01 00:30:00 Zch_Stampfenbachstrasse NO        min30    µg/m3 81.8    #> 10 2013-01-01 00:30:00 Zch_Stampfenbachstrasse O3        min30    µg/m3  3.40   #> # ... with 8,898 more rows"},{"path":"https://ostluft.github.io/rOstluft/articles/tutorial.html","id":"pluck","dir":"Articles","previous_headings":"","what":"Pluck","title":"[GER] Tutorial","text":"Die Pluck Funktionen sind Wrapper um dplyr::filter(). Sie ermöglichen dem Nutzer eine komfortable Filterung von Daten im rolf Format. Als Beispiel nehmen wir die Daten aus dem mehrfach Meteoschweiz Export, dieser enthaltet eine Vielzahl von verschiedenen Stationen, Intervalle und Parameter:","code":"fn <- system.file(\"extdata\", \"smn_multi.txt\", package = \"rOstluft.data\") data <- read_smn_multiple(fn) %>%    dplyr::arrange(starttime)  pluck_parameter(data, \"ta1towb0\") #> # A tibble: 6 x 6 #>   starttime           site  parameter interval unit  value #>   <dttm>              <fct> <fct>     <fct>    <fct> <dbl> #> 1 2010-01-01 00:00:00 UEB   ta1towb0  h1       NA      3.7 #> 2 2010-01-01 01:00:00 UEB   ta1towb0  h1       NA      3.5 #> 3 2010-01-01 02:00:00 UEB   ta1towb0  h1       NA      3.2 #> 4 2010-01-01 03:00:00 UEB   ta1towb0  h1       NA      3.1 #> 5 2010-01-01 04:00:00 UEB   ta1towb0  h1       NA      3.3 #> 6 2010-01-01 05:00:00 UEB   ta1towb0  h1       NA      3.3  # entpackt automatisch Vectors pluck_site(data, c(\"KLO\", \"UEB\")) %>% dplyr::slice(41:46) #> # A tibble: 6 x 6 #>   starttime           site  parameter interval unit  value #>   <dttm>              <fct> <fct>     <fct>    <fct> <dbl> #> 1 2010-01-01 05:00:00 UEB   fk1towb0  h1       NA      1.9 #> 2 2010-01-01 05:00:00 UEB   ta1towb0  h1       NA      3.3 #> 3 2018-01-01 00:00:00 UEB   uretowhs  h1       NA     85.1 #> 4 2018-01-01 00:50:00 KLO   dkl010z0  min10    NA    224   #> 5 2018-01-01 00:50:00 KLO   fkl010z0  min10    NA      5.7 #> 6 2018-01-01 00:50:00 KLO   fkl010z1  min10    NA      9.6  # supported splicing mit den rlang operator !!! intervals = c(\"h1\", \"d1\") pluck_interval(data, !!!intervals) %>% dplyr::slice(40:45) #> # A tibble: 6 x 6 #>   starttime           site  parameter interval unit  value #>   <dttm>              <fct> <fct>     <fct>    <fct> <dbl> #> 1 2010-01-01 05:00:00 UEB   dk1towb0  h1       NA    129   #> 2 2010-01-01 05:00:00 UEB   fk1towb0  h1       NA      1.9 #> 3 2010-01-01 05:00:00 UEB   ta1towb0  h1       NA      3.3 #> 4 2017-12-31 01:00:00 RHW   wkcap1d0  d1       NA      2   #> 5 2017-12-31 01:00:00 RHW   wkcap2d0  d1       NA     11   #> 6 2017-12-31 01:00:00 RHW   wkcap3d0  d1       NA     21  # pluck_year mit einer sequence pluck_year(data, 2010:2018) %>% dplyr::slice(51:56) #> # A tibble: 6 x 6 #>   starttime           site  parameter interval unit  value #>   <dttm>              <fct> <fct>     <fct>    <fct> <dbl> #> 1 2017-12-31 01:00:00 RHW   wkwtp1d0  d1       NA      1   #> 2 2017-12-31 01:00:00 RHW   wkwtp2d0  d1       NA      9   #> 3 2017-12-31 01:00:00 RHW   wkwtp3d0  d1       NA      9   #> 4 2018-01-01 00:00:00 UEB   uretowhs  h1       NA     85.1 #> 5 2018-01-01 00:50:00 ARH   dkl010z0  min10    NA    168   #> 6 2018-01-01 00:50:00 ARH   fkl010z0  min10    NA      1.1  # NA Werte werden gefiltert pluck_unit(data, \"hPa\") #> # A tibble: 6 x 6 #>   starttime           site  parameter interval unit  value #>   <dttm>              <fct> <fct>     <fct>    <fct> <dbl> #> 1 2019-01-31 00:50:00 TAE   prestas0  min10    hPa    936. #> 2 2019-01-31 01:00:00 TAE   prestas0  min10    hPa    936  #> 3 2019-01-31 01:10:00 TAE   prestas0  min10    hPa    936. #> 4 2019-01-31 01:20:00 TAE   prestas0  min10    hPa    936. #> 5 2019-01-31 01:30:00 TAE   prestas0  min10    hPa    936. #> 6 2019-01-31 01:40:00 TAE   prestas0  min10    hPa    936.  # Verkettbar mittels pipes data %>%   pluck_site(\"KLO\", \"UEB\") %>%   pluck_parameter(\"gre000z0\") %>%   pluck_year(2010:2018) %>%    dplyr::slice(1:6) #> # A tibble: 6 x 6 #>   starttime           site  parameter interval unit  value #>   <dttm>              <fct> <fct>     <fct>    <fct> <dbl> #> 1 2018-01-01 00:50:00 KLO   gre000z0  min10    NA        1 #> 2 2018-01-01 00:50:00 UEB   gre000z0  min10    NA        3 #> 3 2018-01-01 01:00:00 KLO   gre000z0  min10    NA        1 #> 4 2018-01-01 01:00:00 UEB   gre000z0  min10    NA        3 #> 5 2018-01-01 01:10:00 KLO   gre000z0  min10    NA        1 #> 6 2018-01-01 01:10:00 UEB   gre000z0  min10    NA        2"},{"path":"https://ostluft.github.io/rOstluft/articles/tutorial.html","id":"koordinatentransformationen","dir":"Articles","previous_headings":"","what":"Koordinatentransformationen","title":"[GER] Tutorial","text":"Für die Darstellung von Elementen mit Koordinaten im Bezugsystem LV95 oder LV03 auf Karten ist es oft notwendig diese nach WSG84 zu transformieren. Die Funktionen rOstluft::transform_LV95_to_WSG84() und rOstluft::transform_WSG84_to_LV95() sind Wrapper um die allgemeine Funktion rOstluft::transform_crs().","code":"meteoschweiz <- readRDS(fs::path(examples_path, \"meta_smn.rds\")) meteoschweiz <- dplyr::distinct(meteoschweiz, site, x, y)  transform_LV95_to_WSG84(meteoschweiz) %>% head #> Warning in showSRID(SRS_string, format = \"PROJ\", multiline = \"NO\", prefer_proj = #> prefer_proj): Discarded datum CH1903+ in Proj4 definition #> # A tibble: 6 x 5 #>   site                 x       y   lon   lat #>   <chr>            <dbl>   <dbl> <dbl> <dbl> #> 1 Aadorf/Tänikon 2710517 1259824  8.90  47.55 #> 2 Altenrhein     2760382 1261386  9.57  47.5 #> 3 BadRagaz       2756910 1209350  9.50  47.0 #> 4 Chur           2759465 1193152  9.53  46.9 #> 5 Ebnat-Kappel   2726347 1237176  9.11  47.3 #> 6 Glarus         2723755 1210567  9.07  47.0  transform_crs(meteoschweiz, c(lon = \"x\", lat = \"y\"),           sp::CRS(\"+init=epsg:2056\"), sp::CRS(\"+init=epsg:4326\"),           append = FALSE) %>% head #> Warning in showSRID(uprojargs, format = \"PROJ\", multiline = \"NO\", prefer_proj = #> prefer_proj): Discarded datum CH1903+ in Proj4 definition #> # A tibble: 6 x 3 #>   site             lon   lat #>   <chr>          <dbl> <dbl> #> 1 Aadorf/Tänikon  8.90  47.55 #> 2 Altenrhein      9.57  47.5 #> 3 BadRagaz        9.50  47.0 #> 4 Chur            9.53  46.9 #> 5 Ebnat-Kappel    9.11  47.3 #> 6 Glarus          9.07  47.0"},{"path":"https://ostluft.github.io/rOstluft/articles/tutorial.html","id":"noaa-hysplit-trajektorien","dir":"Articles","previous_headings":"","what":"NOAA Hysplit Trajektorien","title":"[GER] Tutorial","text":"Neben dem Ostluft AWS Store aqmet existiert noch ein Store mit hysplit Trajektorien von 1980 bis zum jeweiligen Vormonat des aktuellen Datums für die Standorte Zürich Kaserne und St. Gallen Blumenbergplatz. Die Trajektorien sind jeweils für 01:00 und 13:00 UTC+1 (=Luftmassen Herkunft) gerechnet. Beim Format hysplit wird für die Abfrage nur die site und das year benötigt:","code":"hysplit_store <- storage_s3_rds(\"hysplit_tutorial\", format_hysplit(), \"rostluft\", \"hysplit\") #> store hysplit_tutorial initialized under 'C:\\Users\\tom\\AppData\\Local/rOstluft/hysplit_tutorial'  # nutze den vordefinierten store (name ist optional, default ist \"hysplit\") hysplit_store <- store_hysplit(\"hysplit_tutorial\")  # hole die Trakektorien für Zürich Kaserne von 2018 traj <- hysplit_store$get(site = \"ZH_Kaserne_hysplit\", year = 2018)  # plotte die Daten mit openair openair::trajPlot(openair::selectByDate(traj, start = \"2018-01-01\", end = \"2018-01-05\"))"},{"path":"https://ostluft.github.io/rOstluft/articles/tutorial.html","id":"lokale-daten-löschen","dir":"Articles","previous_headings":"","what":"Lokale Daten löschen","title":"[GER] Tutorial","text":"Werden die Daten lokal nicht mehr benötigt, kann mit der Funktion $destroy() des Store Objektes die Daten gelöscht werden. Zu beachten ist, dass der AWS S3 Store als read initialisiert wurde. Um ihn löschen zu können muss dies geändert werden. Um ein versehentliches löschen durch Autocomplete zu verhindern, muss der String “DELETE” als Argument übergeben werden","code":"store$read.only = FALSE store$destroy(\"DELETE\") #> Cache for Store tutorial destroyed  my_store$destroy(\"DELETE\") #> Store eigene_daten destroyed  hysplit_store$read.only = FALSE hysplit_store$destroy(\"DELETE\") #> Cache for Store hysplit_tutorial destroyed"},{"path":"https://ostluft.github.io/rOstluft/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Thomas von Allmen. Author, maintainer. Jörg Sintermann. Author. Ostluft. Copyright holder.","code":""},{"path":"https://ostluft.github.io/rOstluft/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"von Allmen T, Sintermann J (2022). rOstluft: Tools handling air quality data Ostluft. R package version 1.4.5, https://github.com/Ostluft/rOstluft.","code":"@Manual{,   title = {rOstluft: Tools for handling air quality data by Ostluft},   author = {Thomas {von Allmen} and Jörg Sintermann},   year = {2022},   note = {R package version 1.4.5},   url = {https://github.com/Ostluft/rOstluft}, }"},{"path":"https://ostluft.github.io/rOstluft/index.html","id":"rostluft","dir":"","previous_headings":"","what":"Tools for handling air quality data by Ostluft","title":"Tools for handling air quality data by Ostluft","text":"Eine Einleitung mit und wieso.","code":""},{"path":"https://ostluft.github.io/rOstluft/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Tools for handling air quality data by Ostluft","text":"Der Quellcode von rOstluft ist auf github gehosted. Die einfachste Variante ist die Installation mit Hilfe des Packages devtools: Zusätzlich muss das Package aws.s3 manuell aus dem cloudyr Repositorium installiert werden, weil die CRANR Version veraltet ist: Ist dies wegen Einschränkungen durch Firewalls oder Proxies nicht möglich. Muss der Quellcode manuell von github heruntergeladen werden (Clone download > Download ZIP), entpackt und manuell installiert werden. Allerdings bestehen Abhängigkeiten zu Packages die auf CRAN bereitgestellt werden. Können auch keine CRAN Packages installiert werden, müssen zuerst alle CRAN Abhängkigkeiten und deren Abhängigkeiten installiert werden. Zusätzlich besteht noch die Github Abhängkigkeit zu rOstluft.data. Dieses Packages muss auf die gleiche Weise zuerst installiert werden mit folgenden Schritten: Falls das installieren von rOstluft scheitert, fehlt vermutlich eine Abhängigkeit. Welche das ist, kann der Fehlermeldung entnommen werden. Nach der Installation kann das Packages verwendet werden:","code":"#install.packages(\"devtools\") devtools::install_github(\"Ostluft/rOstluft\") install.packages(\"aws.s3\", repos = c(\"cloudyr\" = \"http://cloudyr.github.io/drat\")) download.file(\"https://github.com/Ostluft/rOstluft/archive/master.zip\", \"rOstluft-master.zip\") download.file(\"https://github.com/Ostluft/rOstluft.data/archive/master.zip\", \"rOstluft.data-master.zip\")  install.packages(\"devtools\") install.packages(\"aws.s3\", repos = c(\"cloudyr\" = \"http://cloudyr.github.io/drat\"))  deps <- c('dplyr', 'tidyr', 'lubridate', 'R6', 'rappdirs', 'tibble', 'base64url', 'forcats',           'fs', 'purrr', 'readr', 'stringr', 'stringi', 'sp', 'rgdal', 'rlang', 'magrittr')  for (p in deps) {   install.packages(p) }  devtools::install_local(\"rOstluft.data-master.zip\", dependencies = FALSE) devtools::install_local(\"rOstluft-master.zip\", dependencies = FALSE) library(rOstluft)"},{"path":"https://ostluft.github.io/rOstluft/index.html","id":"einrichten-entwicklungsumgebung","dir":"","previous_headings":"","what":"Einrichten Entwicklungsumgebung","title":"Tools for handling air quality data by Ostluft","text":"Den Quellcode mit git auschecken: Alternativ kann das Projekt über den New Project Wizard im RStudio initialisiert werden: File > New Project… > Version Control > Git > Repository URL = https://github.com/Ostluft/rOstluft.git Als nächstes installiert man die R Abhängigkeiten mit Hilfe der Konsole im Rstudio (wenn das Projekt geöffnet ist):","code":"git clone https://github.com/Ostluft/rOstluft.git #install.packages(\"devtools\") devtools::install_dev_deps()"},{"path":"https://ostluft.github.io/rOstluft/index.html","id":"demo","dir":"","previous_headings":"","what":"Demo","title":"Tools for handling air quality data by Ostluft","text":"Eine ausführliche Einführung ist im Tutorial zu finden.","code":""},{"path":"https://ostluft.github.io/rOstluft/index.html","id":"plots","dir":"","previous_headings":"","what":"Plots","title":"Tools for handling air quality data by Ostluft","text":"Ein Package mit standartisierten Plots ist Entwicklung als Package rOstluft.plot","code":""},{"path":"https://ostluft.github.io/rOstluft/reference/airmo_wide_to_long.html","id":null,"dir":"Reference","previous_headings":"","what":"Converts the wide format from the files to the long format — airmo_wide_to_long","title":"Converts the wide format from the files to the long format — airmo_wide_to_long","text":"Converts wide format files long format","code":""},{"path":"https://ostluft.github.io/rOstluft/reference/airmo_wide_to_long.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Converts the wide format from the files to the long format — airmo_wide_to_long","text":"","code":"airmo_wide_to_long(   header,   data,   tz = \"Etc/GMT-1\",   time_shift = NULL,   na.rm = TRUE )"},{"path":"https://ostluft.github.io/rOstluft/reference/airmo_wide_to_long.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Converts the wide format from the files to the long format — airmo_wide_to_long","text":"header data frame containing airmo_kurzname, parameter, zeitfenster einheit data data frame containing data file tz time zone date field. carefull Etc/GMT + == -. Default \"Etc/GMT-1\" time_shift lubridate period add time. Default NULL na.rm remove na (empty) values. Default TRUE","code":""},{"path":"https://ostluft.github.io/rOstluft/reference/airmo_wide_to_long.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Converts the wide format from the files to the long format — airmo_wide_to_long","text":"data frame rOstluft long format","code":""},{"path":[]},{"path":"https://ostluft.github.io/rOstluft/reference/append_default.html","id":null,"dir":"Reference","previous_headings":"","what":"Appends default_statistic drop if necessary — append_default","title":"Appends default_statistic drop if necessary — append_default","text":"Appends default_statistic drop necessary","code":""},{"path":"https://ostluft.github.io/rOstluft/reference/append_default.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Appends default_statistic drop if necessary — append_default","text":"","code":"append_default(x)"},{"path":"https://ostluft.github.io/rOstluft/reference/append_default.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Appends default_statistic drop if necessary — append_default","text":"x statistic list","code":""},{"path":"https://ostluft.github.io/rOstluft/reference/append_default.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Appends default_statistic drop if necessary — append_default","text":"statistic list containing default_statistic","code":""},{"path":"https://ostluft.github.io/rOstluft/reference/apply_convert_conc.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function to reduce a list of conversions parameters — apply_convert_conc","title":"Helper function to reduce a list of conversions parameters — apply_convert_conc","text":"Helper function reduce list conversions parameters","code":""},{"path":"https://ostluft.github.io/rOstluft/reference/apply_convert_conc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function to reduce a list of conversions parameters — apply_convert_conc","text":"","code":"apply_convert_conc(data, args, ...)"},{"path":"https://ostluft.github.io/rOstluft/reference/apply_convert_conc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper function to reduce a list of conversions parameters — apply_convert_conc","text":"data convert units args arguments conversion. named list parameter, , named item ... additional arguments pass convert_units","code":""},{"path":"https://ostluft.github.io/rOstluft/reference/apply_convert_conc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper function to reduce a list of conversions parameters — apply_convert_conc","text":"result convert_units","code":""},{"path":"https://ostluft.github.io/rOstluft/reference/bind_rows_with_factor_columns.html","id":null,"dir":"Reference","previous_headings":"","what":"bind rows of data frames with factors — bind_rows_with_factor_columns","title":"bind rows of data frames with factors — bind_rows_with_factor_columns","text":"dplyr 1.0.0 dplyr::bind_rows() coerced factors different levels characters. longer case function deprecated Important: mandatory data frames structure","code":""},{"path":"https://ostluft.github.io/rOstluft/reference/bind_rows_with_factor_columns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"bind rows of data frames with factors — bind_rows_with_factor_columns","text":"","code":"bind_rows_with_factor_columns(...)"},{"path":"https://ostluft.github.io/rOstluft/reference/bind_rows_with_factor_columns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"bind rows of data frames with factors — bind_rows_with_factor_columns","text":"... data frames combine","code":""},{"path":"https://ostluft.github.io/rOstluft/reference/bind_rows_with_factor_columns.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"bind rows of data frames with factors — bind_rows_with_factor_columns","text":"combined data frame","code":""},{"path":"https://ostluft.github.io/rOstluft/reference/calculate_mass_concentrations.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepares data for stats calculations — calculate_mass_concentrations","title":"Prepares data for stats calculations — calculate_mass_concentrations","text":"indicators calculated mass concentrations. functions converts volume concentrations mass concentration exception NOx. argument keep_ppb allows keep volume concentrations","code":""},{"path":"https://ostluft.github.io/rOstluft/reference/calculate_mass_concentrations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepares data for stats calculations — calculate_mass_concentrations","text":"","code":"calculate_mass_concentrations(data, keep_ppb = FALSE)"},{"path":"https://ostluft.github.io/rOstluft/reference/calculate_mass_concentrations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepares data for stats calculations — calculate_mass_concentrations","text":"data input data rolf format keep_ppb usually volume concentrations used analyses dropped exception NOx. FALSE drops parameters ppb/ppm units except NOx. Default FALSE","code":""},{"path":"https://ostluft.github.io/rOstluft/reference/calculate_mass_concentrations.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepares data for stats calculations — calculate_mass_concentrations","text":"tibble rolf format containing mass concentrations","code":""},{"path":"https://ostluft.github.io/rOstluft/reference/calculate_O3_summer.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculates AOT40 and 7h mean from 9:00 - 16:00 CET from April until September — calculate_O3_summer","title":"Calculates AOT40 and 7h mean from 9:00 - 16:00 CET from April until September — calculate_O3_summer","text":"Calculates AOT40 7h mean 9:00 - 16:00 CET April September","code":""},{"path":"https://ostluft.github.io/rOstluft/reference/calculate_O3_summer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculates AOT40 and 7h mean from 9:00 - 16:00 CET from April until September — calculate_O3_summer","text":"","code":"calculate_O3_summer(data, quiet = FALSE)"},{"path":"https://ostluft.github.io/rOstluft/reference/calculate_O3_summer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculates AOT40 and 7h mean from 9:00 - 16:00 CET from April until September — calculate_O3_summer","text":"data input data rolf format contain 10min 30min data O3 µg/m3 quiet Instead stopping parameter found return empty frame. Default FALSE","code":""},{"path":"https://ostluft.github.io/rOstluft/reference/calculate_O3_summer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculates AOT40 and 7h mean from 9:00 - 16:00 CET from April until September — calculate_O3_summer","text":"tibble rolf format containing AOT40 7h mean","code":""},{"path":"https://ostluft.github.io/rOstluft/reference/calculate_stats.html","id":null,"dir":"Reference","previous_headings":"","what":"calculates a lot of stats — calculate_stats","title":"calculates a lot of stats — calculate_stats","text":"calculates lot stats","code":""},{"path":"https://ostluft.github.io/rOstluft/reference/calculate_stats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"calculates a lot of stats — calculate_stats","text":"","code":"calculate_stats(data)"},{"path":"https://ostluft.github.io/rOstluft/reference/calculate_stats.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"calculates a lot of stats — calculate_stats","text":"data input data rolf format min10 min30 data","code":""},{"path":"https://ostluft.github.io/rOstluft/reference/calculate_stats.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"calculates a lot of stats — calculate_stats","text":"list h1, h8gl, d1, m1, y1 data items","code":""},{"path":"https://ostluft.github.io/rOstluft/reference/calculate_statstable.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculates stats described in a table — calculate_statstable","title":"Calculates stats described in a table — calculate_statstable","text":"Calculate lot statistics defined table various caveats: series always padded complete years data threshold calculations h8gl: mean h1 max_gap y1, definition days usage default_statistic _inputs_ can contain suprises result statistics defined table columns \"parameter\", \"statistic\", \"\" \"\". row contains one statistic one parameter basis interval (\"\") target interval (\"\"). rows grouped \"\", \"\" \"parameter\". results list statistic parameter. list compatible resample(). default_statistic defined, default_statistic = \"drop\" added. Multi-step statistics possible. _inputs_ can used substitute default_statistic multi-step calculation input \"\" already contains calculated statistics. statstable can written compact form comma seperated values cells. value table expanded row added. See statstable_expand()","code":""},{"path":"https://ostluft.github.io/rOstluft/reference/calculate_statstable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculates stats described in a table — calculate_statstable","text":"","code":"calculate_statstable(   data,   statstable,   sep = \"\\\\s*,\\\\s*\",   keep_input = FALSE,   data_thresh = 0.8,   max_gap = 10,   order = c(\"input\", \"h1\", \"h8gl\", \"d1\", \"m1\", \"y1\") )"},{"path":"https://ostluft.github.io/rOstluft/reference/calculate_statstable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculates stats described in a table — calculate_statstable","text":"data input data rolf format statstable description statistics calculate table form sep seperator combined values statstable keep_input input data kept return list item input. Default FALSE data_thresh minimum data capture threshold 0 - 1.0 use. Default 0.8 max_gap days. used calculation y1. Set NULL disable usage. Default 10 days order defines order calculation column","code":""},{"path":"https://ostluft.github.io/rOstluft/reference/calculate_statstable.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculates stats described in a table — calculate_statstable","text":"list one item every interval","code":""},{"path":"https://ostluft.github.io/rOstluft/reference/calculate_statstable.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculates stats described in a table — calculate_statstable","text":"","code":"# calculate LRV statisitcs lrv_table <- tibble::tribble(   ~parameter, ~statistic, ~from, ~to,   \"SO2, NO2, PM10\", \"mean\", \"input\", \"y1\",   \"SO2, NO2\", \"perc95\", \"input\", \"y1\",   \"O3\", \"perc98\", \"input\", \"m1\",   \"O3\", \"mean\", \"input\", \"h1\",   \"O3\", \"n>120\", \"h1\", \"y1\",   \"SO2, NO2, CO, PM10\", \"mean\", \"input\", \"d1\",   \"SO2\", \"n>100\", \"d1\", \"y1\",   \"NO2\", \"n>80\", \"d1\", \"y1\",   \"CO\", \"n>8\", \"d1\", \"y1\",   \"PM10\", \"n>50\", \"d1\", \"y1\" )  fn <- system.file(\"extdata\", \"Zch_Stampfenbachstrasse_min30_2017.csv\",                    package = \"rOstluft.data\", mustWork = TRUE)  data <- read_airmo_csv(fn)  # convert volume concentrations to mass concentrations data <- calculate_mass_concentrations(data)  stats <- calculate_statstable(data, lrv_table)  # we are only interested in the m1 and y1 results stats <- dplyr::bind_rows(stats$y1, stats$m1) stats #> # A tibble: 22 x 6 #>    starttime           site                    parameter    interval unit  value #>    <dttm>              <fct>                   <fct>        <fct>    <fct> <dbl> #>  1 2017-01-01 00:00:00 Zch_Stampfenbachstrasse NO2          y1       µg/m3 30.4  #>  2 2017-01-01 00:00:00 Zch_Stampfenbachstrasse NO2_95%_min~ y1       µg/m3 68.8  #>  3 2017-01-01 00:00:00 Zch_Stampfenbachstrasse PM10         y1       µg/m3 15.9  #>  4 2017-01-01 00:00:00 Zch_Stampfenbachstrasse SO2          y1       µg/m3  1.05 #>  5 2017-01-01 00:00:00 Zch_Stampfenbachstrasse SO2_95%_min~ y1       µg/m3  2.17 #>  6 2017-01-01 00:00:00 Zch_Stampfenbachstrasse O3_nb_h1>120 y1       1     81    #>  7 2017-01-01 00:00:00 Zch_Stampfenbachstrasse CO_nb_d1>8   y1       1      0    #>  8 2017-01-01 00:00:00 Zch_Stampfenbachstrasse NO2_nb_d1>80 y1       1      1    #>  9 2017-01-01 00:00:00 Zch_Stampfenbachstrasse PM10_nb_d1>~ y1       1      8    #> 10 2017-01-01 00:00:00 Zch_Stampfenbachstrasse SO2_nb_d1>1~ y1       1      0    #> # ... with 12 more rows"},{"path":"https://ostluft.github.io/rOstluft/reference/conversion_conc_fun_factory.html","id":null,"dir":"Reference","previous_headings":"","what":"Factory to generate conc conversion functions — conversion_conc_fun_factory","title":"Factory to generate conc conversion functions — conversion_conc_fun_factory","text":"Factory generate conc conversion functions","code":""},{"path":"https://ostluft.github.io/rOstluft/reference/conversion_conc_fun_factory.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Factory to generate conc conversion functions — conversion_conc_fun_factory","text":"","code":"conversion_conc_fun_factory(parameter, from, to, ...)"},{"path":"https://ostluft.github.io/rOstluft/reference/conversion_conc_fun_factory.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Factory to generate conc conversion functions — conversion_conc_fun_factory","text":"parameter convert start unit target unit ... addional parameters passed conversion function. see purrr::partial(), parts_to_mass(), mass_to_parts()","code":""},{"path":"https://ostluft.github.io/rOstluft/reference/conversion_conc_fun_factory.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Factory to generate conc conversion functions — conversion_conc_fun_factory","text":"conversion function one argument","code":""},{"path":"https://ostluft.github.io/rOstluft/reference/convert_conc.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert between volume and mass concentrations — convert_conc","title":"Convert between volume and mass concentrations — convert_conc","text":"function converts volume mass concentration standard conditions. constants used equivalent one used AIRMO sites 1500m .s.l: possible change constants via functions run time session. See convert_set_R(), convert_set_mol_masses(), convert_set_conc_lookup()","code":"R   = 8.314151     [kg * m2 / (s2 * mol * K)] T   = 20.00        [°C] p   = 1013.00      [hPa]  mol masses: CO  = 28.01        [g / mol] NO  = 30.01        [g / mol] NO2 = 46.01        [g / mol] O3  = 48.00        [g / mol] SO2 = 64.06        [g / mol]"},{"path":"https://ostluft.github.io/rOstluft/reference/convert_conc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert between volume and mass concentrations — convert_conc","text":"","code":"convert_conc(data, parameter, from, to, method = \"return\", ...)  convert_conc_multiple(data, conversions, method = \"return\", ...)"},{"path":"https://ostluft.github.io/rOstluft/reference/convert_conc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert between volume and mass concentrations — convert_conc","text":"data containing parameter convert parameter convert start unit target unit method one \"return\", \"append\", \"replace\". \"return\" returns converted data, \"append\" appends converted data end, \"replace\" replaces original data parameter converted ... addional parameters passed conversion function. see purrr::partial(), parts_to_mass(), mass_to_parts() conversions tibble columns paramter, , . row conversion","code":""},{"path":"https://ostluft.github.io/rOstluft/reference/convert_conc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert between volume and mass concentrations — convert_conc","text":"converted data","code":""},{"path":[]},{"path":"https://ostluft.github.io/rOstluft/reference/convert_conc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert between volume and mass concentrations — convert_conc","text":"","code":"min30 <- system.file(\"extdata\", \"Zch_Stampfenbachstrasse_min30_2013_Jan.csv\",                      package = \"rOstluft.data\", mustWork = TRUE)  airmo_min30 <- read_airmo_csv(min30) convert_conc(airmo_min30, \"NO\", \"\\u00b5g/m3\", \"ppb\", method = \"return\") #> # A tibble: 1,484 x 6 #>    starttime           site                    parameter interval unit  value #>    <dttm>              <fct>                   <fct>     <fct>    <fct> <dbl> #>  1 2013-01-01 00:00:00 Zch_Stampfenbachstrasse NO        min30    ppb    63.6 #>  2 2013-01-01 00:30:00 Zch_Stampfenbachstrasse NO        min30    ppb    65.6 #>  3 2013-01-01 01:00:00 Zch_Stampfenbachstrasse NO        min30    ppb    60.6 #>  4 2013-01-01 01:30:00 Zch_Stampfenbachstrasse NO        min30    ppb    65.1 #>  5 2013-01-01 02:00:00 Zch_Stampfenbachstrasse NO        min30    ppb    81.1 #>  6 2013-01-01 02:30:00 Zch_Stampfenbachstrasse NO        min30    ppb    49.3 #>  7 2013-01-01 03:00:00 Zch_Stampfenbachstrasse NO        min30    ppb    51.0 #>  8 2013-01-01 03:30:00 Zch_Stampfenbachstrasse NO        min30    ppb    48.9 #>  9 2013-01-01 04:00:00 Zch_Stampfenbachstrasse NO        min30    ppb    51.0 #> 10 2013-01-01 04:30:00 Zch_Stampfenbachstrasse NO        min30    ppb    56.7 #> # ... with 1,474 more rows   conversions <- tibble::tribble(   ~parameter, ~from, ~to,   \"CO\", \"ppm\", \"mg/m3\",   \"NO\", \"ppb\", \"\\u00b5g/m3\",   \"O3\", \"ppb\", \"\\u00b5g/m3\",   \"NO2\", \"ppb\", \"\\u00b5g/m3\",   \"SO2\", \"ppb\", \"\\u00b5g/m3\" )  min30 <- system.file(\"extdata\", \"Zch_Stampfenbachstrasse_min30_2013_Jan.csv\",                      package = \"rOstluft.data\", mustWork = TRUE)  airmo_min30 <- read_airmo_csv(min30) airmo_min30_parts <- dplyr::filter(airmo_min30, .data$unit == \"ppb\" | .data$unit == \"ppm\") convert_conc_multiple(airmo_min30_parts, conversions, method = \"return\") #> # A tibble: 7,424 x 6 #>    starttime           site                    parameter interval unit  value #>    <dttm>              <fct>                   <fct>     <fct>    <fct> <dbl> #>  1 2013-01-01 00:00:00 Zch_Stampfenbachstrasse CO        min30    mg/m3 0.782 #>  2 2013-01-01 00:30:00 Zch_Stampfenbachstrasse CO        min30    mg/m3 0.828 #>  3 2013-01-01 01:00:00 Zch_Stampfenbachstrasse CO        min30    mg/m3 0.771 #>  4 2013-01-01 01:30:00 Zch_Stampfenbachstrasse CO        min30    mg/m3 0.894 #>  5 2013-01-01 02:00:00 Zch_Stampfenbachstrasse CO        min30    mg/m3 0.966 #>  6 2013-01-01 02:30:00 Zch_Stampfenbachstrasse CO        min30    mg/m3 0.782 #>  7 2013-01-01 03:00:00 Zch_Stampfenbachstrasse CO        min30    mg/m3 0.774 #>  8 2013-01-01 03:30:00 Zch_Stampfenbachstrasse CO        min30    mg/m3 0.736 #>  9 2013-01-01 04:00:00 Zch_Stampfenbachstrasse CO        min30    mg/m3 0.749 #> 10 2013-01-01 04:30:00 Zch_Stampfenbachstrasse CO        min30    mg/m3 0.785 #> # ... with 7,414 more rows"},{"path":"https://ostluft.github.io/rOstluft/reference/convert_date_seepolizei.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function to ensure correct string format — convert_date_seepolizei","title":"Helper function to ensure correct string format — convert_date_seepolizei","text":"Helper function ensure correct string format","code":""},{"path":"https://ostluft.github.io/rOstluft/reference/convert_date_seepolizei.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function to ensure correct string format — convert_date_seepolizei","text":"","code":"convert_date_seepolizei(x)"},{"path":"https://ostluft.github.io/rOstluft/reference/convert_date_seepolizei.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper function to ensure correct string format — convert_date_seepolizei","text":"x date string, POSIXct, POSIXlt Date Object","code":""},{"path":"https://ostluft.github.io/rOstluft/reference/convert_date_seepolizei.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper function to ensure correct string format — convert_date_seepolizei","text":"string format \"%Y-%m-%d\"","code":""},{"path":"https://ostluft.github.io/rOstluft/reference/convert_get_R.html","id":null,"dir":"Reference","previous_headings":"","what":"Customize concentration conversion — convert_get_R","title":"Customize concentration conversion — convert_get_R","text":"Converting volume mass concentrations straightforward may think. molar gas constant natur constant. subject changes accurate measurements avaible. CODATA comittee appointed frequently publish collection natur constants. molar gas constant example: questions exact values temperature, pressure mol masses. function set allows customization used constants conversion. example showed use CODATA 2014 value molar gas constant, 1013.25 hPA pressure add Ammoniak (NH3) conversions.","code":"CODATA 1986  8.314510 CODATA 1998  8.314472 CODATA 2010  8.3144621 CODATA 2014  8.3144598"},{"path":"https://ostluft.github.io/rOstluft/reference/convert_get_R.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Customize concentration conversion — convert_get_R","text":"","code":"convert_get_R()  convert_set_R(R)  convert_get_mol_masses()  convert_set_mol_masses(mol_masses)  convert_get_conc_lookup()  convert_set_conc_lookup(lookup)"},{"path":"https://ostluft.github.io/rOstluft/reference/convert_get_R.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Customize concentration conversion — convert_get_R","text":"R new value molar gas constant mol_masses tibble one row, parameter name column mol mass bare double value lookup new lookup table. Details see section Lookup Table examples","code":"[kg * m2 / (s2 * mol * K)] [g / mol]"},{"path":"https://ostluft.github.io/rOstluft/reference/convert_get_R.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Customize concentration conversion — convert_get_R","text":"constants R, mol masses lookup table conversions","code":""},{"path":"https://ostluft.github.io/rOstluft/reference/convert_get_R.html","id":"lookup-table","dir":"Reference","previous_headings":"","what":"Lookup Table","title":"Customize concentration conversion — convert_get_R","text":"lookup table used pick correct conversion function. table tibble columns parameter, , FUN. conversion_conc_fun_factory() uses lookup table create partial function FUN. partial function gets mol mass (mol_mass) parameter ... arguments applied named arguments. allows change default values mass_to_parts() parts_to_mass().","code":""},{"path":[]},{"path":"https://ostluft.github.io/rOstluft/reference/convert_get_R.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Customize concentration conversion — convert_get_R","text":"","code":"# Update molar mas constant R to CODATA 2014 value convert_set_R(8.3144598)  # add NH3 to the existing mol masses mol_masses <- convert_get_mol_masses() mol_masses <- dplyr::bind_cols(mol_masses, \"NH3\" = 17.03) convert_set_mol_masses(mol_masses)  # to update the default pressure rebuild the lookup table # with partial functions of mass_to_parts, parts_to_mass # at the same time add mappings for NH3 mass_to_parts_partial <- purrr::partial(mass_to_parts, pressure = 1013.25) parts_to_mass_partial <- purrr::partial(parts_to_mass, pressure = 1013.25)  lookup <- tibble::tribble(   ~parameter, ~from, ~to, ~FUN,   \"CO\", \"ppm\", \"mg/m3\", parts_to_mass_partial,   \"NO\", \"ppb\", \"\\u00b5g/m3\", parts_to_mass_partial,   \"O3\", \"ppb\", \"\\u00b5g/m3\", parts_to_mass_partial,   \"NO2\", \"ppb\", \"\\u00b5g/m3\", parts_to_mass_partial,   \"SO2\", \"ppb\", \"\\u00b5g/m3\", parts_to_mass_partial,   \"CO\", \"mg/m3\", \"ppm\", mass_to_parts_partial,   \"NO\", \"\\u00b5g/m3\", \"ppb\", mass_to_parts_partial,   \"O3\", \"\\u00b5g/m3\", \"ppb\", mass_to_parts_partial,   \"NO2\", \"\\u00b5g/m3\", \"ppb\", mass_to_parts_partial,   \"SO2\", \"\\u00b5g/m3\", \"ppb\", mass_to_parts_partial,   \"NH3\", \"\\u00b5g/m3\", \"ppb\", mass_to_parts_partial,   \"NH3\", \"ppb\", \"\\u00b5g/m3\", parts_to_mass_partial, )  convert_set_conc_lookup(lookup)"},{"path":"https://ostluft.github.io/rOstluft/reference/convert_interval.html","id":null,"dir":"Reference","previous_headings":"","what":"Converts a AIRMO Zeitfenster to an interval — convert_interval","title":"Converts a AIRMO Zeitfenster to an interval — convert_interval","text":"function far perfect works non offseting, shifting Zeitfenster","code":""},{"path":"https://ostluft.github.io/rOstluft/reference/convert_interval.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Converts a AIRMO Zeitfenster to an interval — convert_interval","text":"","code":"convert_interval(interval)"},{"path":"https://ostluft.github.io/rOstluft/reference/convert_interval.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Converts a AIRMO Zeitfenster to an interval — convert_interval","text":"interval string AIRMO Zeitfenster","code":""},{"path":"https://ostluft.github.io/rOstluft/reference/convert_interval.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Converts a AIRMO Zeitfenster to an interval — convert_interval","text":"string valid string base::seq.Date() lubridate::floor_date()","code":""},{"path":"https://ostluft.github.io/rOstluft/reference/cut_conversion_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Cut data for conversion — cut_conversion_data","title":"Cut data for conversion — cut_conversion_data","text":"function splits parameter conversion","code":""},{"path":"https://ostluft.github.io/rOstluft/reference/cut_conversion_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cut data for conversion — cut_conversion_data","text":"","code":"cut_conversion_data(data, parameter, unit)"},{"path":"https://ostluft.github.io/rOstluft/reference/cut_conversion_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cut data for conversion — cut_conversion_data","text":"data tibble input data parameter parameter conversion unit unit another","code":""},{"path":"https://ostluft.github.io/rOstluft/reference/cut_conversion_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cut data for conversion — cut_conversion_data","text":"named list: $convert parameter conversion, $others everything else","code":""},{"path":"https://ostluft.github.io/rOstluft/reference/cut_conversion_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Cut data for conversion — cut_conversion_data","text":"TODO: create purpuse function?","code":""},{"path":"https://ostluft.github.io/rOstluft/reference/cut_on_condition.html","id":null,"dir":"Reference","previous_headings":"","what":"Cuts / splits data frame in list based on condition — cut_on_condition","title":"Cuts / splits data frame in list based on condition — cut_on_condition","text":"Cuts / splits data frame list based condition","code":""},{"path":"https://ostluft.github.io/rOstluft/reference/cut_on_condition.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cuts / splits data frame in list based on condition — cut_on_condition","text":"","code":"cut_on_condition(data, condition, mapping)"},{"path":"https://ostluft.github.io/rOstluft/reference/cut_on_condition.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cuts / splits data frame in list based on condition — cut_on_condition","text":"data data frame cut condition expression used grouping mapping names list","code":""},{"path":"https://ostluft.github.io/rOstluft/reference/cut_on_condition.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cuts / splits data frame in list based on condition — cut_on_condition","text":"list","code":""},{"path":"https://ostluft.github.io/rOstluft/reference/cut_on_condition.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cuts / splits data frame in list based on condition — cut_on_condition","text":"","code":"if (FALSE) { data <- cut_on_condition(data, end_interval < endtime, c(\"TRUE\" = \"overlaps\", \"FALSE\" = \"complete\")) }"},{"path":"https://ostluft.github.io/rOstluft/reference/cut_wind_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Cut wind data — cut_wind_data","title":"Cut wind data — cut_wind_data","text":"function splits wind parameters","code":""},{"path":"https://ostluft.github.io/rOstluft/reference/cut_wind_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cut wind data — cut_wind_data","text":"","code":"cut_wind_data(data, wind_parameters = c(\"WD\", \"WVv\"))"},{"path":"https://ostluft.github.io/rOstluft/reference/cut_wind_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cut wind data — cut_wind_data","text":"data tibble input data wind_parameters Character Vector Wind parameters. Default wind_parameters = c(\"WD\", \"WVv\")","code":""},{"path":"https://ostluft.github.io/rOstluft/reference/cut_wind_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cut wind data — cut_wind_data","text":"named list: $wind wind parameters, $others everything else","code":""},{"path":"https://ostluft.github.io/rOstluft/reference/cut_wind_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Cut wind data — cut_wind_data","text":"TODO: create purpuse function?","code":""},{"path":"https://ostluft.github.io/rOstluft/reference/detect_interval.html","id":null,"dir":"Reference","previous_headings":"","what":"Detects the interval of the data — detect_interval","title":"Detects the interval of the data — detect_interval","text":"Throws error multiple Intervals detected","code":""},{"path":"https://ostluft.github.io/rOstluft/reference/detect_interval.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Detects the interval of the data — detect_interval","text":"","code":"detect_interval(data)"},{"path":"https://ostluft.github.io/rOstluft/reference/detect_interval.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Detects the interval of the data — detect_interval","text":"data input data rolf format","code":""},{"path":"https://ostluft.github.io/rOstluft/reference/detect_interval.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Detects the interval of the data — detect_interval","text":"interval character string","code":""},{"path":"https://ostluft.github.io/rOstluft/reference/expand_inputs.html","id":null,"dir":"Reference","previous_headings":"","what":"Adds statistics for parameters in inputs — expand_inputs","title":"Adds statistics for parameters in inputs — expand_inputs","text":"Adds statistics parameters inputs","code":""},{"path":"https://ostluft.github.io/rOstluft/reference/expand_inputs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Adds statistics for parameters in inputs — expand_inputs","text":"","code":"expand_inputs(x, inputs)"},{"path":"https://ostluft.github.io/rOstluft/reference/expand_inputs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Adds statistics for parameters in inputs — expand_inputs","text":"x statistic list inputs parameters input","code":""},{"path":"https://ostluft.github.io/rOstluft/reference/expand_inputs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Adds statistics for parameters in inputs — expand_inputs","text":"expanded statistic list","code":""},{"path":"https://ostluft.github.io/rOstluft/reference/fill_wmean.html","id":null,"dir":"Reference","previous_headings":"","what":"Fills (upsample) a data frame for wmean — fill_wmean","title":"Fills (upsample) a data frame for wmean — fill_wmean","text":"Fills (upsample) data frame wmean","code":""},{"path":"https://ostluft.github.io/rOstluft/reference/fill_wmean.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fills (upsample) a data frame for wmean — fill_wmean","text":"","code":"fill_wmean(data, ..., interval)"},{"path":"https://ostluft.github.io/rOstluft/reference/fill_wmean.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fills (upsample) a data frame for wmean — fill_wmean","text":"data input data frame ... grouping columns interval upsampling","code":""},{"path":"https://ostluft.github.io/rOstluft/reference/fill_wmean.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fills (upsample) a data frame for wmean — fill_wmean","text":"upsampled data frame","code":""},{"path":"https://ostluft.github.io/rOstluft/reference/filter_keep_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Keep matching rows — filter_keep_list","title":"Keep matching rows — filter_keep_list","text":"keep rows matching name (=column)/value combination filter_list.","code":""},{"path":"https://ostluft.github.io/rOstluft/reference/filter_keep_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Keep matching rows — filter_keep_list","text":"","code":"filter_keep_list(data, filter_list)"},{"path":"https://ostluft.github.io/rOstluft/reference/filter_keep_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Keep matching rows — filter_keep_list","text":"data tibble filter filter_list named list, name = column match","code":""},{"path":"https://ostluft.github.io/rOstluft/reference/filter_keep_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Keep matching rows — filter_keep_list","text":"filtered tibble","code":""},{"path":"https://ostluft.github.io/rOstluft/reference/filter_remove_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove matching rows — filter_remove_list","title":"Remove matching rows — filter_remove_list","text":"Removes rows matching name (=column)/value combination filter_list.","code":""},{"path":"https://ostluft.github.io/rOstluft/reference/filter_remove_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove matching rows — filter_remove_list","text":"","code":"filter_remove_list(data, filter_list)"},{"path":"https://ostluft.github.io/rOstluft/reference/filter_remove_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove matching rows — filter_remove_list","text":"data tibble filter filter_list named list, name = column match","code":""},{"path":"https://ostluft.github.io/rOstluft/reference/filter_remove_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove matching rows — filter_remove_list","text":"filtered tibble","code":""},{"path":"https://ostluft.github.io/rOstluft/reference/format_hysplit.html","id":null,"dir":"Reference","previous_headings":"","what":"Format defintion for hysplit back trajectories — format_hysplit","title":"Format defintion for hysplit back trajectories — format_hysplit","text":"formats describes form back trajectories calculated NOAA HYSPLIT model.","code":""},{"path":"https://ostluft.github.io/rOstluft/reference/format_hysplit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format defintion for hysplit back trajectories — format_hysplit","text":"","code":"format_hysplit(tz = \"Etc/GMT\")"},{"path":"https://ostluft.github.io/rOstluft/reference/format_hysplit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format defintion for hysplit back trajectories — format_hysplit","text":"tz Unused moment","code":""},{"path":"https://ostluft.github.io/rOstluft/reference/format_hysplit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format defintion for hysplit back trajectories — format_hysplit","text":"R6 class object format_hysplit","code":""},{"path":"https://ostluft.github.io/rOstluft/reference/format_hysplit.html","id":"todo","dir":"Reference","previous_headings":"","what":"TODO","title":"Format defintion for hysplit back trajectories — format_hysplit","text":"Write Documentation ...","code":""},{"path":"https://ostluft.github.io/rOstluft/reference/format_ps.html","id":null,"dir":"Reference","previous_headings":"","what":"Format defintion for ps data with endtime instead of interval — format_ps","title":"Format defintion for ps data with endtime instead of interval — format_ps","text":"format used non periodical data","code":""},{"path":"https://ostluft.github.io/rOstluft/reference/format_ps.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format defintion for ps data with endtime instead of interval — format_ps","text":"","code":"format_ps(tz = \"Etc/GMT-1\")"},{"path":"https://ostluft.github.io/rOstluft/reference/format_ps.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format defintion for ps data with endtime instead of interval — format_ps","text":"tz time zone used chunking/content. Default Etc/GMT-1","code":""},{"path":"https://ostluft.github.io/rOstluft/reference/format_ps.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format defintion for ps data with endtime instead of interval — format_ps","text":"R6 class object format_rolf","code":""},{"path":"https://ostluft.github.io/rOstluft/reference/format_ps.html","id":"todo","dir":"Reference","previous_headings":"","what":"TODO","title":"Format defintion for ps data with endtime instead of interval — format_ps","text":"Define class columns","code":""},{"path":"https://ostluft.github.io/rOstluft/reference/format_ps.html","id":"columns","dir":"Reference","previous_headings":"","what":"Columns","title":"Format defintion for ps data with endtime instead of interval — format_ps","text":"starttime: POSIXct endtime: POSIXct site: factor/character parameter: factor/character unit: factor/character value: double","code":""},{"path":"https://ostluft.github.io/rOstluft/reference/format_ps.html","id":"series","dir":"Reference","previous_headings":"","what":"Series","title":"Format defintion for ps data with endtime instead of interval — format_ps","text":"serie unique combination columns: site parameter unit","code":""},{"path":"https://ostluft.github.io/rOstluft/reference/format_ps.html","id":"chunking","dir":"Reference","previous_headings":"","what":"Chunking","title":"Format defintion for ps data with endtime instead of interval — format_ps","text":"data chunked columns site","code":""},{"path":"https://ostluft.github.io/rOstluft/reference/format_ps.html","id":"content-columns","dir":"Reference","previous_headings":"","what":"Content Columns","title":"Format defintion for ps data with endtime instead of interval — format_ps","text":"year = year(with_tz(starttime, tz)) site parameter unit n = number valid values","code":""},{"path":"https://ostluft.github.io/rOstluft/reference/format_rolf.html","id":null,"dir":"Reference","previous_headings":"","what":"rOstluft long format (rolf) — format_rolf","title":"rOstluft long format (rolf) — format_rolf","text":"Data format storing air quality data. Serie combination measurement site, interval, parameter unit. data chunked year measurement, site interval. Base64 encoding used avoid invalid characters","code":""},{"path":"https://ostluft.github.io/rOstluft/reference/format_rolf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"rOstluft long format (rolf) — format_rolf","text":"","code":"format_rolf(tz = \"Etc/GMT-1\")"},{"path":"https://ostluft.github.io/rOstluft/reference/format_rolf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"rOstluft long format (rolf) — format_rolf","text":"tz time zone used chunking.  Default Etc/GMT-1","code":""},{"path":"https://ostluft.github.io/rOstluft/reference/format_rolf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"rOstluft long format (rolf) — format_rolf","text":"R6 class object format_rolf","code":""},{"path":"https://ostluft.github.io/rOstluft/reference/format_rolf.html","id":"fields","dir":"Reference","previous_headings":"","what":"Fields","title":"rOstluft long format (rolf) — format_rolf","text":"index index data (cases time columns) serie_columns combination columns serie chunk_columns data columns chunking chunk_calc formulas calculating new columns chunking unique_columns = index + serie_columns content_columns = serie_columns + names(chunk_calc) tz time zone used chunking. time different chunk: 2018-01-01T00:00:00+0100 = 2018, 2017-12-31T23:00:00+0000 = 2017","code":""},{"path":"https://ostluft.github.io/rOstluft/reference/format_rolf.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"rOstluft long format (rolf) — format_rolf","text":"$sort(data) $merge(new_data, old_data) $chunk_name(chunk_data) returns chunkname based first row supplied data $get_chunk_names(interval, site, year) returns encoded chunknames combinations supplied vectors $encode_chunk_name(interval, site, year) returns encoded chunkname $decode_chunk_name(chunk_name) returns decoded chunk_name tibble columns (chunk_name, interval, site, year) $destroy(confirmation) removes files path file system \"DELETE\" supplied confirmation","code":""},{"path":"https://ostluft.github.io/rOstluft/reference/format_rolf.html","id":"todo","dir":"Reference","previous_headings":"","what":"TODO","title":"rOstluft long format (rolf) — format_rolf","text":"Update Documentation outdated","code":""},{"path":"https://ostluft.github.io/rOstluft/reference/gap_wrapper_function.html","id":null,"dir":"Reference","previous_headings":"","what":"wrapper function for maximum number of consecutive NA values — gap_wrapper_function","title":"wrapper function for maximum number of consecutive NA values — gap_wrapper_function","text":"wrapper function maximum number consecutive NA values","code":""},{"path":"https://ostluft.github.io/rOstluft/reference/gap_wrapper_function.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"wrapper function for maximum number of consecutive NA values — gap_wrapper_function","text":"","code":"gap_wrapper_function(statistic_fun, max_gap, ...)"},{"path":"https://ostluft.github.io/rOstluft/reference/gap_wrapper_function.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"wrapper function for maximum number of consecutive NA values — gap_wrapper_function","text":"statistic_fun statistic function apply max gap criterium meet max_gap maxium Number consecutive NA values ... Additional arguments passed statistic function","code":""},{"path":"https://ostluft.github.io/rOstluft/reference/gap_wrapper_function.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"wrapper function for maximum number of consecutive NA values — gap_wrapper_function","text":"wrapped function","code":""},{"path":"https://ostluft.github.io/rOstluft/reference/getElement2.html","id":null,"dir":"Reference","previous_headings":"","what":"Get element or default value from Object — getElement2","title":"Get element or default value from Object — getElement2","text":"Get element default value Object","code":""},{"path":"https://ostluft.github.io/rOstluft/reference/getElement2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get element or default value from Object — getElement2","text":"","code":"getElement2(object, element_name, default_value = NULL)"},{"path":"https://ostluft.github.io/rOstluft/reference/getElement2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get element or default value from Object — getElement2","text":"object object get element element_name string matched names object default_value return value element found object","code":""},{"path":"https://ostluft.github.io/rOstluft/reference/getElement2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get element or default value from Object — getElement2","text":"element default value","code":""},{"path":"https://ostluft.github.io/rOstluft/reference/get_list.html","id":null,"dir":"Reference","previous_headings":"","what":"convert table to resample compatible list — get_list","title":"convert table to resample compatible list — get_list","text":"convert table resample compatible list","code":""},{"path":"https://ostluft.github.io/rOstluft/reference/get_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"convert table to resample compatible list — get_list","text":"","code":"get_list(table)"},{"path":"https://ostluft.github.io/rOstluft/reference/get_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"convert table to resample compatible list — get_list","text":"table statstable","code":""},{"path":"https://ostluft.github.io/rOstluft/reference/get_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"convert table to resample compatible list — get_list","text":"list","code":""},{"path":"https://ostluft.github.io/rOstluft/reference/get_seepolizei.html","id":null,"dir":"Reference","previous_headings":"","what":"Returns data of the Tecson meteo station placed at Tiefenbrunnen and Mythenquai water police station. — get_seepolizei","title":"Returns data of the Tecson meteo station placed at Tiefenbrunnen and Mythenquai water police station. — get_seepolizei","text":"get_seepolizei() uses Tecdottir API Stefan Oderholz. read_seepolizei_json() parses response API.","code":""},{"path":"https://ostluft.github.io/rOstluft/reference/get_seepolizei.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Returns data of the Tecson meteo station placed at Tiefenbrunnen and Mythenquai water police station. — get_seepolizei","text":"","code":"get_seepolizei(start, end, site = c(\"tiefenbrunnen\", \"mythenquai\"))  read_seepolizei_json(txt)"},{"path":"https://ostluft.github.io/rOstluft/reference/get_seepolizei.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Returns data of the Tecson meteo station placed at Tiefenbrunnen and Mythenquai water police station. — get_seepolizei","text":"start start date measurements returned. string format yyyy-mm-dd POSIXct, POSIXlt Date end end date measurements returned. string format yyyy-mm-dd POSIXct, POSIXlt Date site site values returned. Valid values \"mythenquai\" \"tiefenbrunnen\" txt JSON string, URL file","code":""},{"path":"https://ostluft.github.io/rOstluft/reference/get_seepolizei.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Returns data of the Tecson meteo station placed at Tiefenbrunnen and Mythenquai water police station. — get_seepolizei","text":"tibble rolf format","code":""},{"path":"https://ostluft.github.io/rOstluft/reference/get_seepolizei.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Returns data of the Tecson meteo station placed at Tiefenbrunnen and Mythenquai water police station. — get_seepolizei","text":"","code":"get_seepolizei(as.Date(\"2020-03-01\"), lubridate::dmy(\"02.03.2020\")) #> # A tibble: 2,890 x 6 #>    starttime           site          parameter       interval unit  value #>    <dttm>              <fct>         <fct>           <fct>    <fct> <dbl> #>  1 2020-03-01 00:00:00 tiefenbrunnen air_temperature min10    °C      6.5 #>  2 2020-03-01 00:10:00 tiefenbrunnen air_temperature min10    °C      6.5 #>  3 2020-03-01 00:20:00 tiefenbrunnen air_temperature min10    °C      6.4 #>  4 2020-03-01 00:30:00 tiefenbrunnen air_temperature min10    °C      6.1 #>  5 2020-03-01 00:40:00 tiefenbrunnen air_temperature min10    °C      6   #>  6 2020-03-01 00:50:00 tiefenbrunnen air_temperature min10    °C      6   #>  7 2020-03-01 01:00:00 tiefenbrunnen air_temperature min10    °C      6   #>  8 2020-03-01 01:10:00 tiefenbrunnen air_temperature min10    °C      5.9 #>  9 2020-03-01 01:20:00 tiefenbrunnen air_temperature min10    °C      6   #> 10 2020-03-01 01:30:00 tiefenbrunnen air_temperature min10    °C      6.1 #> # ... with 2,880 more rows   data <- get_seepolizei(\"2020-03-20\", \"2020-03-22\", \"mythenquai\")  # normalize data with meta informations meta_data <- readRDS(rOstluft.data::f(\"meta_seepolizei.rds\"))  # rename station data <- meta_apply(   data = data,   meta = meta_data,   data_src = \"site\",   data_dest = \"site\",   meta_key = \"site_short\",   meta_val = \"site\",   mode = \"strict\" )  # rename parameters to Ostluft Conventions data <- meta_apply(   data = data,   meta = meta_data,   data_src = \"parameter\",   data_dest = \"parameter\",   meta_key = \"parameter_original\",   meta_val = \"parameter\",   mode = \"strict\" )  # show normalized data data #> # A tibble: 3,897 x 6 #>    starttime           site          parameter interval unit  value #>    <dttm>              <fct>         <fct>     <fct>    <fct> <dbl> #>  1 2020-03-20 00:00:00 ZH_Mythenquai T         min10    °C     10   #>  2 2020-03-20 00:10:00 ZH_Mythenquai T         min10    °C      9.9 #>  3 2020-03-20 00:20:00 ZH_Mythenquai T         min10    °C     10   #>  4 2020-03-20 00:30:00 ZH_Mythenquai T         min10    °C      9.9 #>  5 2020-03-20 00:40:00 ZH_Mythenquai T         min10    °C      9.8 #>  6 2020-03-20 00:50:00 ZH_Mythenquai T         min10    °C      9.8 #>  7 2020-03-20 01:00:00 ZH_Mythenquai T         min10    °C      9.7 #>  8 2020-03-20 01:10:00 ZH_Mythenquai T         min10    °C      9.6 #>  9 2020-03-20 01:20:00 ZH_Mythenquai T         min10    °C      9.5 #> 10 2020-03-20 01:30:00 ZH_Mythenquai T         min10    °C      9.3 #> # ... with 3,887 more rows"},{"path":"https://ostluft.github.io/rOstluft/reference/get_statistics_from_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Create resample compatible statistic lists — get_statistics_from_table","title":"Create resample compatible statistic lists — get_statistics_from_table","text":"exported user debug table","code":""},{"path":"https://ostluft.github.io/rOstluft/reference/get_statistics_from_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create resample compatible statistic lists — get_statistics_from_table","text":"","code":"get_statistics_from_table(table, from, inputs = NULL)"},{"path":"https://ostluft.github.io/rOstluft/reference/get_statistics_from_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create resample compatible statistic lists — get_statistics_from_table","text":"table statstable interval generate statistic list inputs parameters input","code":""},{"path":"https://ostluft.github.io/rOstluft/reference/get_statistics_from_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create resample compatible statistic lists — get_statistics_from_table","text":"list statistic list every ","code":""},{"path":"https://ostluft.github.io/rOstluft/reference/import_directory.html","id":null,"dir":"Reference","previous_headings":"","what":"Imports directory into store — import_directory","title":"Imports directory into store — import_directory","text":"Imports directory store","code":""},{"path":"https://ostluft.github.io/rOstluft/reference/import_directory.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Imports directory into store — import_directory","text":"","code":"import_directory(   store,   path,   read_function,   glob = NULL,   regexp = NULL,   recursive = TRUE,   ... )"},{"path":"https://ostluft.github.io/rOstluft/reference/import_directory.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Imports directory into store — import_directory","text":"store instance store import data path directory containing data files read_function function argument file, ... passed function supply additionals arguments glob see fs::dir_ls() regexp see fs::dir_ls() recursive see fs::dir_ls() ... passed read_function","code":""},{"path":"https://ostluft.github.io/rOstluft/reference/import_directory.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Imports directory into store — import_directory","text":"","code":"format <- rOstluft::format_rolf() store <- rOstluft::storage_local_rds(\"example_rOstluft\", format, read.only = FALSE) #> Local store example_rOstluft initialized under 'C:\\Users\\tom\\AppData\\Local/rOstluft/example_rOstluft' path <- system.file(\"extdata\", package = \"rOstluft.data\")  rOstluft::import_directory(store, path, rOstluft::read_airmo_csv, glob = \"*Jan.csv\") #> Importing 'D:/tom/Documents/R/win-library/4.1/rOstluft.data/extdata/Zch_Stampfenbachstrasse_d1_2013_Jan.csv' with size 25.5K. File 1 of 3 #> Read 'D:/tom/Documents/R/win-library/4.1/rOstluft.data/extdata/Zch_Stampfenbachstrasse_d1_2013_Jan.csv' in 0.16 seconds. Got 2170 data points #> First put to storage. Save columns types to C:/Users/tom/AppData/Local/rOstluft/example_rOstluft/columns.rds #> Put data into store example_rOstluft in 0.09 seconds #> Importing 'D:/tom/Documents/R/win-library/4.1/rOstluft.data/extdata/Zch_Stampfenbachstrasse_h1_2013_Jan.csv' with size 143K. File 2 of 3 #> Read 'D:/tom/Documents/R/win-library/4.1/rOstluft.data/extdata/Zch_Stampfenbachstrasse_h1_2013_Jan.csv' in 0.07 seconds. Got 14116 data points #> Put data into store example_rOstluft in 0.12 seconds #> Importing 'D:/tom/Documents/R/win-library/4.1/rOstluft.data/extdata/Zch_Stampfenbachstrasse_min30_2013_Jan.csv' with size 259K. File 3 of 3 #> Read 'D:/tom/Documents/R/win-library/4.1/rOstluft.data/extdata/Zch_Stampfenbachstrasse_min30_2013_Jan.csv' in 0.08 seconds. Got 28234 data points #> Put data into store example_rOstluft in 0.09 seconds #> Finished import after 0.63 seconds  store$get_content() #> # A tibble: 108 x 6 #>     year interval site                    parameter unit      n #>    <dbl> <fct>    <fct>                   <fct>     <fct> <int> #>  1  2013 min30    Zch_Stampfenbachstrasse CO        mg/m3  1484 #>  2  2013 min30    Zch_Stampfenbachstrasse CO        ppm    1484 #>  3  2013 min30    Zch_Stampfenbachstrasse Hr        %Hr    1487 #>  4  2013 min30    Zch_Stampfenbachstrasse NO        µg/m3  1484 #>  5  2013 min30    Zch_Stampfenbachstrasse NO        ppb    1484 #>  6  2013 min30    Zch_Stampfenbachstrasse NO2       µg/m3  1484 #>  7  2013 min30    Zch_Stampfenbachstrasse NO2       ppb    1484 #>  8  2013 min30    Zch_Stampfenbachstrasse NOx       ppb    1484 #>  9  2013 min30    Zch_Stampfenbachstrasse O3        µg/m3  1488 #> 10  2013 min30    Zch_Stampfenbachstrasse O3        ppb    1488 #> # ... with 98 more rows  store$destroy(\"DELETE\") #> Store example_rOstluft destroyed"},{"path":"https://ostluft.github.io/rOstluft/reference/mass_to_parts.html","id":null,"dir":"Reference","previous_headings":"","what":"Converts mass to volume concentration — mass_to_parts","title":"Converts mass to volume concentration — mass_to_parts","text":"Converts mass volume concentration","code":""},{"path":"https://ostluft.github.io/rOstluft/reference/mass_to_parts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Converts mass to volume concentration — mass_to_parts","text":"","code":"mass_to_parts(values, mol_mass, temperature = 20, pressure = 1013, ...)"},{"path":"https://ostluft.github.io/rOstluft/reference/mass_to_parts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Converts mass to volume concentration — mass_to_parts","text":"values mass concentration mol_mass g/mol temperature °C. Default 20 °C pressure hPa. Default 1013.25 hPa ... catch additional arguments keep R happy","code":""},{"path":"https://ostluft.github.io/rOstluft/reference/mass_to_parts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Converts mass to volume concentration — mass_to_parts","text":"volume concentration","code":""},{"path":"https://ostluft.github.io/rOstluft/reference/meta_apply.html","id":null,"dir":"Reference","previous_headings":"","what":"Transforms data based on an other meta table — meta_apply","title":"Transforms data based on an other meta table — meta_apply","text":"work data different sources normilization naming necessary. function allows flexible renaming/recoding input data based second table. short following operation performed: data$data_dest = meta[meta$meta_key == data$data_src]$meta_val handling missing values meta_key meta different modes: strict: stop execution drop: drop rows data keep: keep values data replace: use mapping provided argument replacement (named vector/list) function quiet chatty reports values dropped, kept replaced.","code":""},{"path":"https://ostluft.github.io/rOstluft/reference/meta_apply.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transforms data based on an other meta table — meta_apply","text":"","code":"meta_apply(   data,   meta,   data_src,   data_dest,   meta_key,   meta_val,   mode = \"strict\",   replacements = NULL )"},{"path":"https://ostluft.github.io/rOstluft/reference/meta_apply.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transforms data based on an other meta table — meta_apply","text":"data Input data tibble meta Lookup table tibble data_src Name column data used lookup meta data_dest Name column save result data meta_key Name column meta match data$data_src meta_val Name column containing replacement value meta mode One \"strict\", \"drop\", \"keep\", \"replace\". Default \"strict\" replacements Named vector/list missing values meta$meta_key overwrite specific mappings","code":""},{"path":"https://ostluft.github.io/rOstluft/reference/meta_apply.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transforms data based on an other meta table — meta_apply","text":"transformed data","code":""},{"path":[]},{"path":"https://ostluft.github.io/rOstluft/reference/meta_apply.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Transforms data based on an other meta table — meta_apply","text":"","code":"meta_fn <- system.file(\"extdata\", \"meta_smn.rds\",                        package = \"rOstluft.data\", mustWork = TRUE) meta <- readRDS(meta_fn) tibble::glimpse(meta) #> Rows: 214 #> Columns: 15 #> $ site_short         <chr> \"TAE\", \"TAE\", \"TAE\", \"TAE\", \"TAE\", \"TAE\", \"TAE\", \"T~ #> $ site               <chr> \"Aadorf/Tänikon\", \"Aadorf/Tänikon\", \"Aadorf/Tänikon~ #> $ Länge              <chr> \"8°54'\", \"8°54'\", \"8°54'\", \"8°54'\", \"8°54'\", \"8°54'~ #> $ Breite             <chr> \"47°29'\", \"47°29'\", \"47°29'\", \"47°29'\", \"47°29'\", \"~ #> $ x                  <dbl> 2710517, 2710517, 2710517, 2710517, 2710517, 271051~ #> $ y                  <dbl> 1259824, 1259824, 1259824, 1259824, 1259824, 125982~ #> $ masl               <dbl> 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 5~ #> $ parameter_original <chr> \"tre200s0\", \"ure200s0\", \"prestas0\", \"prestas0\", \"fk~ #> $ source             <chr> \"MeteoSchweiz\", \"MeteoSchweiz\", \"MeteoSchweiz\", \"Me~ #> $ unit               <chr> \"°C\", \"%\", \"hPa\", \"hPa\", \"m/s\", \"m/s\", \"°\", \"min\", ~ #> $ Beschreibung       <chr> \"Lufttemperatur\", \"Relative\", \"Luftdruck\", \"Luftdru~ #> $ timezone_original  <chr> \"UTC\", \"UTC\", \"UTC\", \"UTC\", \"UTC\", \"UTC\", \"UTC\", \"U~ #> $ site_long          <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,~ #> $ interval           <chr> \"min10\", \"min10\", \"min10\", \"min10\", \"min10\", \"min10~ #> $ parameter          <chr> \"T\", \"Hr\", \"p\", \"p\", \"WVs_max\", \"WVs\", \"WD\", \"SunDu~  fn <- system.file(\"extdata\", \"smn.txt\", package = \"rOstluft.data\", mustWork = TRUE) data <- read_smn(fn, na.rm = FALSE) data <- dplyr::arrange(data, .data$starttime) data #> # A tibble: 60 x 6 #>    starttime           site  parameter interval unit  value #>    <dttm>              <fct> <fct>     <fct>    <fct> <dbl> #>  1 2018-01-01 00:50:00 CHU   dkl010z0  min10    NA    216   #>  2 2018-01-01 00:50:00 CHU   fkl010z0  min10    NA      1.7 #>  3 2018-01-01 00:50:00 CHU   fkl010z1  min10    NA      3   #>  4 2018-01-01 00:50:00 CHU   gre000z0  min10    NA      5   #>  5 2018-01-01 00:50:00 CHU   hto000s0  min10    NA     NA   #>  6 2018-01-01 00:50:00 CHU   prestas0  min10    NA    946.  #>  7 2018-01-01 00:50:00 CHU   rre150z0  min10    NA      0   #>  8 2018-01-01 00:50:00 CHU   sre000z0  min10    NA      0   #>  9 2018-01-01 00:50:00 CHU   tre200s0  min10    NA      2.3 #> 10 2018-01-01 00:50:00 CHU   ure200s0  min10    NA     82.7 #> # ... with 50 more rows  # data contains no units, cryptic SwissMetNet parameter names and abbreviations for site. # And the meta data for parameter rre150z0 is missing. Perfect!  # too lazy to update meta, add unit mapping based on SwissMetNet parameter names # and we want to overwrite the mapping for dkl010z0 anyway => use replace res <- meta_apply(data, meta, \"parameter\", \"unit\", \"parameter_original\", \"unit\",          mode = \"replace\",replacements = list(rre150z0 = \"unit1\", dkl010z0 = \"unit2\")) #> apply meta data$unit = meta[meta$parameter_original == data$parameter]$unit: #>   missing keys in meta$parameter_original: rre150z0 #>   replacements used: dkl010z0, rre150z0 res #> # A tibble: 60 x 6 #>    starttime           site  parameter interval unit  value #>    <dttm>              <fct> <fct>     <fct>    <fct> <dbl> #>  1 2018-01-01 00:50:00 CHU   dkl010z0  min10    unit2 216   #>  2 2018-01-01 00:50:00 CHU   fkl010z0  min10    m/s     1.7 #>  3 2018-01-01 00:50:00 CHU   fkl010z1  min10    m/s     3   #>  4 2018-01-01 00:50:00 CHU   gre000z0  min10    W/m2    5   #>  5 2018-01-01 00:50:00 CHU   hto000s0  min10    cm     NA   #>  6 2018-01-01 00:50:00 CHU   prestas0  min10    hPa   946.  #>  7 2018-01-01 00:50:00 CHU   rre150z0  min10    unit1   0   #>  8 2018-01-01 00:50:00 CHU   sre000z0  min10    min     0   #>  9 2018-01-01 00:50:00 CHU   tre200s0  min10    °C      2.3 #> 10 2018-01-01 00:50:00 CHU   ure200s0  min10    %      82.7 #> # ... with 50 more rows  # rename the SwissMetNet Parameters, still no mapping for rre150z0, we aren't # interested in the data and drop it res2 <- meta_apply(res, meta, \"parameter\", \"parameter\",          \"parameter_original\", \"parameter\", mode = \"drop\") #> Warning: apply meta data$parameter = meta[meta$parameter_original == data$parameter]$parameter: #>   missing keys in meta$parameter_original: rre150z0 #>   dropping missing prameters res2 #> # A tibble: 54 x 6 #>    starttime           site  parameter interval unit  value #>    <dttm>              <fct> <fct>     <fct>    <fct> <dbl> #>  1 2018-01-01 00:50:00 CHU   WD        min10    unit2 216   #>  2 2018-01-01 00:50:00 CHU   WVs       min10    m/s     1.7 #>  3 2018-01-01 00:50:00 CHU   WVs_max   min10    m/s     3   #>  4 2018-01-01 00:50:00 CHU   StrGlo    min10    W/m2    5   #>  5 2018-01-01 00:50:00 CHU   SnowDep   min10    cm     NA   #>  6 2018-01-01 00:50:00 CHU   p         min10    hPa   946.  #>  7 2018-01-01 00:50:00 CHU   SunDur    min10    min     0   #>  8 2018-01-01 00:50:00 CHU   T         min10    °C      2.3 #>  9 2018-01-01 00:50:00 CHU   Hr        min10    %      82.7 #> 10 2018-01-01 01:00:00 CHU   WD        min10    unit2 209   #> # ... with 44 more rows  # or we keep it res <- meta_apply(res, meta, \"parameter\", \"parameter\",          \"parameter_original\", \"parameter\", mode = \"keep\") #> Warning: apply meta data$parameter = meta[meta$parameter_original == data$parameter]$parameter: #>   missing keys in meta$parameter_original: rre150z0 #>   keeping values: rre150z0 res #> # A tibble: 60 x 6 #>    starttime           site  parameter interval unit  value #>    <dttm>              <fct> <fct>     <fct>    <fct> <dbl> #>  1 2018-01-01 00:50:00 CHU   WD        min10    unit2 216   #>  2 2018-01-01 00:50:00 CHU   WVs       min10    m/s     1.7 #>  3 2018-01-01 00:50:00 CHU   WVs_max   min10    m/s     3   #>  4 2018-01-01 00:50:00 CHU   StrGlo    min10    W/m2    5   #>  5 2018-01-01 00:50:00 CHU   SnowDep   min10    cm     NA   #>  6 2018-01-01 00:50:00 CHU   p         min10    hPa   946.  #>  7 2018-01-01 00:50:00 CHU   rre150z0  min10    unit1   0   #>  8 2018-01-01 00:50:00 CHU   SunDur    min10    min     0   #>  9 2018-01-01 00:50:00 CHU   T         min10    °C      2.3 #> 10 2018-01-01 00:50:00 CHU   Hr        min10    %      82.7 #> # ... with 50 more rows  # rename the site abbreviation to the site name, strict should work res <- meta_apply(res, meta, \"site\", \"site\", \"site_short\", \"site\") res #> # A tibble: 60 x 6 #>    starttime           site  parameter interval unit  value #>    <dttm>              <fct> <fct>     <fct>    <fct> <dbl> #>  1 2018-01-01 00:50:00 Chur  WD        min10    unit2 216   #>  2 2018-01-01 00:50:00 Chur  WVs       min10    m/s     1.7 #>  3 2018-01-01 00:50:00 Chur  WVs_max   min10    m/s     3   #>  4 2018-01-01 00:50:00 Chur  StrGlo    min10    W/m2    5   #>  5 2018-01-01 00:50:00 Chur  SnowDep   min10    cm     NA   #>  6 2018-01-01 00:50:00 Chur  p         min10    hPa   946.  #>  7 2018-01-01 00:50:00 Chur  rre150z0  min10    unit1   0   #>  8 2018-01-01 00:50:00 Chur  SunDur    min10    min     0   #>  9 2018-01-01 00:50:00 Chur  T         min10    °C      2.3 #> 10 2018-01-01 00:50:00 Chur  Hr        min10    %      82.7 #> # ... with 50 more rows"},{"path":"https://ostluft.github.io/rOstluft/reference/openair_to_rolf.html","id":null,"dir":"Reference","previous_headings":"","what":"Converts data from openair format to rolf — openair_to_rolf","title":"Converts data from openair format to rolf — openair_to_rolf","text":"Converts data openair format rolf","code":""},{"path":"https://ostluft.github.io/rOstluft/reference/openair_to_rolf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Converts data from openair format to rolf — openair_to_rolf","text":"","code":"openair_to_rolf(   data,   site = NULL,   interval = NULL,   units = NULL,   ws = \"WVv\",   wd = \"WD\" )"},{"path":"https://ostluft.github.io/rOstluft/reference/openair_to_rolf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Converts data from openair format to rolf — openair_to_rolf","text":"data openair format site specify site data. Necessary data contains column \"site\" interval specify interval data. Necessary data contains column \"interval\" units specify parameter unit mapping named vector. Name = parameter, value = unit. Necessary data contains column \"unit\" ws renames parameter \"ws\" Value. Default \"WVv\". Set ws = NULL disable renaming wd renames parameter \"wd\" Value. Default \"WD\". Set wd = NULL disable renaming","code":""},{"path":"https://ostluft.github.io/rOstluft/reference/openair_to_rolf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Converts data from openair format to rolf — openair_to_rolf","text":"Converted data rolf format","code":""},{"path":"https://ostluft.github.io/rOstluft/reference/openair_to_rolf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Converts data from openair format to rolf — openair_to_rolf","text":"","code":"h1 <- system.file(\"extdata\", \"Zch_Stampfenbachstrasse_h1_2013_Jan.csv\",                    package = \"rOstluft.data\", mustWork = TRUE)  airmo_h1 <- read_airmo_csv(h1) airmo_h1 #> # A tibble: 14,116 x 6 #>    starttime           site                    parameter interval unit  value #>    <dttm>              <fct>                   <fct>     <fct>    <fct> <dbl> #>  1 2013-01-01 00:00:00 Zch_Stampfenbachstrasse CO        h1       mg/m3 0.805 #>  2 2013-01-01 01:00:00 Zch_Stampfenbachstrasse CO        h1       mg/m3 0.833 #>  3 2013-01-01 02:00:00 Zch_Stampfenbachstrasse CO        h1       mg/m3 0.874 #>  4 2013-01-01 03:00:00 Zch_Stampfenbachstrasse CO        h1       mg/m3 0.755 #>  5 2013-01-01 04:00:00 Zch_Stampfenbachstrasse CO        h1       mg/m3 0.767 #>  6 2013-01-01 05:00:00 Zch_Stampfenbachstrasse CO        h1       mg/m3 0.566 #>  7 2013-01-01 06:00:00 Zch_Stampfenbachstrasse CO        h1       mg/m3 0.509 #>  8 2013-01-01 07:00:00 Zch_Stampfenbachstrasse CO        h1       mg/m3 0.460 #>  9 2013-01-01 08:00:00 Zch_Stampfenbachstrasse CO        h1       mg/m3 0.334 #> 10 2013-01-01 09:00:00 Zch_Stampfenbachstrasse CO        h1       mg/m3 0.285 #> # ... with 14,106 more rows  oa_h1 <- rolf_to_openair(airmo_h1) units_h1 <- attr(oa_h1, \"units\")  # we lost the parameter with ppb/ppm units trough the convertions openair_to_rolf(oa_h1, interval = \"h1\", units = units_h1) #> # A tibble: 10,416 x 6 #>    starttime           site                    parameter interval unit  value #>    <dttm>              <fct>                   <fct>     <fct>    <fct> <dbl> #>  1 2013-01-01 00:00:00 Zch_Stampfenbachstrasse CO        h1       mg/m3 0.805 #>  2 2013-01-01 01:00:00 Zch_Stampfenbachstrasse CO        h1       mg/m3 0.833 #>  3 2013-01-01 02:00:00 Zch_Stampfenbachstrasse CO        h1       mg/m3 0.874 #>  4 2013-01-01 03:00:00 Zch_Stampfenbachstrasse CO        h1       mg/m3 0.755 #>  5 2013-01-01 04:00:00 Zch_Stampfenbachstrasse CO        h1       mg/m3 0.767 #>  6 2013-01-01 05:00:00 Zch_Stampfenbachstrasse CO        h1       mg/m3 0.566 #>  7 2013-01-01 06:00:00 Zch_Stampfenbachstrasse CO        h1       mg/m3 0.509 #>  8 2013-01-01 07:00:00 Zch_Stampfenbachstrasse CO        h1       mg/m3 0.460 #>  9 2013-01-01 08:00:00 Zch_Stampfenbachstrasse CO        h1       mg/m3 0.334 #> 10 2013-01-01 09:00:00 Zch_Stampfenbachstrasse CO        h1       mg/m3 0.285 #> # ... with 10,406 more rows"},{"path":"https://ostluft.github.io/rOstluft/reference/pad.html","id":null,"dir":"Reference","previous_headings":"","what":"Pad data — pad","title":"Pad data — pad","text":"Function pad missing time points","code":""},{"path":"https://ostluft.github.io/rOstluft/reference/pad.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pad data — pad","text":"","code":"pad(data, start_date = NULL, end_date = NULL, drop_last = FALSE)  pad_serie(serie, start_date = NULL, end_date = NULL, drop_last = FALSE)"},{"path":"https://ostluft.github.io/rOstluft/reference/pad.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pad data — pad","text":"data tibble rOstluft long format start_date optional start date padding. Default min date series end_date optional end date padding. Default max date series drop_last optional drop last added time point padding. Useful resampling end_date first time point new interval serie tibble rOstluft long format containing exactly one serie","code":""},{"path":"https://ostluft.github.io/rOstluft/reference/pad.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pad data — pad","text":"tibble padded data","code":""},{"path":"https://ostluft.github.io/rOstluft/reference/pad_year.html","id":null,"dir":"Reference","previous_headings":"","what":"Pads data data to complete years — pad_year","title":"Pads data data to complete years — pad_year","text":"Pads data data complete years","code":""},{"path":"https://ostluft.github.io/rOstluft/reference/pad_year.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pads data data to complete years — pad_year","text":"","code":"pad_year(data)"},{"path":"https://ostluft.github.io/rOstluft/reference/pad_year.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pads data data to complete years — pad_year","text":"data input data rolf format","code":""},{"path":"https://ostluft.github.io/rOstluft/reference/pad_year.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pads data data to complete years — pad_year","text":"padded data rolf format","code":""},{"path":"https://ostluft.github.io/rOstluft/reference/parts_to_mass.html","id":null,"dir":"Reference","previous_headings":"","what":"Converts mass to volume concentration — parts_to_mass","title":"Converts mass to volume concentration — parts_to_mass","text":"Converts mass volume concentration","code":""},{"path":"https://ostluft.github.io/rOstluft/reference/parts_to_mass.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Converts mass to volume concentration — parts_to_mass","text":"","code":"parts_to_mass(values, mol_mass, temperature = 20, pressure = 1013, ...)"},{"path":"https://ostluft.github.io/rOstluft/reference/parts_to_mass.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Converts mass to volume concentration — parts_to_mass","text":"values volume concentration mol_mass g/mol temperature °C. Default 20 °C pressure hPa. Default 1013 hPa ... catch additional arguments keep R happy","code":""},{"path":"https://ostluft.github.io/rOstluft/reference/parts_to_mass.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Converts mass to volume concentration — parts_to_mass","text":"mass concentration","code":""},{"path":"https://ostluft.github.io/rOstluft/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://ostluft.github.io/rOstluft/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://ostluft.github.io/rOstluft/reference/pluck.html","id":null,"dir":"Reference","previous_headings":"","what":"Quickly filter data — pluck_parameter","title":"Quickly filter data — pluck_parameter","text":"pluck funtions wrappers around dplyr::filter(). dots arguments converted vector function searchs specific column %% operator.","code":""},{"path":"https://ostluft.github.io/rOstluft/reference/pluck.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Quickly filter data — pluck_parameter","text":"","code":"pluck_parameter(data, ...)  pluck_interval(data, ...)  pluck_site(data, ...)  pluck_unit(data, ...)  pluck_year(data, ...)"},{"path":"https://ostluft.github.io/rOstluft/reference/pluck.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Quickly filter data — pluck_parameter","text":"data input data rolf format ... elements get strings integers","code":""},{"path":"https://ostluft.github.io/rOstluft/reference/pluck.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Quickly filter data — pluck_parameter","text":"filtered input data","code":""},{"path":"https://ostluft.github.io/rOstluft/reference/pluck.html","id":"windows-symbols-and-encodings","dir":"Reference","previous_headings":"","what":"Windows, symbols and encodings","title":"Quickly filter data — pluck_parameter","text":"first implementation supported symbols dots arguments. windows symbol gets converted native encoding without encoding mark. converted symbol now compared UTF-8 strings match. One example strings like \"°C\" \"µg/m3\". See rlang::as_string()","code":""},{"path":"https://ostluft.github.io/rOstluft/reference/pluck.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Quickly filter data — pluck_parameter","text":"","code":"fn <- system.file(\"extdata\", \"smn_multi.txt\", package = \"rOstluft.data\") data <- read_smn_multiple(fn) %>% dplyr::arrange(starttime)  pluck_parameter(data, \"ta1towb0\") #> # A tibble: 6 x 6 #>   starttime           site  parameter interval unit  value #>   <dttm>              <fct> <fct>     <fct>    <fct> <dbl> #> 1 2010-01-01 00:00:00 UEB   ta1towb0  h1       NA      3.7 #> 2 2010-01-01 01:00:00 UEB   ta1towb0  h1       NA      3.5 #> 3 2010-01-01 02:00:00 UEB   ta1towb0  h1       NA      3.2 #> 4 2010-01-01 03:00:00 UEB   ta1towb0  h1       NA      3.1 #> 5 2010-01-01 04:00:00 UEB   ta1towb0  h1       NA      3.3 #> 6 2010-01-01 05:00:00 UEB   ta1towb0  h1       NA      3.3  # strings or symbols pluck_site(data, \"KLO\", \"UEB\") #> # A tibble: 267 x 6 #>    starttime           site  parameter interval unit  value #>    <dttm>              <fct> <fct>     <fct>    <fct> <dbl> #>  1 2010-01-01 00:00:00 KLO   dkl010b0  h1       NA    319   #>  2 2010-01-01 00:00:00 KLO   fkl010b0  h1       NA      1.5 #>  3 2010-01-01 00:00:00 KLO   gre000b0  h1       NA      0   #>  4 2010-01-01 00:00:00 KLO   tre200b0  h1       NA      2.3 #>  5 2010-01-01 00:00:00 UEB   dk1towb0  h1       NA    249   #>  6 2010-01-01 00:00:00 UEB   fk1towb0  h1       NA      1.7 #>  7 2010-01-01 00:00:00 UEB   ta1towb0  h1       NA      3.7 #>  8 2010-01-01 01:00:00 KLO   dkl010b0  h1       NA    317   #>  9 2010-01-01 01:00:00 KLO   fkl010b0  h1       NA      1.7 #> 10 2010-01-01 01:00:00 KLO   gre000b0  h1       NA      0   #> # ... with 257 more rows  # supports splicing with !!! intervals = c(\"h1\", \"d1\") pluck_interval(data, !!!intervals) %>% dplyr::slice(40:45) #> # A tibble: 6 x 6 #>   starttime           site  parameter interval unit  value #>   <dttm>              <fct> <fct>     <fct>    <fct> <dbl> #> 1 2010-01-01 05:00:00 UEB   dk1towb0  h1       NA    129   #> 2 2010-01-01 05:00:00 UEB   fk1towb0  h1       NA      1.9 #> 3 2010-01-01 05:00:00 UEB   ta1towb0  h1       NA      3.3 #> 4 2017-12-31 01:00:00 RHW   wkcap1d0  d1       NA      2   #> 5 2017-12-31 01:00:00 RHW   wkcap2d0  d1       NA     11   #> 6 2017-12-31 01:00:00 RHW   wkcap3d0  d1       NA     21    # pluck_year supports vector pluck_year(data, 2010:2012) #> # A tibble: 42 x 6 #>    starttime           site  parameter interval unit  value #>    <dttm>              <fct> <fct>     <fct>    <fct> <dbl> #>  1 2010-01-01 00:00:00 KLO   dkl010b0  h1       NA    319   #>  2 2010-01-01 00:00:00 KLO   fkl010b0  h1       NA      1.5 #>  3 2010-01-01 00:00:00 KLO   gre000b0  h1       NA      0   #>  4 2010-01-01 00:00:00 KLO   tre200b0  h1       NA      2.3 #>  5 2010-01-01 00:00:00 UEB   dk1towb0  h1       NA    249   #>  6 2010-01-01 00:00:00 UEB   fk1towb0  h1       NA      1.7 #>  7 2010-01-01 00:00:00 UEB   ta1towb0  h1       NA      3.7 #>  8 2010-01-01 01:00:00 KLO   dkl010b0  h1       NA    317   #>  9 2010-01-01 01:00:00 KLO   fkl010b0  h1       NA      1.7 #> 10 2010-01-01 01:00:00 KLO   gre000b0  h1       NA      0   #> # ... with 32 more rows  # NAs in data aren't a problem pluck_unit(data, \"hPa\") #> # A tibble: 6 x 6 #>   starttime           site  parameter interval unit  value #>   <dttm>              <fct> <fct>     <fct>    <fct> <dbl> #> 1 2019-01-31 00:50:00 TAE   prestas0  min10    hPa    936. #> 2 2019-01-31 01:00:00 TAE   prestas0  min10    hPa    936  #> 3 2019-01-31 01:10:00 TAE   prestas0  min10    hPa    936. #> 4 2019-01-31 01:20:00 TAE   prestas0  min10    hPa    936. #> 5 2019-01-31 01:30:00 TAE   prestas0  min10    hPa    936. #> 6 2019-01-31 01:40:00 TAE   prestas0  min10    hPa    936.  # pipe friendly data %>%   pluck_site(\"KLO\", \"UEB\") %>%   pluck_parameter(\"gre000z0\") %>%   pluck_year(2010:2018) #> # A tibble: 12 x 6 #>    starttime           site  parameter interval unit  value #>    <dttm>              <fct> <fct>     <fct>    <fct> <dbl> #>  1 2018-01-01 00:50:00 KLO   gre000z0  min10    NA        1 #>  2 2018-01-01 00:50:00 UEB   gre000z0  min10    NA        3 #>  3 2018-01-01 01:00:00 KLO   gre000z0  min10    NA        1 #>  4 2018-01-01 01:00:00 UEB   gre000z0  min10    NA        3 #>  5 2018-01-01 01:10:00 KLO   gre000z0  min10    NA        1 #>  6 2018-01-01 01:10:00 UEB   gre000z0  min10    NA        2 #>  7 2018-01-01 01:20:00 KLO   gre000z0  min10    NA        2 #>  8 2018-01-01 01:20:00 UEB   gre000z0  min10    NA        2 #>  9 2018-01-01 01:30:00 KLO   gre000z0  min10    NA        3 #> 10 2018-01-01 01:30:00 UEB   gre000z0  min10    NA        2 #> 11 2018-01-01 01:40:00 KLO   gre000z0  min10    NA        4 #> 12 2018-01-01 01:40:00 UEB   gre000z0  min10    NA        2"},{"path":"https://ostluft.github.io/rOstluft/reference/r6_storage_local.html","id":null,"dir":"Reference","previous_headings":"","what":"Local storage — r6_storage_local","title":"Local storage — r6_storage_local","text":"local storage flexible file format (default rds). data format defines data chunks per file.","code":""},{"path":"https://ostluft.github.io/rOstluft/reference/r6_storage_local.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Local storage — r6_storage_local","text":"","code":"storage_local_rds(name, format, path = NULL, read.only = TRUE)  storage_local_tsv(   name,   format,   path = NULL,   read.only = TRUE,   tz = \"Etc/GMT-1\" )"},{"path":"https://ostluft.github.io/rOstluft/reference/r6_storage_local.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Local storage — r6_storage_local","text":"name name store format data format store path optional path create store . Defaults rappdirs::user_data_dir(appname = name, appauthor = \"rOstluft\") read.read store. disable put, false store exist, store initiated tz time zone POSIXct's columns. Data stored UTC. Converted reading. important, input data time zone. Default \"Etc/GMT-1\"","code":""},{"path":"https://ostluft.github.io/rOstluft/reference/r6_storage_local.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Local storage — r6_storage_local","text":"R6 class object r6_storage_local R6 class object r6_storage_local","code":""},{"path":"https://ostluft.github.io/rOstluft/reference/r6_storage_local.html","id":"fields","dir":"Reference","previous_headings":"","what":"Fields","title":"Local storage — r6_storage_local","text":"name name store format data format store path root store data_path root chunks content_path path rds file containing statistics store content columns_path path rds file containing exact column types store content meta_path root meta files read.flag read.usage store. Default TRUE ext file extension chunks. Default \"rds\" read_function function(file) reading chunks disk. Default base::readRDS() write_function function(object, file) writing chunks disk. Default base::saveRDS()","code":""},{"path":"https://ostluft.github.io/rOstluft/reference/r6_storage_local.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Local storage — r6_storage_local","text":"$get(filter=NULL, ...) get data store. name arguments depend format. filter argument applied chunk. $put(data) puts data store. Stops store read $get_content() returns tibble amount data points per chunk per series $list_chunks() get list chunks $get_meta(key=NULL) get meta data. key omitted returns content files named list tibbles, file name without extension name. key supplied argument list contains specified key. $put_meta(...) puts meta data store. name argument used file name value data. $fix_content() generates content file data files $destroy(confirmation) removes files path file system \"DELETE\" supplied confirmation","code":""},{"path":"https://ostluft.github.io/rOstluft/reference/r6_storage_local.html","id":"column-types","dir":"Reference","previous_headings":"","what":"Column Types","title":"Local storage — r6_storage_local","text":"first $put() saves column types data file. subsequents $put() calls must exact column types: order classes columns.","code":""},{"path":"https://ostluft.github.io/rOstluft/reference/r6_storage_local.html","id":"storage-local-tsv","dir":"Reference","previous_headings":"","what":"storage_local_tsv","title":"Local storage — r6_storage_local","text":"Storage mainly debugging purpose sharing data another scripting/programming language. Warning: Slow support logical data type.","code":""},{"path":"https://ostluft.github.io/rOstluft/reference/r6_storage_local.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Local storage — r6_storage_local","text":"","code":"## init store, creates directory if necessary format <- rOstluft::format_rolf() store <- rOstluft::storage_local_rds(\"example_rOstluft\", format, read.only = FALSE) #> Local store example_rOstluft initialized under 'C:\\Users\\tom\\AppData\\Local/rOstluft/example_rOstluft'  ## read data from airmo export und put into the store fn <- system.file(\"extdata\", \"Zch_Stampfenbachstrasse_2010-2014.csv\",                   package = \"rOstluft.data\", mustWork = TRUE) df <- rOstluft::read_airmo_csv(fn) store$put(df) #> First put to storage. Save columns types to C:/Users/tom/AppData/Local/rOstluft/example_rOstluft/columns.rds #> # A tibble: 70 x 6 #>     year interval site                    parameter unit      n #>    <dbl> <fct>    <fct>                   <fct>     <fct> <int> #>  1  2010 min30    Zch_Stampfenbachstrasse CO        mg/m3 17290 #>  2  2010 min30    Zch_Stampfenbachstrasse NO        µg/m3 17322 #>  3  2010 min30    Zch_Stampfenbachstrasse NO2       µg/m3 17322 #>  4  2010 min30    Zch_Stampfenbachstrasse NOx       ppb   17322 #>  5  2010 min30    Zch_Stampfenbachstrasse O3        µg/m3 17227 #>  6  2010 min30    Zch_Stampfenbachstrasse PM10      µg/m3 16840 #>  7  2010 min30    Zch_Stampfenbachstrasse SO2       µg/m3 17188 #>  8  2010 min30    Zch_Stampfenbachstrasse Hr        %Hr   17492 #>  9  2010 min30    Zch_Stampfenbachstrasse p         hPa   17461 #> 10  2010 min30    Zch_Stampfenbachstrasse RainDur   min   17502 #> # ... with 60 more rows  fn <- system.file(\"extdata\", \"Zch_Rosengartenstrasse_2010-2014.csv\",                   package = \"rOstluft.data\", mustWork = TRUE) df <- rOstluft::read_airmo_csv(fn) store$put(df) #> # A tibble: 18 x 6 #>     year interval site                   parameter unit      n #>    <dbl> <fct>    <fct>                  <fct>     <fct> <int> #>  1  2013 min30    Zch_Rosengartenstrasse NO        µg/m3  4269 #>  2  2013 min30    Zch_Rosengartenstrasse NO2       µg/m3  4269 #>  3  2013 min30    Zch_Rosengartenstrasse NOx       ppb    4269 #>  4  2013 min30    Zch_Rosengartenstrasse O3        µg/m3  4277 #>  5  2013 min30    Zch_Rosengartenstrasse PM10      µg/m3  4025 #>  6  2013 min30    Zch_Rosengartenstrasse Hr        %Hr    4010 #>  7  2013 min30    Zch_Rosengartenstrasse p         hPa    4291 #>  8  2013 min30    Zch_Rosengartenstrasse RainDur   min    4291 #>  9  2013 min30    Zch_Rosengartenstrasse T         °C     4010 #> 10  2014 min30    Zch_Rosengartenstrasse NO        µg/m3 17415 #> 11  2014 min30    Zch_Rosengartenstrasse NO2       µg/m3 17415 #> 12  2014 min30    Zch_Rosengartenstrasse NOx       ppb   17415 #> 13  2014 min30    Zch_Rosengartenstrasse O3        µg/m3 17366 #> 14  2014 min30    Zch_Rosengartenstrasse PM10      µg/m3 16788 #> 15  2014 min30    Zch_Rosengartenstrasse Hr        %Hr   17517 #> 16  2014 min30    Zch_Rosengartenstrasse p         hPa   17519 #> 17  2014 min30    Zch_Rosengartenstrasse RainDur   min   17519 #> 18  2014 min30    Zch_Rosengartenstrasse T         °C    17517  ## get all data min30 for 2011 and 2012 store$get(site = \"Zch_Stampfenbachstrasse\", interval = \"min30\", year = 2011:2012) #> # A tibble: 488,322 x 6 #>    starttime           site                    parameter interval unit    value #>    <dttm>              <fct>                   <fct>     <fct>    <fct>   <dbl> #>  1 2011-01-01 00:00:00 Zch_Stampfenbachstrasse CO        min30    mg/m3   0.611 #>  2 2011-01-01 00:00:00 Zch_Stampfenbachstrasse NO        min30    µg/m3  26.2   #>  3 2011-01-01 00:00:00 Zch_Stampfenbachstrasse NO2       min30    µg/m3  42.1   #>  4 2011-01-01 00:00:00 Zch_Stampfenbachstrasse NOx       min30    ppb    43.0   #>  5 2011-01-01 00:00:00 Zch_Stampfenbachstrasse O3        min30    µg/m3   2.19  #>  6 2011-01-01 00:00:00 Zch_Stampfenbachstrasse PM10      min30    µg/m3  84.0   #>  7 2011-01-01 00:00:00 Zch_Stampfenbachstrasse SO2       min30    µg/m3   5.07  #>  8 2011-01-01 00:00:00 Zch_Stampfenbachstrasse Hr        min30    %Hr    91.9   #>  9 2011-01-01 00:00:00 Zch_Stampfenbachstrasse p         min30    hPa   971.    #> 10 2011-01-01 00:00:00 Zch_Stampfenbachstrasse RainDur   min30    min     0     #> # ... with 488,312 more rows  ## get only data for O3 store$get(year = 2011:2012, site = \"Zch_Stampfenbachstrasse\", interval = \"min30\",           filter = parameter == \"O3\") #> # A tibble: 34,996 x 6 #>    starttime           site                    parameter interval unit  value #>    <dttm>              <fct>                   <fct>     <fct>    <fct> <dbl> #>  1 2011-01-01 00:00:00 Zch_Stampfenbachstrasse O3        min30    µg/m3  2.19 #>  2 2011-01-01 00:30:00 Zch_Stampfenbachstrasse O3        min30    µg/m3  2.10 #>  3 2011-01-01 01:00:00 Zch_Stampfenbachstrasse O3        min30    µg/m3  2.10 #>  4 2011-01-01 01:30:00 Zch_Stampfenbachstrasse O3        min30    µg/m3  2.00 #>  5 2011-01-01 02:00:00 Zch_Stampfenbachstrasse O3        min30    µg/m3  2.04 #>  6 2011-01-01 02:30:00 Zch_Stampfenbachstrasse O3        min30    µg/m3  2.09 #>  7 2011-01-01 03:00:00 Zch_Stampfenbachstrasse O3        min30    µg/m3  1.94 #>  8 2011-01-01 03:30:00 Zch_Stampfenbachstrasse O3        min30    µg/m3  2.04 #>  9 2011-01-01 04:00:00 Zch_Stampfenbachstrasse O3        min30    µg/m3  6.19 #> 10 2011-01-01 04:30:00 Zch_Stampfenbachstrasse O3        min30    µg/m3 37.3  #> # ... with 34,986 more rows  ## get NOx data from multiple stations store$get(site = c(\"Zch_Stampfenbachstrasse\", \"Zch_Rosengartenstrasse\"), interval = \"min30\",           year = 2014, filter = parameter %in% c(\"NOx\", \"NO\", \"NO2\")) #> # A tibble: 104,547 x 6 #>    starttime           site                   parameter interval unit  value #>    <dttm>              <fct>                  <fct>     <fct>    <fct> <dbl> #>  1 2014-01-01 00:00:00 Zch_Rosengartenstrasse NO        min30    µg/m3  53.3 #>  2 2014-01-01 00:00:00 Zch_Rosengartenstrasse NO2       min30    µg/m3  35.6 #>  3 2014-01-01 00:00:00 Zch_Rosengartenstrasse NOx       min30    ppb    61.4 #>  4 2014-01-01 00:30:00 Zch_Rosengartenstrasse NO        min30    µg/m3  69.7 #>  5 2014-01-01 00:30:00 Zch_Rosengartenstrasse NO2       min30    µg/m3  40.7 #>  6 2014-01-01 00:30:00 Zch_Rosengartenstrasse NOx       min30    ppb    77.2 #>  7 2014-01-01 01:00:00 Zch_Rosengartenstrasse NO        min30    µg/m3 110.  #>  8 2014-01-01 01:00:00 Zch_Rosengartenstrasse NO2       min30    µg/m3  54.0 #>  9 2014-01-01 01:00:00 Zch_Rosengartenstrasse NOx       min30    ppb   116.  #> 10 2014-01-01 01:30:00 Zch_Rosengartenstrasse NO        min30    µg/m3 131.  #> # ... with 104,537 more rows  ## get n data points grouped by intervall, station, parameter, year in the store store$get_content() #> # A tibble: 88 x 6 #>     year interval site                   parameter unit      n #>    <dbl> <fct>    <fct>                  <fct>     <fct> <int> #>  1  2014 min30    Zch_Rosengartenstrasse NO        µg/m3 17415 #>  2  2014 min30    Zch_Rosengartenstrasse NO2       µg/m3 17415 #>  3  2014 min30    Zch_Rosengartenstrasse NOx       ppb   17415 #>  4  2014 min30    Zch_Rosengartenstrasse O3        µg/m3 17366 #>  5  2014 min30    Zch_Rosengartenstrasse PM10      µg/m3 16788 #>  6  2014 min30    Zch_Rosengartenstrasse Hr        %Hr   17517 #>  7  2014 min30    Zch_Rosengartenstrasse p         hPa   17519 #>  8  2014 min30    Zch_Rosengartenstrasse RainDur   min   17519 #>  9  2014 min30    Zch_Rosengartenstrasse T         °C    17517 #> 10  2013 min30    Zch_Rosengartenstrasse NO        µg/m3  4269 #> # ... with 78 more rows  ## get list of all chunks store$list_chunks() #> # A tibble: 7 x 7 #>   chunk_name   interval site   year  local.path   local.modification~ local.size #>   <fs::path>   <chr>    <chr>  <chr> <fs::path>   <dttm>              <fs::byte> #> 1 ~c2XCuzIwMTM min30    Zch_R~ 2013  ~uzIwMTM.rds 2022-03-15 10:44:31    214.18K #> 2 ~c2XCuzIwMTQ min30    Zch_R~ 2014  ~uzIwMTQ.rds 2022-03-15 10:44:32    862.36K #> 3 ~3NlwrsyMDE0 min30    Zch_S~ 2014  ~rsyMDE0.rds 2022-03-15 10:44:31      1.36M #> 4 ~3NlwrsyMDEw min30    Zch_S~ 2010  ~rsyMDEw.rds 2022-03-15 10:44:30      1.35M #> 5 ~3NlwrsyMDEx min30    Zch_S~ 2011  ~rsyMDEx.rds 2022-03-15 10:44:30      1.35M #> 6 ~3NlwrsyMDEy min30    Zch_S~ 2012  ~rsyMDEy.rds 2022-03-15 10:44:30      1.36M #> 7 ~3NlwrsyMDEz min30    Zch_S~ 2013  ~rsyMDEz.rds 2022-03-15 10:44:31      1.36M  ## destroy store (careful removes all files on the disk) store$destroy(\"DELETE\") #> Store example_rOstluft destroyed  ## missing examples for meta functions"},{"path":"https://ostluft.github.io/rOstluft/reference/r6_storage_s3.html","id":null,"dir":"Reference","previous_headings":"","what":"s3 storage — r6_storage_s3","title":"s3 storage — r6_storage_s3","text":"s3 storage flexible file format (default rds). data format defines data chunks per file. data cached locally. local cache can used local storage. performance enhancement recommended acquiring needed data s3 use cache local storage. See storage_local_rds() Informations.","code":""},{"path":"https://ostluft.github.io/rOstluft/reference/r6_storage_s3.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"s3 storage — r6_storage_s3","text":"","code":"storage_s3_rds(   name,   format,   bucket,   prefix = NULL,   region = NULL,   read.only = TRUE )"},{"path":"https://ostluft.github.io/rOstluft/reference/r6_storage_s3.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"s3 storage — r6_storage_s3","text":"name name store format data format store bucket name aws s3 prefix aws s3 region aws region read.read store. disables put, upload","code":""},{"path":"https://ostluft.github.io/rOstluft/reference/r6_storage_s3.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"s3 storage — r6_storage_s3","text":"R6 class object storage_s3","code":""},{"path":"https://ostluft.github.io/rOstluft/reference/r6_storage_s3.html","id":"fields","dir":"Reference","previous_headings":"","what":"Fields","title":"s3 storage — r6_storage_s3","text":"name name store format data format store bucket s3 bucket containing store region aws region bucket prefix s3 object keys. see Object Key Metadata path local root store data_path local root chunks data_s3 s3 root key chunks content_path local path rds file containing statistics store content content_s3 s3 object key rds file containing statistics store content columns_path local path rds file containing exact column types store content columns_s3 s3 object key rds file containing exact column types store content meta_path local root meta data files meta_s3 s3 root key meta data files read.flag read.usage store. Default TRUE ext file extension chunks. Default \"rds\" read_function function(file) reading chunks disk. Default base::readRDS() write_function function(object, file) writing chunks disk. Default base::saveRDS()","code":""},{"path":"https://ostluft.github.io/rOstluft/reference/r6_storage_s3.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"s3 storage — r6_storage_s3","text":"$get(filter=NULL, ...) get data store. name arguments depend format. filter argument applied chunk. $download(...) downloads data s3 local cache. dots arguments used filter output list_chunks(). matching rows downloaded. $put(data) puts data store. Stops store read $upload() uploads content, meta data new changed chunks s3 storage. big additions store recommend way use local storage modify cache use function apply change. $get_content() returns tibble amount data points per chunk per series $list_chunks() get list chunks s3 local $get_meta(key=NULL) get meta data. key omitted returns content files named list tibbles, file name without extension name. key supplied argument list contains specified key. $put_meta(...) puts meta data store. name argument used file name value data. $get_local_storage() returns storage work cached data like local storage $destroy(confirmation) removes files path file system \"DELETE\" supplied confirmation","code":""},{"path":"https://ostluft.github.io/rOstluft/reference/r6_storage_s3.html","id":"authentication","dir":"Reference","previous_headings":"","what":"Authentication","title":"s3 storage — r6_storage_s3","text":"See documentation aws.signature ways provide necessary informations. simplest way use environment variables defined .Renviron file root directory RStudio Project:","code":"AWS_ACCESS_KEY_ID = \"xxxxxxxxxxxxxxxxxx\" AWS_SECRET_ACCESS_KEY = \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\" AWS_DEFAULT_REGION = \"eu-central-1\""},{"path":"https://ostluft.github.io/rOstluft/reference/r6_storage_s3.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"s3 storage — r6_storage_s3","text":"","code":"## init store, creates directory if necessary format <- rOstluft::format_rolf() store <- rOstluft::storage_s3_rds(\"s3_example\", format, \"rostluft\", prefix = \"aqmet\")  ## get all data min30 for 2011 and 2012 store$get(site = \"Zch_Stampfenbachstrasse\", interval = \"min30\", year = 2011:2012) #> # A tibble: 523,318 x 6 #>    starttime           site                    parameter interval unit   value #>    <dttm>              <fct>                   <fct>     <fct>    <fct>  <dbl> #>  1 2011-01-01 00:00:00 Zch_Stampfenbachstrasse O3        min30    µg/m3  2.19  #>  2 2011-01-01 00:00:00 Zch_Stampfenbachstrasse CO        min30    ppm    0.525 #>  3 2011-01-01 00:00:00 Zch_Stampfenbachstrasse Hr        min30    %Hr   91.9   #>  4 2011-01-01 00:00:00 Zch_Stampfenbachstrasse NO2       min30    ppb   22.0   #>  5 2011-01-01 00:00:00 Zch_Stampfenbachstrasse NO        min30    ppb   21.0   #>  6 2011-01-01 00:00:00 Zch_Stampfenbachstrasse NOx       min30    ppb   43.0   #>  7 2011-01-01 00:00:00 Zch_Stampfenbachstrasse O3        min30    ppb    1.10  #>  8 2011-01-01 00:00:00 Zch_Stampfenbachstrasse PM10      min30    µg/m3 84.0   #>  9 2011-01-01 00:00:00 Zch_Stampfenbachstrasse RainDur   min30    min    0     #> 10 2011-01-01 00:00:00 Zch_Stampfenbachstrasse SO2       min30    ppb    1.90  #> # ... with 523,308 more rows  ## get only data for O3 store$get(year = 2011:2012, site = \"Zch_Stampfenbachstrasse\", interval = \"min30\",           filter = parameter == \"O3\") #> # A tibble: 69,992 x 6 #>    starttime           site                    parameter interval unit  value #>    <dttm>              <fct>                   <fct>     <fct>    <fct> <dbl> #>  1 2011-01-01 00:00:00 Zch_Stampfenbachstrasse O3        min30    µg/m3  2.19 #>  2 2011-01-01 00:00:00 Zch_Stampfenbachstrasse O3        min30    ppb    1.10 #>  3 2011-01-01 00:30:00 Zch_Stampfenbachstrasse O3        min30    µg/m3  2.10 #>  4 2011-01-01 00:30:00 Zch_Stampfenbachstrasse O3        min30    ppb    1.05 #>  5 2011-01-01 01:00:00 Zch_Stampfenbachstrasse O3        min30    µg/m3  2.10 #>  6 2011-01-01 01:00:00 Zch_Stampfenbachstrasse O3        min30    ppb    1.05 #>  7 2011-01-01 01:30:00 Zch_Stampfenbachstrasse O3        min30    µg/m3  2.00 #>  8 2011-01-01 01:30:00 Zch_Stampfenbachstrasse O3        min30    ppb    1.00 #>  9 2011-01-01 02:00:00 Zch_Stampfenbachstrasse O3        min30    µg/m3  2.04 #> 10 2011-01-01 02:00:00 Zch_Stampfenbachstrasse O3        min30    ppb    1.02 #> # ... with 69,982 more rows  ## get NOx data from multiple stations store$get(site = c(\"Zch_Stampfenbachstrasse\", \"Zch_Rosengartenstrasse\"), interval = \"min30\",           year = 2014, filter = parameter %in% c(\"NOx\", \"NO\", \"NO2\")) #> # A tibble: 104,547 x 6 #>    starttime           site                   parameter interval unit  value #>    <dttm>              <fct>                  <fct>     <fct>    <fct> <dbl> #>  1 2014-01-01 00:00:00 Zch_Rosengartenstrasse NO2       min30    ppb    18.6 #>  2 2014-01-01 00:00:00 Zch_Rosengartenstrasse NO        min30    ppb    42.8 #>  3 2014-01-01 00:00:00 Zch_Rosengartenstrasse NOx       min30    ppb    61.4 #>  4 2014-01-01 00:30:00 Zch_Rosengartenstrasse NO2       min30    ppb    21.3 #>  5 2014-01-01 00:30:00 Zch_Rosengartenstrasse NO        min30    ppb    55.9 #>  6 2014-01-01 00:30:00 Zch_Rosengartenstrasse NOx       min30    ppb    77.2 #>  7 2014-01-01 01:00:00 Zch_Rosengartenstrasse NO2       min30    ppb    28.2 #>  8 2014-01-01 01:00:00 Zch_Rosengartenstrasse NO        min30    ppb    88.1 #>  9 2014-01-01 01:00:00 Zch_Rosengartenstrasse NOx       min30    ppb   116.  #> 10 2014-01-01 01:30:00 Zch_Rosengartenstrasse NO2       min30    ppb    39.8 #> # ... with 104,537 more rows  ## get n data points grouped by intervall, station, parameter, year in the store store$get_content() #> # A tibble: 193,549 x 6 #>     year interval site          parameter unit      n #>    <dbl> <fct>    <fct>         <fct>     <fct> <int> #>  1  2020 y1       Wgi_Weiertal  NH3       µg/m3     1 #>  2  2020 y1       WeF_Weid      NH3       µg/m3     1 #>  3  2020 y1       Wdi_Waldhof   NH3       µg/m3     1 #>  4  2020 y1       Tan_NABEL     NH3       µg/m3     1 #>  5  2020 y1       SHn_Ebnet     NH3       µg/m3     1 #>  6  2020 y1       Rap_Hochhaus  NH3       µg/m3     1 #>  7  2020 y1       Oeg_St.Anton  NH3       µg/m3     1 #>  8  2020 y1       LaR_Grabewis  NH3       µg/m3     1 #>  9  2020 y1       Gon_Gontenbad NH3       µg/m3     1 #> 10  2020 y1       Fra_Sand      NH3       µg/m3     1 #> # ... with 193,539 more rows  ## get list of all chunks, show only local files dplyr::filter(store$list_chunks(), !is.na(local.path)) #> # A tibble: 20 x 11 #>    chunk_name   interval site   year  s3.key    s3.lastmodified s3.etag  s3.size #>    <fs::path>   <chr>    <chr>  <chr> <chr>     <chr>           <chr>    <fs::b> #>  1 ~c2XCuzIwMTM d1       Zch_R~ 2013  aqmet/da~ 2021-04-18T08:~ 7d432cd~  19.84K #>  2 ~c2XCuzIwMTQ d1       Zch_R~ 2014  aqmet/da~ 2021-04-18T08:~ 19630b9~  76.76K #>  3 ~c2XCuzIwMTU d1       Zch_R~ 2015  aqmet/da~ 2021-04-18T08:~ 4909442~  86.04K #>  4 ~c2XCuzIwMTM h1       Zch_R~ 2013  aqmet/da~ 2021-04-18T08:~ 7a8a700~ 112.38K #>  5 ~c2XCuzIwMTQ h1       Zch_R~ 2014  aqmet/da~ 2021-04-18T08:~ a289ca4~ 447.54K #>  6 ~c2XCuzIwMTU h1       Zch_R~ 2015  aqmet/da~ 2021-04-18T08:~ 2382520~ 567.64K #>  7 ~zZcK7MjAxMw h8gl     Zch_R~ 2013  aqmet/da~ 2021-04-18T08:~ c0c2b8c~  23.56K #>  8 ~zZcK7MjAxNA h8gl     Zch_R~ 2014  aqmet/da~ 2021-04-18T08:~ 4f559bf~  93.14K #>  9 ~zZcK7MjAxNQ h8gl     Zch_R~ 2015  aqmet/da~ 2021-04-18T08:~ 1db43d3~   92.2K #> 10 ~c2XCuzIwMTM m1       Zch_R~ 2013  aqmet/da~ 2021-04-18T08:~ 8c9f389~   2.08K #> 11 ~c2XCuzIwMTQ m1       Zch_R~ 2014  aqmet/da~ 2021-04-18T08:~ 175b6ac~   5.64K #> 12 ~c2XCuzIwMTU m1       Zch_R~ 2015  aqmet/da~ 2021-04-18T08:~ 4798271~   6.02K #> 13 ~c2XCuzIwMTM min30    Zch_R~ 2013  aqmet/da~ 2021-04-18T08:~ 891111f~ 203.55K #> 14 ~c2XCuzIwMTQ min30    Zch_R~ 2014  aqmet/da~ 2021-04-18T08:~ 4dce887~ 808.31K #> 15 ~c2XCuzIwMTU min30    Zch_R~ 2015  aqmet/da~ 2021-04-18T08:~ 026f2ae~ 924.68K #> 16 ~3NlwrsyMDE0 min30    Zch_S~ 2014  aqmet/da~ 2021-04-18T08:~ 7539d5f~   1.22M #> 17 ~3NlwrsyMDEx min30    Zch_S~ 2011  aqmet/da~ 2021-04-18T08:~ e65eff0~   1.21M #> 18 ~3NlwrsyMDEy min30    Zch_S~ 2012  aqmet/da~ 2021-04-18T08:~ 6e51bfa~   1.22M #> 19 ~c2XCuzIwMTQ y1       Zch_R~ 2014  aqmet/da~ 2021-04-18T08:~ 4f48153~   1.49K #> 20 ~c2XCuzIwMTU y1       Zch_R~ 2015  aqmet/da~ 2021-04-18T08:~ 3c127a6~   1.48K #> # ... with 3 more variables: local.path <fs::path>, #> #   local.modification_time <dttm>, local.size <fs::bytes>  ## download all data for site Zch_Rosengartenstrasse before 2016 store$download(site == \"Zch_Rosengartenstrasse\", year < 2016) #> list()  ## now there should be 2 more local files dplyr::filter(store$list_chunks(), !is.na(local.path)) #> # A tibble: 20 x 11 #>    chunk_name   interval site   year  s3.key    s3.lastmodified s3.etag  s3.size #>    <fs::path>   <chr>    <chr>  <chr> <chr>     <chr>           <chr>    <fs::b> #>  1 ~c2XCuzIwMTM d1       Zch_R~ 2013  aqmet/da~ 2021-04-18T08:~ 7d432cd~  19.84K #>  2 ~c2XCuzIwMTQ d1       Zch_R~ 2014  aqmet/da~ 2021-04-18T08:~ 19630b9~  76.76K #>  3 ~c2XCuzIwMTU d1       Zch_R~ 2015  aqmet/da~ 2021-04-18T08:~ 4909442~  86.04K #>  4 ~c2XCuzIwMTM h1       Zch_R~ 2013  aqmet/da~ 2021-04-18T08:~ 7a8a700~ 112.38K #>  5 ~c2XCuzIwMTQ h1       Zch_R~ 2014  aqmet/da~ 2021-04-18T08:~ a289ca4~ 447.54K #>  6 ~c2XCuzIwMTU h1       Zch_R~ 2015  aqmet/da~ 2021-04-18T08:~ 2382520~ 567.64K #>  7 ~zZcK7MjAxMw h8gl     Zch_R~ 2013  aqmet/da~ 2021-04-18T08:~ c0c2b8c~  23.56K #>  8 ~zZcK7MjAxNA h8gl     Zch_R~ 2014  aqmet/da~ 2021-04-18T08:~ 4f559bf~  93.14K #>  9 ~zZcK7MjAxNQ h8gl     Zch_R~ 2015  aqmet/da~ 2021-04-18T08:~ 1db43d3~   92.2K #> 10 ~c2XCuzIwMTM m1       Zch_R~ 2013  aqmet/da~ 2021-04-18T08:~ 8c9f389~   2.08K #> 11 ~c2XCuzIwMTQ m1       Zch_R~ 2014  aqmet/da~ 2021-04-18T08:~ 175b6ac~   5.64K #> 12 ~c2XCuzIwMTU m1       Zch_R~ 2015  aqmet/da~ 2021-04-18T08:~ 4798271~   6.02K #> 13 ~c2XCuzIwMTM min30    Zch_R~ 2013  aqmet/da~ 2021-04-18T08:~ 891111f~ 203.55K #> 14 ~c2XCuzIwMTQ min30    Zch_R~ 2014  aqmet/da~ 2021-04-18T08:~ 4dce887~ 808.31K #> 15 ~c2XCuzIwMTU min30    Zch_R~ 2015  aqmet/da~ 2021-04-18T08:~ 026f2ae~ 924.68K #> 16 ~3NlwrsyMDE0 min30    Zch_S~ 2014  aqmet/da~ 2021-04-18T08:~ 7539d5f~   1.22M #> 17 ~3NlwrsyMDEx min30    Zch_S~ 2011  aqmet/da~ 2021-04-18T08:~ e65eff0~   1.21M #> 18 ~3NlwrsyMDEy min30    Zch_S~ 2012  aqmet/da~ 2021-04-18T08:~ 6e51bfa~   1.22M #> 19 ~c2XCuzIwMTQ y1       Zch_R~ 2014  aqmet/da~ 2021-04-18T08:~ 4f48153~   1.49K #> 20 ~c2XCuzIwMTU y1       Zch_R~ 2015  aqmet/da~ 2021-04-18T08:~ 3c127a6~   1.48K #> # ... with 3 more variables: local.path <fs::path>, #> #   local.modification_time <dttm>, local.size <fs::bytes>  ## get all meta data store$get_meta() #> $all #> # A tibble: 2,057 x 12 #>    site    site_short site_long        x      y  masl parameter_origi~ parameter #>    <chr>   <chr>      <chr>        <dbl>  <dbl> <dbl> <chr>            <chr>     #>  1 Arb_St~ ARBS       Arbon Stad~ 2.75e6 1.26e6   407 Hr               Hr        #>  2 Arb_St~ ARBS       Arbon Stad~ 2.75e6 1.26e6   407 NO               NO        #>  3 Arb_St~ ARBS       Arbon Stad~ 2.75e6 1.26e6   407 NO2              NO2       #>  4 Arb_St~ ARBS       Arbon Stad~ 2.75e6 1.26e6   407 NOx              NOx       #>  5 Arb_St~ ARBS       Arbon Stad~ 2.75e6 1.26e6   407 O3               O3        #>  6 Arb_St~ ARBS       Arbon Stad~ 2.75e6 1.26e6   407 Ox               Ox        #>  7 Arb_St~ ARBS       Arbon Stad~ 2.75e6 1.26e6   407 p                p         #>  8 Arb_St~ ARBS       Arbon Stad~ 2.75e6 1.26e6   407 PM10             PM10      #>  9 Arb_St~ ARBS       Arbon Stad~ 2.75e6 1.26e6   407 SO2              SO2       #> 10 Arb_St~ ARBS       Arbon Stad~ 2.75e6 1.26e6   407 StrGlo           StrGlo    #> # ... with 2,047 more rows, and 4 more variables: unit <chr>, interval <chr>, #> #   timezone_original <chr>, source <chr> #>  #> $ecmwf #> # A tibble: 96 x 14 #>    site_short site   site_long   lon   lat masl  parameter_origi~ unit  interval #>    <chr>      <chr>  <lgl>     <dbl> <dbl> <lgl> <chr>            <chr> <chr>    #>  1 ZH_EraI    Züric~ NA         8.25  47.2 NA    t2m              K     h1       #>  2 ZH_EraI    Züric~ NA         8.25  47.2 NA    swvl1            m3/m3 h1       #>  3 ZH_EraI    Züric~ NA         8.25  47.2 NA    sp               hPa   h1       #>  4 ZH_EraI    Züric~ NA         8.25  47.2 NA    u10              m/s   h1       #>  5 ZH_EraI    Züric~ NA         8.25  47.2 NA    v10              m/s   h1       #>  6 ZH_EraI    Züric~ NA         8.25  47.2 NA    skt              K     h1       #>  7 ZH_EraI    Züric~ NA         8.25  47.2 NA    ishf             W/m2  h1       #>  8 ZH_EraI    Züric~ NA         8.25  47.2 NA    tp               m     h1       #>  9 ZH_EraI    Züric~ NA         8.25  47.2 NA    tco3             kg/m2 h1       #> 10 ZH_EraI    Züric~ NA         8.25  47.2 NA    sund             s     h1       #> # ... with 86 more rows, and 5 more variables: timezone_original <chr>, #> #   source <chr>, x <dbl>, y <dbl>, parameter <chr> #>  #> $ethz #> # A tibble: 28 x 14 #>    parameter_origin~ unit  site_short site_long site    lon   lat  masl interval #>    <chr>             <chr> <chr>      <lgl>     <chr> <dbl> <dbl> <dbl> <chr>    #>  1 p_air             hPa   ETHZ_CHN   NA        ETHZ~  8.55  47.4   510 min10    #>  2 T_air             °C    ETHZ_CHN   NA        ETHZ~  8.55  47.4   510 min10    #>  3 T_dew             °C    ETHZ_CHN   NA        ETHZ~  8.55  47.4   510 min10    #>  4 RH                %     ETHZ_CHN   NA        ETHZ~  8.55  47.4   510 min10    #>  5 illum             log1~ ETHZ_CHN   NA        ETHZ~  8.55  47.4   510 min10    #>  6 rain              mm    ETHZ_CHN   NA        ETHZ~  8.55  47.4   510 min10    #>  7 wspd_vec          m/s   ETHZ_CHN   NA        ETHZ~  8.55  47.4   510 min10    #>  8 wspd_scl          m/s   ETHZ_CHN   NA        ETHZ~  8.55  47.4   510 min10    #>  9 wdir              °     ETHZ_CHN   NA        ETHZ~  8.55  47.4   510 min10    #> 10 wspd_pk           m/s   ETHZ_CHN   NA        ETHZ~  8.55  47.4   510 min10    #> # ... with 18 more rows, and 5 more variables: timezone_original <chr>, #> #   source <chr>, x <dbl>, y <dbl>, parameter <chr> #>  #> $hysplit #> # A tibble: 2 x 12 #>   site_short  site  site_long lon   lat   masl  parameter_origi~ parameter unit  #>   <chr>       <chr> <chr>     <lgl> <lgl> <lgl> <chr>            <chr>     <lgl> #> 1 ZH-Kaserne~ ZH_K~ Zürich_K~ NA    NA    NA    hysplit_cluster  hysplit_~ NA    #> 2 SG-BP-hysp~ SG_B~ St. Gall~ NA    NA    NA    hysplit_cluster  hysplit_~ NA    #> # ... with 3 more variables: interval <chr>, timezone_original <chr>, #> #   source <chr> #>  #> $hysplit_cluster_trajectories #> # A tibble: 1,164 x 7 #> # Groups:   cluster [6] #>    cluster hour.inc default            lat   lon date                site        #>      <dbl>    <dbl> <fct>            <dbl> <dbl> <dttm>              <fct>       #>  1       1      -96 01 January 1980~  48.6 -13.3 2000-07-20 06:49:23 SG_Blumenb~ #>  2       1      -95 01 January 1980~  48.5 -13.0 2000-07-20 06:49:23 SG_Blumenb~ #>  3       1      -94 01 January 1980~  48.5 -12.7 2000-07-20 06:49:23 SG_Blumenb~ #>  4       1      -93 01 January 1980~  48.5 -12.4 2000-07-20 06:49:23 SG_Blumenb~ #>  5       1      -92 01 January 1980~  48.4 -12.1 2000-07-20 06:49:23 SG_Blumenb~ #>  6       1      -91 01 January 1980~  48.4 -11.8 2000-07-20 06:49:23 SG_Blumenb~ #>  7       1      -90 01 January 1980~  48.3 -11.5 2000-07-20 06:49:23 SG_Blumenb~ #>  8       1      -89 01 January 1980~  48.3 -11.2 2000-07-20 06:49:23 SG_Blumenb~ #>  9       1      -88 01 January 1980~  48.2 -10.9 2000-07-20 06:49:23 SG_Blumenb~ #> 10       1      -87 01 January 1980~  48.2 -10.6 2000-07-20 06:49:23 SG_Blumenb~ #> # ... with 1,154 more rows #>  #> $meteoschweiz #> # A tibble: 265 x 15 #>    site_short site    Länge Breite       x      y  masl parameter_origi~ source  #>    <chr>      <chr>   <chr> <chr>    <dbl>  <dbl> <dbl> <chr>            <chr>   #>  1 TAE        Aadorf~ 8°54' 47°29' 2710517 1.26e6   539 tre200s0         MeteoS~ #>  2 TAE        Aadorf~ 8°54' 47°29' 2710517 1.26e6   539 ure200s0         MeteoS~ #>  3 TAE        Aadorf~ 8°54' 47°29' 2710517 1.26e6   539 prestas0         MeteoS~ #>  4 TAE        Aadorf~ 8°54' 47°29' 2710517 1.26e6   539 prestas0         MeteoS~ #>  5 TAE        Aadorf~ 8°54' 47°29' 2710517 1.26e6   539 fkl010z1         MeteoS~ #>  6 TAE        Aadorf~ 8°54' 47°29' 2710517 1.26e6   539 fkl010z0         MeteoS~ #>  7 TAE        Aadorf~ 8°54' 47°29' 2710517 1.26e6   539 dkl010z0         MeteoS~ #>  8 TAE        Aadorf~ 8°54' 47°29' 2710517 1.26e6   539 sre000z0         MeteoS~ #>  9 TAE        Aadorf~ 8°54' 47°29' 2710517 1.26e6   539 sre000z0         MeteoS~ #> 10 TAE        Aadorf~ 8°54' 47°29' 2710517 1.26e6   539 gre000z0         MeteoS~ #> # ... with 255 more rows, and 6 more variables: unit <chr>, Beschreibung <chr>, #> #   timezone_original <chr>, site_long <lgl>, interval <chr>, parameter <chr> #>  #> $meteotest #> # A tibble: 2 x 12 #>   site_short site_long site   lon   lat    masl parameter_origi~ parameter unit  #>   <chr>      <lgl>     <chr>  <lgl> <lgl> <dbl> <chr>            <chr>     <chr> #> 1 SMA_23m    NA        Züric~ NA    NA      581 ta1tows0         T         °C    #> 2 ZUEberg    NA        Züric~ NA    NA      729 ta1tows0         T         °C    #> # ... with 3 more variables: interval <chr>, timezone_original <chr>, #> #   source <chr> #>  #> $nabel #> # A tibble: 406 x 31 #>     msID site   site_short msNameKurz  site_long  msKT  msOrt msOrtsteil msNABEL #>    <int> <chr>  <chr>      <chr>       <chr>      <chr> <chr> <chr>        <int> #>  1  1084 Züric~ NA         Zürich-Kas~ Zürich-Ka~ ZH    Züri~ NABEL            1 #>  2  1084 Züric~ NA         Zürich-Kas~ Zürich-Ka~ ZH    Züri~ NABEL            1 #>  3  1084 Züric~ NA         Zürich-Kas~ Zürich-Ka~ ZH    Züri~ NABEL            1 #>  4  1084 Züric~ NA         Zürich-Kas~ Zürich-Ka~ ZH    Züri~ NABEL            1 #>  5  1084 Züric~ NA         Zürich-Kas~ Zürich-Ka~ ZH    Züri~ NABEL            1 #>  6  1084 Züric~ NA         Zürich-Kas~ Zürich-Ka~ ZH    Züri~ NABEL            1 #>  7  1084 Züric~ NA         Zürich-Kas~ Zürich-Ka~ ZH    Züri~ NABEL            1 #>  8  1084 Züric~ NA         Zürich-Kas~ Zürich-Ka~ ZH    Züri~ NABEL            1 #>  9  1084 Züric~ NA         Zürich-Kas~ Zürich-Ka~ ZH    Züri~ NABEL            1 #> 10  1084 Züric~ NA         Zürich-Kas~ Zürich-Ka~ ZH    Züri~ NABEL            1 #> # ... with 396 more rows, and 22 more variables: scDTV <chr>, scDTVJahr <chr>, #> #   scLKWProzent <int>, scStrassenabstand <int>, scEinwohner <int>, #> #   scEinwohnerJahr <chr>, scVerkehrslage <chr>, scSiedlungsgroesse <chr>, #> #   scLagerelativSiedlung <chr>, scIDBStandorttyp <chr>, #> #   scIDBStationstyp <chr>, scIDBBebauung <chr>, scIDBVerkehr <chr>, x <int>, #> #   y <int>, masl <int>, msmmBeginn <dttm>, msmmEnde <dttm>, source <chr>, #> #   timezone_original <chr>, parameter_original <chr>, parameter <chr> #>  #> $ostluft #> # A tibble: 1,560 x 31 #>     msID site    site_short msNameKurz  site_long msKT  msOrt msOrtsteil msNABEL #>    <int> <chr>   <chr>      <chr>       <chr>     <chr> <chr> <chr>        <int> #>  1     1 Arb_St~ ARBS       Arbon Stad~ Arbon St~ TG    Arbon Stadthaus        2 #>  2     1 Arb_St~ ARBS       Arbon Stad~ Arbon St~ TG    Arbon Stadthaus        2 #>  3     1 Arb_St~ ARBS       Arbon Stad~ Arbon St~ TG    Arbon Stadthaus        2 #>  4     1 Arb_St~ ARBS       Arbon Stad~ Arbon St~ TG    Arbon Stadthaus        2 #>  5     1 Arb_St~ ARBS       Arbon Stad~ Arbon St~ TG    Arbon Stadthaus        2 #>  6     1 Arb_St~ ARBS       Arbon Stad~ Arbon St~ TG    Arbon Stadthaus        2 #>  7     1 Arb_St~ ARBS       Arbon Stad~ Arbon St~ TG    Arbon Stadthaus        2 #>  8     1 Arb_St~ ARBS       Arbon Stad~ Arbon St~ TG    Arbon Stadthaus        2 #>  9     1 Arb_St~ ARBS       Arbon Stad~ Arbon St~ TG    Arbon Stadthaus        2 #> 10     1 Arb_St~ ARBS       Arbon Stad~ Arbon St~ TG    Arbon Stadthaus        2 #> # ... with 1,550 more rows, and 22 more variables: scDTV <chr>, #> #   scDTVJahr <chr>, scLKWProzent <int>, scStrassenabstand <int>, #> #   scEinwohner <int>, scEinwohnerJahr <chr>, scVerkehrslage <chr>, #> #   scSiedlungsgroesse <chr>, scLagerelativSiedlung <chr>, #> #   scIDBStandorttyp <chr>, scIDBStationstyp <chr>, scIDBBebauung <chr>, #> #   scIDBVerkehr <chr>, x <int>, y <int>, masl <int>, parameter <chr>, #> #   msmmBeginn <dttm>, msmmEnde <dttm>, source <chr>, ... #>  #> $seepolizei #> # A tibble: 30 x 14 #>    parameter_origin~ unit  site_short site_long site    lon   lat  masl interval #>    <chr>             <chr> <chr>      <lgl>     <chr> <dbl> <dbl> <dbl> <chr>    #>  1 air_temperature   °C    mythenquai NA        ZH_M~  8.54  47.4   407 min10    #>  2 water_temperature °C    mythenquai NA        ZH_M~  8.54  47.4   407 min10    #>  3 wind_gust_max_10~ m/s   mythenquai NA        ZH_M~  8.54  47.4   407 min10    #>  4 wind_speed_avg_1~ m/s   mythenquai NA        ZH_M~  8.54  47.4   407 min10    #>  5 wind_force_avg_1~ bft   mythenquai NA        ZH_M~  8.54  47.4   407 min10    #>  6 wind_direction    °     mythenquai NA        ZH_M~  8.54  47.4   407 min10    #>  7 windchill         °C    mythenquai NA        ZH_M~  8.54  47.4   407 min10    #>  8 barometric_press~ hPa   mythenquai NA        ZH_M~  8.54  47.4   407 min10    #>  9 precipitation     mm    mythenquai NA        ZH_M~  8.54  47.4   407 min10    #> 10 dew_point         °C    mythenquai NA        ZH_M~  8.54  47.4   407 min10    #> # ... with 20 more rows, and 5 more variables: timezone_original <chr>, #> #   source <chr>, x <dbl>, y <dbl>, parameter <chr> #>   ## or a specific meta file store$get_meta(\"ostluft\") #> $ostluft #> # A tibble: 1,560 x 31 #>     msID site    site_short msNameKurz  site_long msKT  msOrt msOrtsteil msNABEL #>    <int> <chr>   <chr>      <chr>       <chr>     <chr> <chr> <chr>        <int> #>  1     1 Arb_St~ ARBS       Arbon Stad~ Arbon St~ TG    Arbon Stadthaus        2 #>  2     1 Arb_St~ ARBS       Arbon Stad~ Arbon St~ TG    Arbon Stadthaus        2 #>  3     1 Arb_St~ ARBS       Arbon Stad~ Arbon St~ TG    Arbon Stadthaus        2 #>  4     1 Arb_St~ ARBS       Arbon Stad~ Arbon St~ TG    Arbon Stadthaus        2 #>  5     1 Arb_St~ ARBS       Arbon Stad~ Arbon St~ TG    Arbon Stadthaus        2 #>  6     1 Arb_St~ ARBS       Arbon Stad~ Arbon St~ TG    Arbon Stadthaus        2 #>  7     1 Arb_St~ ARBS       Arbon Stad~ Arbon St~ TG    Arbon Stadthaus        2 #>  8     1 Arb_St~ ARBS       Arbon Stad~ Arbon St~ TG    Arbon Stadthaus        2 #>  9     1 Arb_St~ ARBS       Arbon Stad~ Arbon St~ TG    Arbon Stadthaus        2 #> 10     1 Arb_St~ ARBS       Arbon Stad~ Arbon St~ TG    Arbon Stadthaus        2 #> # ... with 1,550 more rows, and 22 more variables: scDTV <chr>, #> #   scDTVJahr <chr>, scLKWProzent <int>, scStrassenabstand <int>, #> #   scEinwohner <int>, scEinwohnerJahr <chr>, scVerkehrslage <chr>, #> #   scSiedlungsgroesse <chr>, scLagerelativSiedlung <chr>, #> #   scIDBStandorttyp <chr>, scIDBStationstyp <chr>, scIDBBebauung <chr>, #> #   scIDBVerkehr <chr>, x <int>, y <int>, masl <int>, parameter <chr>, #> #   msmmBeginn <dttm>, msmmEnde <dttm>, source <chr>, ... #>   ## get the cache as local storage local <- store$get_local_storage() local$list_chunks() #> # A tibble: 20 x 7 #>    chunk_name   interval site  year  local.path   local.modification~ local.size #>    <fs::path>   <chr>    <chr> <chr> <fs::path>   <dttm>              <fs::byte> #>  1 ~c2XCuzIwMTM d1       Zch_~ 2013  ~uzIwMTM.rds 2022-03-15 10:39:57     19.84K #>  2 ~c2XCuzIwMTQ d1       Zch_~ 2014  ~uzIwMTQ.rds 2022-03-15 10:39:57     76.76K #>  3 ~c2XCuzIwMTU d1       Zch_~ 2015  ~uzIwMTU.rds 2022-03-15 10:39:57     86.04K #>  4 ~c2XCuzIwMTM h1       Zch_~ 2013  ~uzIwMTM.rds 2022-03-15 10:39:57    112.38K #>  5 ~c2XCuzIwMTQ h1       Zch_~ 2014  ~uzIwMTQ.rds 2022-03-15 10:39:57    447.54K #>  6 ~c2XCuzIwMTU h1       Zch_~ 2015  ~uzIwMTU.rds 2022-03-15 10:39:57    567.64K #>  7 ~zZcK7MjAxMw h8gl     Zch_~ 2013  ~7MjAxMw.rds 2022-03-15 10:39:57     23.56K #>  8 ~zZcK7MjAxNA h8gl     Zch_~ 2014  ~7MjAxNA.rds 2022-03-15 10:39:57     93.14K #>  9 ~zZcK7MjAxNQ h8gl     Zch_~ 2015  ~7MjAxNQ.rds 2022-03-15 10:39:57      92.2K #> 10 ~c2XCuzIwMTM m1       Zch_~ 2013  ~uzIwMTM.rds 2022-03-15 10:39:57      2.08K #> 11 ~c2XCuzIwMTQ m1       Zch_~ 2014  ~uzIwMTQ.rds 2022-03-15 10:39:57      5.64K #> 12 ~c2XCuzIwMTU m1       Zch_~ 2015  ~uzIwMTU.rds 2022-03-15 10:39:57      6.02K #> 13 ~c2XCuzIwMTM min30    Zch_~ 2013  ~uzIwMTM.rds 2022-03-15 10:39:57    203.55K #> 14 ~c2XCuzIwMTQ min30    Zch_~ 2014  ~uzIwMTQ.rds 2022-03-15 10:35:33    808.31K #> 15 ~c2XCuzIwMTU min30    Zch_~ 2015  ~uzIwMTU.rds 2022-03-15 10:39:57    924.68K #> 16 ~3NlwrsyMDE0 min30    Zch_~ 2014  ~rsyMDE0.rds 2022-03-15 10:35:33      1.22M #> 17 ~3NlwrsyMDEx min30    Zch_~ 2011  ~rsyMDEx.rds 2022-03-15 10:35:33      1.21M #> 18 ~3NlwrsyMDEy min30    Zch_~ 2012  ~rsyMDEy.rds 2022-03-15 10:35:33      1.22M #> 19 ~c2XCuzIwMTQ y1       Zch_~ 2014  ~uzIwMTQ.rds 2022-03-15 10:39:58      1.49K #> 20 ~c2XCuzIwMTU y1       Zch_~ 2015  ~uzIwMTU.rds 2022-03-15 10:39:58      1.48K  ## get cached data local$get(site = \"Zch_Stampfenbachstrasse\", interval = \"min30\", year = 2011:2012) #> # A tibble: 523,318 x 6 #>    starttime           site                    parameter interval unit   value #>    <dttm>              <fct>                   <fct>     <fct>    <fct>  <dbl> #>  1 2011-01-01 00:00:00 Zch_Stampfenbachstrasse O3        min30    µg/m3  2.19  #>  2 2011-01-01 00:00:00 Zch_Stampfenbachstrasse CO        min30    ppm    0.525 #>  3 2011-01-01 00:00:00 Zch_Stampfenbachstrasse Hr        min30    %Hr   91.9   #>  4 2011-01-01 00:00:00 Zch_Stampfenbachstrasse NO2       min30    ppb   22.0   #>  5 2011-01-01 00:00:00 Zch_Stampfenbachstrasse NO        min30    ppb   21.0   #>  6 2011-01-01 00:00:00 Zch_Stampfenbachstrasse NOx       min30    ppb   43.0   #>  7 2011-01-01 00:00:00 Zch_Stampfenbachstrasse O3        min30    ppb    1.10  #>  8 2011-01-01 00:00:00 Zch_Stampfenbachstrasse PM10      min30    µg/m3 84.0   #>  9 2011-01-01 00:00:00 Zch_Stampfenbachstrasse RainDur   min30    min    0     #> 10 2011-01-01 00:00:00 Zch_Stampfenbachstrasse SO2       min30    ppb    1.90  #> # ... with 523,308 more rows  ## destroy store (careful removes all files on the disk) store$read.only = FALSE store$destroy(\"DELETE\") #> Cache for Store s3_example destroyed  ## No examples for write operations"},{"path":"https://ostluft.github.io/rOstluft/reference/read_airmo_csv.html","id":null,"dir":"Reference","previous_headings":"","what":"Reads an AIRMO Export in CSV Format — read_airmo_csv","title":"Reads an AIRMO Export in CSV Format — read_airmo_csv","text":"Reads data AIRMO CSV file returns data frame rOstluft long format","code":""},{"path":"https://ostluft.github.io/rOstluft/reference/read_airmo_csv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reads an AIRMO Export in CSV Format — read_airmo_csv","text":"","code":"read_airmo_csv(   fn,   encoding = \"latin1\",   tz = \"Etc/GMT-1\",   time_shift = NULL,   na.rm = TRUE )"},{"path":"https://ostluft.github.io/rOstluft/reference/read_airmo_csv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reads an AIRMO Export in CSV Format — read_airmo_csv","text":"fn CSV file name, can relative current directory absolut encoding CSV file encoding. Default \"latin1\" tz time zone date field. carefull Etc/GMT + == -. Default \"Etc/GMT-1\" time_shift lubridate period add time. Default NULL na.rm remove na (empty) values. Default TRUE","code":""},{"path":"https://ostluft.github.io/rOstluft/reference/read_airmo_csv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reads an AIRMO Export in CSV Format — read_airmo_csv","text":"data frame rOstluft long format","code":""},{"path":[]},{"path":"https://ostluft.github.io/rOstluft/reference/read_airmo_dat.html","id":null,"dir":"Reference","previous_headings":"","what":"Reads an AIRMO Export in DAT Format — read_airmo_dat","title":"Reads an AIRMO Export in DAT Format — read_airmo_dat","text":"Reads data AIRMO DAT file returns data frame rOstluft long format","code":""},{"path":"https://ostluft.github.io/rOstluft/reference/read_airmo_dat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reads an AIRMO Export in DAT Format — read_airmo_dat","text":"","code":"read_airmo_dat(   fn,   encoding = \"latin1\",   tz = \"Etc/GMT-1\",   time_shift = NULL,   na.rm = TRUE )"},{"path":"https://ostluft.github.io/rOstluft/reference/read_airmo_dat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reads an AIRMO Export in DAT Format — read_airmo_dat","text":"fn DAT file name, can relative current directory absolut encoding DAT file encoding. Default \"latin1\" tz time zone date field. carefull Etc/GMT + == -. Default \"Etc/GMT-1\" time_shift lubridate period add time. Default NULL na.rm remove na (empty) values. Default TRUE","code":""},{"path":"https://ostluft.github.io/rOstluft/reference/read_airmo_dat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reads an AIRMO Export in DAT Format — read_airmo_dat","text":"data frame rOstluft long format","code":""},{"path":[]},{"path":"https://ostluft.github.io/rOstluft/reference/read_airmo_webexport.html","id":null,"dir":"Reference","previous_headings":"","what":"Reads an AIRMO Export in CSV Webexport Format — read_airmo_webexport","title":"Reads an AIRMO Export in CSV Webexport Format — read_airmo_webexport","text":"Reads data AIRMO Webexport CSV file returns data frame rOstluft long format","code":""},{"path":"https://ostluft.github.io/rOstluft/reference/read_airmo_webexport.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reads an AIRMO Export in CSV Webexport Format — read_airmo_webexport","text":"","code":"read_airmo_webexport(   fn,   encoding = \"latin1\",   tz = \"Etc/GMT-1\",   time_shift = NULL,   na.rm = TRUE )"},{"path":"https://ostluft.github.io/rOstluft/reference/read_airmo_webexport.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reads an AIRMO Export in CSV Webexport Format — read_airmo_webexport","text":"fn CSV file name, can relative current directory absolut encoding CSV file encoding. Default \"latin1\" tz time zone date field. carefull Etc/GMT + == -. Default \"Etc/GMT-1\" time_shift lubridate period add time. Default NULL na.rm remove na (empty) values. Default TRUE","code":""},{"path":"https://ostluft.github.io/rOstluft/reference/read_airmo_webexport.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reads an AIRMO Export in CSV Webexport Format — read_airmo_webexport","text":"data frame rOstluft long format","code":""},{"path":[]},{"path":"https://ostluft.github.io/rOstluft/reference/read_airmo_webexport.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reads an AIRMO Export in CSV Webexport Format — read_airmo_webexport","text":"","code":"input <- rOstluft.data::f(\"ol_nox_covid19_2020.csv\") read_airmo_webexport(input) #> # A tibble: 60,916 x 6 #>    starttime           site         parameter interval unit  value #>    <dttm>              <fct>        <fct>     <fct>    <fct> <dbl> #>  1 2020-01-01 00:00:00 Opf_Balsberg NOx       min30    ppb    20.0 #>  2 2020-01-01 00:30:00 Opf_Balsberg NOx       min30    ppb    21.5 #>  3 2020-01-01 01:00:00 Opf_Balsberg NOx       min30    ppb    26.1 #>  4 2020-01-01 01:30:00 Opf_Balsberg NOx       min30    ppb    21.5 #>  5 2020-01-01 02:00:00 Opf_Balsberg NOx       min30    ppb    27.3 #>  6 2020-01-01 02:30:00 Opf_Balsberg NOx       min30    ppb    19.9 #>  7 2020-01-01 03:00:00 Opf_Balsberg NOx       min30    ppb    17.7 #>  8 2020-01-01 03:30:00 Opf_Balsberg NOx       min30    ppb    17.9 #>  9 2020-01-01 04:00:00 Opf_Balsberg NOx       min30    ppb    19.7 #> 10 2020-01-01 04:30:00 Opf_Balsberg NOx       min30    ppb    23.2 #> # ... with 60,906 more rows"},{"path":"https://ostluft.github.io/rOstluft/reference/read_ethz_iac.html","id":null,"dir":"Reference","previous_headings":"","what":"Read an IAC/ETHZ meteo station file — read_ethz_iac","title":"Read an IAC/ETHZ meteo station file — read_ethz_iac","text":"Reads files meteo station measurements (10 minute time resolution) institute atmosphere climety ETH Zürich. Currently, two stations Zürich long-term operation: CHN-Gebäude & Hönggerberg (see Weather Stations). files daily files, encoded utf-8. Timezone GMT.","code":""},{"path":"https://ostluft.github.io/rOstluft/reference/read_ethz_iac.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read an IAC/ETHZ meteo station file — read_ethz_iac","text":"","code":"read_ethz_iac(   x,   tz = \"Etc/GMT-1\",   site = NULL,   na.rm = TRUE,   encoding = \"UTF-8\" )"},{"path":"https://ostluft.github.io/rOstluft/reference/read_ethz_iac.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read an IAC/ETHZ meteo station file — read_ethz_iac","text":"x Either path file, connection, literal data. see readr::read_delim() tz output data. Default \"Etc/GMT-1\" site Character string specifying site meteo station. Usally site autodetected header. autodection fails overwrite needed set site. Default NULL na.rm remove na values. Default TRUE encoding encoding data file. Default = \"UTF-8\"","code":""},{"path":"https://ostluft.github.io/rOstluft/reference/read_ethz_iac.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read an IAC/ETHZ meteo station file — read_ethz_iac","text":"tibble rOstluft long format structure","code":""},{"path":"https://ostluft.github.io/rOstluft/reference/read_nabel_txt.html","id":null,"dir":"Reference","previous_headings":"","what":"Read a file from Nabel — read_nabel_txt","title":"Read a file from Nabel — read_nabel_txt","text":"Reads Exports National Air Pollution Monitoring Network (NABEL) National Air Pollution Monitoring Network (NABEL) measures air pollution 16 locations Switzerland. stations distributed throughout country monitor pollution typical locations (e.g. city-centre streets, residential areas, rural stations). monitoring network commenced operations stages since 1979 operated Federal office environment Empa function reads parameter unit information header. interval auto detected possible. Addition time information end time. time converted start time time zone defined trough argument tz. argument time_shift provides way manuelly shift time series. case automatically shifting applied. provided values directly added information file.","code":""},{"path":"https://ostluft.github.io/rOstluft/reference/read_nabel_txt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read a file from Nabel — read_nabel_txt","text":"","code":"read_nabel_txt(   fn,   encoding = \"latin1\",   tz = \"Etc/GMT-1\",   interval = NULL,   time_shift = NULL,   na.rm = TRUE )"},{"path":"https://ostluft.github.io/rOstluft/reference/read_nabel_txt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read a file from Nabel — read_nabel_txt","text":"fn path input file encoding encoding data file. Default = \"latin1\" tz data. Default \"Etc/GMT-1\" interval optional interval data. Use auto detect fails. Default NULL. used necessary define time_shift manuelly. lubridate::period(0) can used shifting time_shift lubridate period add time. Default NULL na.rm remove na values. Default TRUE","code":""},{"path":"https://ostluft.github.io/rOstluft/reference/read_nabel_txt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read a file from Nabel — read_nabel_txt","text":"tibble rolf format","code":""},{"path":"https://ostluft.github.io/rOstluft/reference/read_seepolizei.html","id":null,"dir":"Reference","previous_headings":"","what":"Reads historic data files  of the Tecson meteo station placed at Tiefenbrunnen and Mythenquai water police station. — read_seepolizei","title":"Reads historic data files  of the Tecson meteo station placed at Tiefenbrunnen and Mythenquai water police station. — read_seepolizei","text":"Reads historic data files  Tecson meteo station placed Tiefenbrunnen Mythenquai water police station.","code":""},{"path":"https://ostluft.github.io/rOstluft/reference/read_seepolizei.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reads historic data files  of the Tecson meteo station placed at Tiefenbrunnen and Mythenquai water police station. — read_seepolizei","text":"","code":"read_seepolizei(   fn,   site = c(\"ZH_Mythenquai\", \"ZH_Tiefenbrunnen\"),   tz = \"Etc/GMT-1\",   time_shift = NULL,   na.rm = TRUE )"},{"path":"https://ostluft.github.io/rOstluft/reference/read_seepolizei.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reads historic data files  of the Tecson meteo station placed at Tiefenbrunnen and Mythenquai water police station. — read_seepolizei","text":"fn file name containing historic data site measurement site data. \"ZH_Mythenquai\" \"ZH_Tiefenbrunnen\" tz Output time zone. file content CET. Detault \"Etc/GMT-1\" time_shift lubridate period add time. Default NULL na.rm remove na (empty) values. Default TRUE","code":""},{"path":"https://ostluft.github.io/rOstluft/reference/read_seepolizei.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reads historic data files  of the Tecson meteo station placed at Tiefenbrunnen and Mythenquai water police station. — read_seepolizei","text":"data frame rOstluft long format","code":""},{"path":"https://ostluft.github.io/rOstluft/reference/read_seepolizei.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reads historic data files  of the Tecson meteo station placed at Tiefenbrunnen and Mythenquai water police station. — read_seepolizei","text":"","code":"input <- rOstluft.data::f(\"messwerte_tiefenbrunnen_2007-2019.csv\") data <- read_seepolizei(input, \"ZH_Tiefenbrunnen\")  # normalize data with meta informations meta_data <- readRDS(rOstluft.data::f(\"meta_seepolizei.rds\"))  # add units data <- meta_apply(   data = data,   meta = meta_data,   data_src = \"parameter\",   data_dest = \"unit\",   meta_key = \"parameter_original\",   meta_val = \"unit\",   mode = \"strict\" )  # rename parameters to Ostluft Conventions data <- meta_apply(   data = data,   meta = meta_data,   data_src = \"parameter\",   data_dest = \"parameter\",   meta_key = \"parameter_original\",   meta_val = \"parameter\",   mode = \"strict\" )  # show normalized data data #> # A tibble: 750 x 6 #>    starttime           site             parameter interval unit  value #>    <dttm>              <fct>            <fct>     <fct>    <fct> <dbl> #>  1 2007-04-15 10:20:00 ZH_Tiefenbrunnen T         min10    °C     17.4 #>  2 2007-04-15 10:30:00 ZH_Tiefenbrunnen T         min10    °C     16.7 #>  3 2007-04-15 10:40:00 ZH_Tiefenbrunnen T         min10    °C     17   #>  4 2007-04-15 10:50:00 ZH_Tiefenbrunnen T         min10    °C     17   #>  5 2007-04-15 11:00:00 ZH_Tiefenbrunnen T         min10    °C     16.8 #>  6 2007-04-15 11:10:00 ZH_Tiefenbrunnen T         min10    °C     16.6 #>  7 2007-04-15 11:20:00 ZH_Tiefenbrunnen T         min10    °C     17   #>  8 2007-04-15 11:30:00 ZH_Tiefenbrunnen T         min10    °C     17.3 #>  9 2007-04-15 11:40:00 ZH_Tiefenbrunnen T         min10    °C     17.3 #> 10 2007-04-15 11:50:00 ZH_Tiefenbrunnen T         min10    °C     17.6 #> # ... with 740 more rows"},{"path":"https://ostluft.github.io/rOstluft/reference/read_smn.html","id":null,"dir":"Reference","previous_headings":"","what":"Reads a file from the SwissMetNet of MeteoSwiss — read_smn","title":"Reads a file from the SwissMetNet of MeteoSwiss — read_smn","text":"SwissMetNet, automatic monitoring network MeteoSwiss Federal Office Meteorology Climatology, comprises 160 automatic monitoring stations. stations deliver multitude current data weather climate Switzerland every ten minutes. monitoring network supplemented automatic precipitation stations. Function autodetects delimeter tries find interval. Addition time information files utc end time. time converted start time time zone defined trough argument tz. argument time_shift provides way manuelly shift time series. case automatically shifting applied. provided values directly added information file.","code":""},{"path":"https://ostluft.github.io/rOstluft/reference/read_smn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reads a file from the SwissMetNet of MeteoSwiss — read_smn","text":"","code":"read_smn(   fn,   tz = \"Etc/GMT-1\",   encoding = \"UTF-8\",   time_shift = NULL,   time_format = NULL,   interval = NULL,   na.rm = TRUE )"},{"path":"https://ostluft.github.io/rOstluft/reference/read_smn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reads a file from the SwissMetNet of MeteoSwiss — read_smn","text":"fn path input file tz output data. Default \"Etc/GMT-1\" encoding encoding data file. Default = \"UTF-8\" time_shift lubridate period add time. Default NULL time_format optional time_format. Use auto detect fails. Default NULL interval optional interval data. Use auto detect fails. Default NULL. used necessary define time_shift manuelly. lubridate::period(0) can used shifting na.rm remove na values. Default TRUE","code":""},{"path":"https://ostluft.github.io/rOstluft/reference/read_smn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reads a file from the SwissMetNet of MeteoSwiss — read_smn","text":"tibble rOstluft long format structure","code":""},{"path":"https://ostluft.github.io/rOstluft/reference/read_smn.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reads a file from the SwissMetNet of MeteoSwiss — read_smn","text":"","code":"input <- system.file(\"extdata\", \"smn.txt\", package = \"rOstluft.data\", mustWork = TRUE) read_smn(input) #> # A tibble: 54 x 6 #>    starttime           site  parameter interval unit  value #>    <dttm>              <fct> <fct>     <fct>    <fct> <dbl> #>  1 2018-01-01 00:50:00 CHU   dkl010z0  min10    NA    216   #>  2 2018-01-01 01:00:00 CHU   dkl010z0  min10    NA    209   #>  3 2018-01-01 01:10:00 CHU   dkl010z0  min10    NA    216   #>  4 2018-01-01 01:20:00 CHU   dkl010z0  min10    NA    227   #>  5 2018-01-01 01:30:00 CHU   dkl010z0  min10    NA    212   #>  6 2018-01-01 01:40:00 CHU   dkl010z0  min10    NA    200   #>  7 2018-01-01 00:50:00 CHU   fkl010z0  min10    NA      1.7 #>  8 2018-01-01 01:00:00 CHU   fkl010z0  min10    NA      1.9 #>  9 2018-01-01 01:10:00 CHU   fkl010z0  min10    NA      2   #> 10 2018-01-01 01:20:00 CHU   fkl010z0  min10    NA      2.6 #> # ... with 44 more rows"},{"path":"https://ostluft.github.io/rOstluft/reference/read_smn_multiple.html","id":null,"dir":"Reference","previous_headings":"","what":"Reads a file from the SwissMetNet of MeteoSwiss containing multiple Exports — read_smn_multiple","title":"Reads a file from the SwissMetNet of MeteoSwiss containing multiple Exports — read_smn_multiple","text":"One peculiarity MeteoSwiss provide multiple exports concatenated one file, starting line containing single space seperated two newlines. function reads whole file memory, splits part applies read function part. file big available memory, function split_smn() can split file multiple files containing one part. Linux commandline tool csplit another probably faster tool.","code":""},{"path":"https://ostluft.github.io/rOstluft/reference/read_smn_multiple.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reads a file from the SwissMetNet of MeteoSwiss containing multiple Exports — read_smn_multiple","text":"","code":"read_smn_multiple(fn, as_list = FALSE, encoding = \"UTF-8\", ...)"},{"path":"https://ostluft.github.io/rOstluft/reference/read_smn_multiple.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reads a file from the SwissMetNet of MeteoSwiss containing multiple Exports — read_smn_multiple","text":"fn path input file as_list return list part element rather one concatenated tibble encoding encoding data file. Default = \"UTF-8\" ... parameters passed read_smn()","code":""},{"path":"https://ostluft.github.io/rOstluft/reference/read_smn_multiple.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reads a file from the SwissMetNet of MeteoSwiss containing multiple Exports — read_smn_multiple","text":"tibble list tibbles rOstluft long format structure","code":""},{"path":[]},{"path":"https://ostluft.github.io/rOstluft/reference/read_smn_multiple.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reads a file from the SwissMetNet of MeteoSwiss containing multiple Exports — read_smn_multiple","text":"","code":"fn <- system.file(\"extdata\", \"smn_multi.txt\", package = \"rOstluft.data\", mustWork = TRUE) read_smn_multiple(fn, as_list = TRUE) #> [[1]] #> # A tibble: 225 x 6 #>    starttime           site  parameter interval unit  value #>    <dttm>              <fct> <fct>     <fct>    <fct> <dbl> #>  1 2020-07-30 07:40:00 TAE   tre200s0  min10    NA     19.6 #>  2 2020-07-30 07:50:00 TAE   tre200s0  min10    NA     19.7 #>  3 2020-07-30 08:00:00 TAE   tre200s0  min10    NA     20.6 #>  4 2020-07-30 08:10:00 TAE   tre200s0  min10    NA     21.5 #>  5 2020-07-30 08:20:00 TAE   tre200s0  min10    NA     21   #>  6 2020-07-30 08:30:00 TAE   tre200s0  min10    NA     21.2 #>  7 2020-07-30 08:40:00 TAE   tre200s0  min10    NA     21.8 #>  8 2020-07-30 08:50:00 TAE   tre200s0  min10    NA     21.7 #>  9 2020-07-30 09:00:00 TAE   tre200s0  min10    NA     22.9 #> 10 2020-07-30 09:10:00 TAE   tre200s0  min10    NA     22.4 #> # ... with 215 more rows #>  #> [[2]] #> # A tibble: 104 x 6 #>    starttime           site  parameter interval unit  value #>    <dttm>              <fct> <fct>     <fct>    <fct> <dbl> #>  1 2020-07-30 07:40:00 UEB   ta1tows0  min10    NA     17.9 #>  2 2020-07-30 07:50:00 UEB   ta1tows0  min10    NA     18.5 #>  3 2020-07-30 08:00:00 UEB   ta1tows0  min10    NA     17.7 #>  4 2020-07-30 08:10:00 UEB   ta1tows0  min10    NA     18.5 #>  5 2020-07-30 08:20:00 UEB   ta1tows0  min10    NA     17.9 #>  6 2020-07-30 08:30:00 UEB   ta1tows0  min10    NA     18.1 #>  7 2020-07-30 08:40:00 UEB   ta1tows0  min10    NA     17.9 #>  8 2020-07-30 08:50:00 UEB   ta1tows0  min10    NA     18.3 #>  9 2020-07-30 09:00:00 UEB   ta1tows0  min10    NA     17.6 #> 10 2020-07-30 09:10:00 UEB   ta1tows0  min10    NA     18.2 #> # ... with 94 more rows #>  #> [[3]] #> # A tibble: 54 x 6 #>    starttime           site  parameter interval unit  value #>    <dttm>              <fct> <fct>     <fct>    <fct> <dbl> #>  1 2018-01-01 00:50:00 ARH   dkl010z0  min10    NA    168   #>  2 2018-01-01 01:00:00 ARH   dkl010z0  min10    NA    203   #>  3 2018-01-01 01:10:00 ARH   dkl010z0  min10    NA    115   #>  4 2018-01-01 01:20:00 ARH   dkl010z0  min10    NA     96   #>  5 2018-01-01 01:30:00 ARH   dkl010z0  min10    NA     76   #>  6 2018-01-01 01:40:00 ARH   dkl010z0  min10    NA     43   #>  7 2018-01-01 00:50:00 ARH   fkl010z0  min10    NA      1.1 #>  8 2018-01-01 01:00:00 ARH   fkl010z0  min10    NA      0.6 #>  9 2018-01-01 01:10:00 ARH   fkl010z0  min10    NA      1.5 #> 10 2018-01-01 01:20:00 ARH   fkl010z0  min10    NA      1.9 #> # ... with 44 more rows #>  #> [[4]] #> # A tibble: 18 x 6 #>    starttime           site  parameter interval unit  value #>    <dttm>              <fct> <fct>     <fct>    <fct> <dbl> #>  1 2018-01-01 00:50:00 BHF   fk1towz0  min10    NA      5.9 #>  2 2018-01-01 01:00:00 BHF   fk1towz0  min10    NA      7.2 #>  3 2018-01-01 01:10:00 BHF   fk1towz0  min10    NA      7.8 #>  4 2018-01-01 01:20:00 BHF   fk1towz0  min10    NA      9   #>  5 2018-01-01 01:30:00 BHF   fk1towz0  min10    NA      9.7 #>  6 2018-01-01 01:40:00 BHF   fk1towz0  min10    NA      7.5 #>  7 2018-01-01 00:50:00 BHF   fkltowz1  min10    NA      8.5 #>  8 2018-01-01 01:00:00 BHF   fkltowz1  min10    NA     11   #>  9 2018-01-01 01:10:00 BHF   fkltowz1  min10    NA     12   #> 10 2018-01-01 01:20:00 BHF   fkltowz1  min10    NA     13   #> 11 2018-01-01 01:30:00 BHF   fkltowz1  min10    NA     14.6 #> 12 2018-01-01 01:40:00 BHF   fkltowz1  min10    NA     15.7 #> 13 2018-01-01 00:50:00 BHF   ta1tows0  min10    NA      8.4 #> 14 2018-01-01 01:00:00 BHF   ta1tows0  min10    NA      8.8 #> 15 2018-01-01 01:10:00 BHF   ta1tows0  min10    NA      9   #> 16 2018-01-01 01:20:00 BHF   ta1tows0  min10    NA      8.7 #> 17 2018-01-01 01:30:00 BHF   ta1tows0  min10    NA      8.2 #> 18 2018-01-01 01:40:00 BHF   ta1tows0  min10    NA      7.2 #>  #> [[5]] #> # A tibble: 54 x 6 #>    starttime           site  parameter interval unit  value #>    <dttm>              <fct> <fct>     <fct>    <fct> <dbl> #>  1 2018-01-01 00:50:00 CHU   dkl010z0  min10    NA    216   #>  2 2018-01-01 01:00:00 CHU   dkl010z0  min10    NA    209   #>  3 2018-01-01 01:10:00 CHU   dkl010z0  min10    NA    216   #>  4 2018-01-01 01:20:00 CHU   dkl010z0  min10    NA    227   #>  5 2018-01-01 01:30:00 CHU   dkl010z0  min10    NA    212   #>  6 2018-01-01 01:40:00 CHU   dkl010z0  min10    NA    200   #>  7 2018-01-01 00:50:00 CHU   fkl010z0  min10    NA      1.7 #>  8 2018-01-01 01:00:00 CHU   fkl010z0  min10    NA      1.9 #>  9 2018-01-01 01:10:00 CHU   fkl010z0  min10    NA      2   #> 10 2018-01-01 01:20:00 CHU   fkl010z0  min10    NA      2.6 #> # ... with 44 more rows #>  #> [[6]] #> # A tibble: 54 x 6 #>    starttime           site  parameter interval unit  value #>    <dttm>              <fct> <fct>     <fct>    <fct> <dbl> #>  1 2018-01-01 00:50:00 EBK   dkl010z0  min10    NA    179   #>  2 2018-01-01 01:00:00 EBK   dkl010z0  min10    NA    161   #>  3 2018-01-01 01:10:00 EBK   dkl010z0  min10    NA    178   #>  4 2018-01-01 01:20:00 EBK   dkl010z0  min10    NA    114   #>  5 2018-01-01 01:30:00 EBK   dkl010z0  min10    NA    135   #>  6 2018-01-01 01:40:00 EBK   dkl010z0  min10    NA     66   #>  7 2018-01-01 00:50:00 EBK   fkl010z0  min10    NA      0.9 #>  8 2018-01-01 01:00:00 EBK   fkl010z0  min10    NA      0.9 #>  9 2018-01-01 01:10:00 EBK   fkl010z0  min10    NA      0.9 #> 10 2018-01-01 01:20:00 EBK   fkl010z0  min10    NA      1   #> # ... with 44 more rows #>  #> [[7]] #> # A tibble: 54 x 6 #>    starttime           site  parameter interval unit  value #>    <dttm>              <fct> <fct>     <fct>    <fct> <dbl> #>  1 2018-01-01 00:50:00 GLA   dkl010z0  min10    NA    140   #>  2 2018-01-01 01:00:00 GLA   dkl010z0  min10    NA    105   #>  3 2018-01-01 01:10:00 GLA   dkl010z0  min10    NA    246   #>  4 2018-01-01 01:20:00 GLA   dkl010z0  min10    NA    100   #>  5 2018-01-01 01:30:00 GLA   dkl010z0  min10    NA      0   #>  6 2018-01-01 01:40:00 GLA   dkl010z0  min10    NA    228   #>  7 2018-01-01 00:50:00 GLA   fkl010z0  min10    NA      1.3 #>  8 2018-01-01 01:00:00 GLA   fkl010z0  min10    NA      0.5 #>  9 2018-01-01 01:10:00 GLA   fkl010z0  min10    NA      1.1 #> 10 2018-01-01 01:20:00 GLA   fkl010z0  min10    NA      1.1 #> # ... with 44 more rows #>  #> [[8]] #> # A tibble: 18 x 6 #>    starttime           site  parameter interval unit  value #>    <dttm>              <fct> <fct>     <fct>    <fct> <dbl> #>  1 2018-01-01 00:50:00 GUB   fk1towz0  min10    NA      6.1 #>  2 2018-01-01 01:00:00 GUB   fk1towz0  min10    NA      7.5 #>  3 2018-01-01 01:10:00 GUB   fk1towz0  min10    NA      6.6 #>  4 2018-01-01 01:20:00 GUB   fk1towz0  min10    NA      5.3 #>  5 2018-01-01 01:30:00 GUB   fk1towz0  min10    NA      3.7 #>  6 2018-01-01 01:40:00 GUB   fk1towz0  min10    NA      4.9 #>  7 2018-01-01 00:50:00 GUB   fkltowz1  min10    NA     12.9 #>  8 2018-01-01 01:00:00 GUB   fkltowz1  min10    NA     14.4 #>  9 2018-01-01 01:10:00 GUB   fkltowz1  min10    NA     16.3 #> 10 2018-01-01 01:20:00 GUB   fkltowz1  min10    NA     11.1 #> 11 2018-01-01 01:30:00 GUB   fkltowz1  min10    NA      7.9 #> 12 2018-01-01 01:40:00 GUB   fkltowz1  min10    NA      9.6 #> 13 2018-01-01 00:50:00 GUB   ta1tows0  min10    NA      7.5 #> 14 2018-01-01 01:00:00 GUB   ta1tows0  min10    NA      8   #> 15 2018-01-01 01:10:00 GUB   ta1tows0  min10    NA      7.8 #> 16 2018-01-01 01:20:00 GUB   ta1tows0  min10    NA      7.8 #> 17 2018-01-01 01:30:00 GUB   ta1tows0  min10    NA      7.4 #> 18 2018-01-01 01:40:00 GUB   ta1tows0  min10    NA      6.8 #>  #> [[9]] #> # A tibble: 54 x 6 #>    starttime           site  parameter interval unit  value #>    <dttm>              <fct> <fct>     <fct>    <fct> <dbl> #>  1 2018-01-01 00:50:00 HOE   dkl010z0  min10    NA    251   #>  2 2018-01-01 01:00:00 HOE   dkl010z0  min10    NA    270   #>  3 2018-01-01 01:10:00 HOE   dkl010z0  min10    NA    271   #>  4 2018-01-01 01:20:00 HOE   dkl010z0  min10    NA    274   #>  5 2018-01-01 01:30:00 HOE   dkl010z0  min10    NA    278   #>  6 2018-01-01 01:40:00 HOE   dkl010z0  min10    NA    280   #>  7 2018-01-01 00:50:00 HOE   fkl010z0  min10    NA     12.3 #>  8 2018-01-01 01:00:00 HOE   fkl010z0  min10    NA      9.3 #>  9 2018-01-01 01:10:00 HOE   fkl010z0  min10    NA     11.7 #> 10 2018-01-01 01:20:00 HOE   fkl010z0  min10    NA     11.2 #> # ... with 44 more rows #>  #> [[10]] #> # A tibble: 54 x 6 #>    starttime           site  parameter interval unit  value #>    <dttm>              <fct> <fct>     <fct>    <fct> <dbl> #>  1 2018-01-01 00:50:00 KLO   dkl010z0  min10    NA    224   #>  2 2018-01-01 01:00:00 KLO   dkl010z0  min10    NA    231   #>  3 2018-01-01 01:10:00 KLO   dkl010z0  min10    NA    237   #>  4 2018-01-01 01:20:00 KLO   dkl010z0  min10    NA    244   #>  5 2018-01-01 01:30:00 KLO   dkl010z0  min10    NA    260   #>  6 2018-01-01 01:40:00 KLO   dkl010z0  min10    NA    271   #>  7 2018-01-01 00:50:00 KLO   fkl010z0  min10    NA      5.7 #>  8 2018-01-01 01:00:00 KLO   fkl010z0  min10    NA      5.9 #>  9 2018-01-01 01:10:00 KLO   fkl010z0  min10    NA      7.1 #> 10 2018-01-01 01:20:00 KLO   fkl010z0  min10    NA      6.6 #> # ... with 44 more rows #>  #> [[11]] #> # A tibble: 42 x 6 #>    starttime           site  parameter interval unit  value #>    <dttm>              <fct> <fct>     <fct>    <fct> <dbl> #>  1 2018-01-01 00:50:00 LAE   dkl010z0  min10    NA    208   #>  2 2018-01-01 01:00:00 LAE   dkl010z0  min10    NA    214   #>  3 2018-01-01 01:10:00 LAE   dkl010z0  min10    NA    220   #>  4 2018-01-01 01:20:00 LAE   dkl010z0  min10    NA    252   #>  5 2018-01-01 01:30:00 LAE   dkl010z0  min10    NA    277   #>  6 2018-01-01 01:40:00 LAE   dkl010z0  min10    NA    287   #>  7 2018-01-01 00:50:00 LAE   fkl010z1  min10    NA     12   #>  8 2018-01-01 01:00:00 LAE   fkl010z1  min10    NA     14.3 #>  9 2018-01-01 01:10:00 LAE   fkl010z1  min10    NA     13.2 #> 10 2018-01-01 01:20:00 LAE   fkl010z1  min10    NA     12.8 #> # ... with 32 more rows #>  #> [[12]] #> # A tibble: 18 x 6 #>    starttime           site  parameter interval unit  value #>    <dttm>              <fct> <fct>     <fct>    <fct> <dbl> #>  1 2018-01-01 00:50:00 LCK   fk1towz0  min10    NA      7.7 #>  2 2018-01-01 01:00:00 LCK   fk1towz0  min10    NA      8.5 #>  3 2018-01-01 01:10:00 LCK   fk1towz0  min10    NA     10.5 #>  4 2018-01-01 01:20:00 LCK   fk1towz0  min10    NA      9.9 #>  5 2018-01-01 01:30:00 LCK   fk1towz0  min10    NA      8.2 #>  6 2018-01-01 01:40:00 LCK   fk1towz0  min10    NA      6.7 #>  7 2018-01-01 00:50:00 LCK   fkltowz1  min10    NA     10.7 #>  8 2018-01-01 01:00:00 LCK   fkltowz1  min10    NA     12.5 #>  9 2018-01-01 01:10:00 LCK   fkltowz1  min10    NA     15.5 #> 10 2018-01-01 01:20:00 LCK   fkltowz1  min10    NA     13.2 #> 11 2018-01-01 01:30:00 LCK   fkltowz1  min10    NA     11.1 #> 12 2018-01-01 01:40:00 LCK   fkltowz1  min10    NA      9.6 #> 13 2018-01-01 00:50:00 LCK   ta1tows0  min10    NA      7.3 #> 14 2018-01-01 01:00:00 LCK   ta1tows0  min10    NA      7.4 #> 15 2018-01-01 01:10:00 LCK   ta1tows0  min10    NA      7.6 #> 16 2018-01-01 01:20:00 LCK   ta1tows0  min10    NA      7.7 #> 17 2018-01-01 01:30:00 LCK   ta1tows0  min10    NA      7.7 #> 18 2018-01-01 01:40:00 LCK   ta1tows0  min10    NA      7.5 #>  #> [[13]] #> # A tibble: 12 x 6 #>    starttime           site  parameter interval unit  value #>    <dttm>              <fct> <fct>     <fct>    <fct> <dbl> #>  1 2018-01-01 00:50:00 NEE   fk1towz0  min10    NA      7.9 #>  2 2018-01-01 01:00:00 NEE   fk1towz0  min10    NA      8   #>  3 2018-01-01 01:10:00 NEE   fk1towz0  min10    NA      6.6 #>  4 2018-01-01 01:20:00 NEE   fk1towz0  min10    NA      5   #>  5 2018-01-01 01:30:00 NEE   fk1towz0  min10    NA      3.6 #>  6 2018-01-01 01:40:00 NEE   fk1towz0  min10    NA      3.2 #>  7 2018-01-01 00:50:00 NEE   fkltowz1  min10    NA     12.7 #>  8 2018-01-01 01:00:00 NEE   fkltowz1  min10    NA     12.1 #>  9 2018-01-01 01:10:00 NEE   fkltowz1  min10    NA     10.3 #> 10 2018-01-01 01:20:00 NEE   fkltowz1  min10    NA     11.1 #> 11 2018-01-01 01:30:00 NEE   fkltowz1  min10    NA      7.5 #> 12 2018-01-01 01:40:00 NEE   fkltowz1  min10    NA      6.6 #>  #> [[14]] #> # A tibble: 42 x 6 #>    starttime           site  parameter interval unit  value #>    <dttm>              <fct> <fct>     <fct>    <fct> <dbl> #>  1 2018-01-01 00:50:00 OBR   dkl010z0  min10    NA    259   #>  2 2018-01-01 01:00:00 OBR   dkl010z0  min10    NA    248   #>  3 2018-01-01 01:10:00 OBR   dkl010z0  min10    NA    248   #>  4 2018-01-01 01:20:00 OBR   dkl010z0  min10    NA    225   #>  5 2018-01-01 01:30:00 OBR   dkl010z0  min10    NA    265   #>  6 2018-01-01 01:40:00 OBR   dkl010z0  min10    NA    288   #>  7 2018-01-01 00:50:00 OBR   fkl010z0  min10    NA      3.1 #>  8 2018-01-01 01:00:00 OBR   fkl010z0  min10    NA      2.6 #>  9 2018-01-01 01:10:00 OBR   fkl010z0  min10    NA      1.9 #> 10 2018-01-01 01:20:00 OBR   fkl010z0  min10    NA      2.4 #> # ... with 32 more rows #>  #> [[15]] #> # A tibble: 54 x 6 #>    starttime           site  parameter interval unit  value #>    <dttm>              <fct> <fct>     <fct>    <fct> <dbl> #>  1 2018-01-01 00:50:00 PIL   dkl010z0  min10    NA    212   #>  2 2018-01-01 01:00:00 PIL   dkl010z0  min10    NA    213   #>  3 2018-01-01 01:10:00 PIL   dkl010z0  min10    NA    210   #>  4 2018-01-01 01:20:00 PIL   dkl010z0  min10    NA    164   #>  5 2018-01-01 01:30:00 PIL   dkl010z0  min10    NA    195   #>  6 2018-01-01 01:40:00 PIL   dkl010z0  min10    NA    205   #>  7 2018-01-01 00:50:00 PIL   fkl010z0  min10    NA      8.5 #>  8 2018-01-01 01:00:00 PIL   fkl010z0  min10    NA      8.1 #>  9 2018-01-01 01:10:00 PIL   fkl010z0  min10    NA      4.6 #> 10 2018-01-01 01:20:00 PIL   fkl010z0  min10    NA      1.9 #> # ... with 44 more rows #>  #> [[16]] #> # A tibble: 54 x 6 #>    starttime           site  parameter interval unit  value #>    <dttm>              <fct> <fct>     <fct>    <fct> <dbl> #>  1 2018-01-01 00:50:00 SAE   dkl010z0  min10    NA    256   #>  2 2018-01-01 01:00:00 SAE   dkl010z0  min10    NA    258   #>  3 2018-01-01 01:10:00 SAE   dkl010z0  min10    NA    255   #>  4 2018-01-01 01:20:00 SAE   dkl010z0  min10    NA    257   #>  5 2018-01-01 01:30:00 SAE   dkl010z0  min10    NA    253   #>  6 2018-01-01 01:40:00 SAE   dkl010z0  min10    NA    253   #>  7 2018-01-01 00:50:00 SAE   fkl010z0  min10    NA     13.3 #>  8 2018-01-01 01:00:00 SAE   fkl010z0  min10    NA     13.9 #>  9 2018-01-01 01:10:00 SAE   fkl010z0  min10    NA     14.8 #> 10 2018-01-01 01:20:00 SAE   fkl010z0  min10    NA     15.9 #> # ... with 44 more rows #>  #> [[17]] #> # A tibble: 54 x 6 #>    starttime           site  parameter interval unit  value #>    <dttm>              <fct> <fct>     <fct>    <fct> <dbl> #>  1 2018-01-01 00:50:00 SHA   dkl010z0  min10    NA    253   #>  2 2018-01-01 01:00:00 SHA   dkl010z0  min10    NA    255   #>  3 2018-01-01 01:10:00 SHA   dkl010z0  min10    NA    260   #>  4 2018-01-01 01:20:00 SHA   dkl010z0  min10    NA    257   #>  5 2018-01-01 01:30:00 SHA   dkl010z0  min10    NA    254   #>  6 2018-01-01 01:40:00 SHA   dkl010z0  min10    NA    255   #>  7 2018-01-01 00:50:00 SHA   fkl010z0  min10    NA      6   #>  8 2018-01-01 01:00:00 SHA   fkl010z0  min10    NA      6.1 #>  9 2018-01-01 01:10:00 SHA   fkl010z0  min10    NA      6.4 #> 10 2018-01-01 01:20:00 SHA   fkl010z0  min10    NA      6.6 #> # ... with 44 more rows #>  #> [[18]] #> # A tibble: 54 x 6 #>    starttime           site  parameter interval unit  value #>    <dttm>              <fct> <fct>     <fct>    <fct> <dbl> #>  1 2018-01-01 00:50:00 SMA   dkl010z0  min10    NA    248   #>  2 2018-01-01 01:00:00 SMA   dkl010z0  min10    NA    244   #>  3 2018-01-01 01:10:00 SMA   dkl010z0  min10    NA    241   #>  4 2018-01-01 01:20:00 SMA   dkl010z0  min10    NA    237   #>  5 2018-01-01 01:30:00 SMA   dkl010z0  min10    NA    237   #>  6 2018-01-01 01:40:00 SMA   dkl010z0  min10    NA    240   #>  7 2018-01-01 00:50:00 SMA   fkl010z0  min10    NA      7.2 #>  8 2018-01-01 01:00:00 SMA   fkl010z0  min10    NA      6.5 #>  9 2018-01-01 01:10:00 SMA   fkl010z0  min10    NA      8.2 #> 10 2018-01-01 01:20:00 SMA   fkl010z0  min10    NA      8.9 #> # ... with 44 more rows #>  #> [[19]] #> # A tibble: 54 x 6 #>    starttime           site  parameter interval unit  value #>    <dttm>              <fct> <fct>     <fct>    <fct> <dbl> #>  1 2018-01-01 00:50:00 STG   dkl010z0  min10    NA    220   #>  2 2018-01-01 01:00:00 STG   dkl010z0  min10    NA    218   #>  3 2018-01-01 01:10:00 STG   dkl010z0  min10    NA    228   #>  4 2018-01-01 01:20:00 STG   dkl010z0  min10    NA    227   #>  5 2018-01-01 01:30:00 STG   dkl010z0  min10    NA    228   #>  6 2018-01-01 01:40:00 STG   dkl010z0  min10    NA    227   #>  7 2018-01-01 00:50:00 STG   fkl010z0  min10    NA      5.5 #>  8 2018-01-01 01:00:00 STG   fkl010z0  min10    NA      4.8 #>  9 2018-01-01 01:10:00 STG   fkl010z0  min10    NA      5.3 #> 10 2018-01-01 01:20:00 STG   fkl010z0  min10    NA      5.2 #> # ... with 44 more rows #>  #> [[20]] #> # A tibble: 54 x 6 #>    starttime           site  parameter interval unit  value #>    <dttm>              <fct> <fct>     <fct>    <fct> <dbl> #>  1 2018-01-01 00:50:00 TAE   dkl010z0  min10    NA    232   #>  2 2018-01-01 01:00:00 TAE   dkl010z0  min10    NA    233   #>  3 2018-01-01 01:10:00 TAE   dkl010z0  min10    NA    265   #>  4 2018-01-01 01:20:00 TAE   dkl010z0  min10    NA    241   #>  5 2018-01-01 01:30:00 TAE   dkl010z0  min10    NA    232   #>  6 2018-01-01 01:40:00 TAE   dkl010z0  min10    NA    239   #>  7 2018-01-01 00:50:00 TAE   fkl010z0  min10    NA      1.5 #>  8 2018-01-01 01:00:00 TAE   fkl010z0  min10    NA      1.2 #>  9 2018-01-01 01:10:00 TAE   fkl010z0  min10    NA      2.7 #> 10 2018-01-01 01:20:00 TAE   fkl010z0  min10    NA      4.1 #> # ... with 44 more rows #>  #> [[21]] #> # A tibble: 30 x 6 #>    starttime           site  parameter interval unit  value #>    <dttm>              <fct> <fct>     <fct>    <fct> <dbl> #>  1 2018-01-01 00:50:00 UEB   fk1towz0  min10    NA     17.3 #>  2 2018-01-01 01:00:00 UEB   fk1towz0  min10    NA     17.1 #>  3 2018-01-01 01:10:00 UEB   fk1towz0  min10    NA     18.4 #>  4 2018-01-01 01:20:00 UEB   fk1towz0  min10    NA     18.5 #>  5 2018-01-01 01:30:00 UEB   fk1towz0  min10    NA     16.1 #>  6 2018-01-01 01:40:00 UEB   fk1towz0  min10    NA     13.5 #>  7 2018-01-01 00:50:00 UEB   fkltowz1  min10    NA     18.8 #>  8 2018-01-01 01:00:00 UEB   fkltowz1  min10    NA     22   #>  9 2018-01-01 01:10:00 UEB   fkltowz1  min10    NA     22.6 #> 10 2018-01-01 01:20:00 UEB   fkltowz1  min10    NA     26.3 #> # ... with 20 more rows #>  #> [[22]] #> # A tibble: 6 x 6 #>   starttime           site  parameter interval unit  value #>   <dttm>              <fct> <fct>     <fct>    <fct> <dbl> #> 1 2018-01-01 00:00:00 UEB   uretowhs  h1       NA     85.1 #> 2 2018-01-01 01:00:00 UEB   uretowhs  h1       NA     94.5 #> 3 2018-01-01 02:00:00 UEB   uretowhs  h1       NA    100   #> 4 2018-01-01 03:00:00 UEB   uretowhs  h1       NA     97.5 #> 5 2018-01-01 04:00:00 UEB   uretowhs  h1       NA     88   #> 6 2018-01-01 05:00:00 UEB   uretowhs  h1       NA     82.4 #>  #> [[23]] #> # A tibble: 54 x 6 #>    starttime           site  parameter interval unit  value #>    <dttm>              <fct> <fct>     <fct>    <fct> <dbl> #>  1 2019-01-31 00:50:00 TAE   tre200s0  min10    °C     -5.8 #>  2 2019-01-31 01:00:00 TAE   tre200s0  min10    °C     -5.7 #>  3 2019-01-31 01:10:00 TAE   tre200s0  min10    °C     -6.6 #>  4 2019-01-31 01:20:00 TAE   tre200s0  min10    °C     -5.7 #>  5 2019-01-31 01:30:00 TAE   tre200s0  min10    °C     -7.3 #>  6 2019-01-31 01:40:00 TAE   tre200s0  min10    °C     -6.7 #>  7 2019-01-31 00:50:00 TAE   ure200s0  min10    %      81   #>  8 2019-01-31 01:00:00 TAE   ure200s0  min10    %      78.2 #>  9 2019-01-31 01:10:00 TAE   ure200s0  min10    %      81.8 #> 10 2019-01-31 01:20:00 TAE   ure200s0  min10    %      78.4 #> # ... with 44 more rows #>  #> [[24]] #> # A tibble: 31 x 6 #>    starttime           site  parameter interval unit  value #>    <dttm>              <fct> <fct>     <fct>    <fct> <dbl> #>  1 2019-01-31 00:50:00 UEB   ta1tows0  min10    °C     -3.3 #>  2 2019-01-31 01:00:00 UEB   ta1tows0  min10    °C     -3.3 #>  3 2019-01-31 01:10:00 UEB   ta1tows0  min10    °C     -3.3 #>  4 2019-01-31 01:20:00 UEB   ta1tows0  min10    °C     -3.3 #>  5 2019-01-31 01:30:00 UEB   ta1tows0  min10    °C     -3.3 #>  6 2019-01-31 01:40:00 UEB   ta1tows0  min10    °C     -3.3 #>  7 2019-01-31 00:50:00 UEB   uretowhs  min10    %      47.6 #>  8 2019-01-31 00:50:00 UEB   fk1towz0  min10    m/s     4.7 #>  9 2019-01-31 01:00:00 UEB   fk1towz0  min10    m/s     4.4 #> 10 2019-01-31 01:10:00 UEB   fk1towz0  min10    m/s     3.7 #> # ... with 21 more rows #>  #> [[25]] #> # A tibble: 54 x 6 #>    starttime           site  parameter interval unit  value #>    <dttm>              <fct> <fct>     <fct>    <fct> <dbl> #>  1 2018-01-01 00:50:00 VAD   dkl010z0  min10    NA    138   #>  2 2018-01-01 01:00:00 VAD   dkl010z0  min10    NA    137   #>  3 2018-01-01 01:10:00 VAD   dkl010z0  min10    NA    129   #>  4 2018-01-01 01:20:00 VAD   dkl010z0  min10    NA    136   #>  5 2018-01-01 01:30:00 VAD   dkl010z0  min10    NA    130   #>  6 2018-01-01 01:40:00 VAD   dkl010z0  min10    NA    133   #>  7 2018-01-01 00:50:00 VAD   fkl010z0  min10    NA      2.7 #>  8 2018-01-01 01:00:00 VAD   fkl010z0  min10    NA      3.8 #>  9 2018-01-01 01:10:00 VAD   fkl010z0  min10    NA      3.5 #> 10 2018-01-01 01:20:00 VAD   fkl010z0  min10    NA      3.4 #> # ... with 44 more rows #>  #> [[26]] #> # A tibble: 24 x 6 #>    starttime           site  parameter interval unit  value #>    <dttm>              <fct> <fct>     <fct>    <fct> <dbl> #>  1 2010-01-01 00:00:00 KLO   dkl010b0  h1       NA    319   #>  2 2010-01-01 01:00:00 KLO   dkl010b0  h1       NA    317   #>  3 2010-01-01 02:00:00 KLO   dkl010b0  h1       NA    360   #>  4 2010-01-01 03:00:00 KLO   dkl010b0  h1       NA    117   #>  5 2010-01-01 04:00:00 KLO   dkl010b0  h1       NA    360   #>  6 2010-01-01 05:00:00 KLO   dkl010b0  h1       NA    321   #>  7 2010-01-01 00:00:00 KLO   fkl010b0  h1       NA      1.5 #>  8 2010-01-01 01:00:00 KLO   fkl010b0  h1       NA      1.7 #>  9 2010-01-01 02:00:00 KLO   fkl010b0  h1       NA      0.7 #> 10 2010-01-01 03:00:00 KLO   fkl010b0  h1       NA      1.4 #> # ... with 14 more rows #>  #> [[27]] #> # A tibble: 18 x 6 #>    starttime           site  parameter interval unit  value #>    <dttm>              <fct> <fct>     <fct>    <fct> <dbl> #>  1 2010-01-01 00:00:00 UEB   dk1towb0  h1       NA    249   #>  2 2010-01-01 01:00:00 UEB   dk1towb0  h1       NA    259   #>  3 2010-01-01 02:00:00 UEB   dk1towb0  h1       NA    237   #>  4 2010-01-01 03:00:00 UEB   dk1towb0  h1       NA    225   #>  5 2010-01-01 04:00:00 UEB   dk1towb0  h1       NA    153   #>  6 2010-01-01 05:00:00 UEB   dk1towb0  h1       NA    129   #>  7 2010-01-01 00:00:00 UEB   fk1towb0  h1       NA      1.7 #>  8 2010-01-01 01:00:00 UEB   fk1towb0  h1       NA      2.1 #>  9 2010-01-01 02:00:00 UEB   fk1towb0  h1       NA      1.8 #> 10 2010-01-01 03:00:00 UEB   fk1towb0  h1       NA      0.3 #> 11 2010-01-01 04:00:00 UEB   fk1towb0  h1       NA      0.6 #> 12 2010-01-01 05:00:00 UEB   fk1towb0  h1       NA      1.9 #> 13 2010-01-01 00:00:00 UEB   ta1towb0  h1       NA      3.7 #> 14 2010-01-01 01:00:00 UEB   ta1towb0  h1       NA      3.5 #> 15 2010-01-01 02:00:00 UEB   ta1towb0  h1       NA      3.2 #> 16 2010-01-01 03:00:00 UEB   ta1towb0  h1       NA      3.1 #> 17 2010-01-01 04:00:00 UEB   ta1towb0  h1       NA      3.3 #> 18 2010-01-01 05:00:00 UEB   ta1towb0  h1       NA      3.3 #>  #> [[28]] #> # A tibble: 55 x 6 #>    starttime           site  parameter interval unit  value #>    <dttm>              <fct> <fct>     <fct>    <fct> <dbl> #>  1 2017-12-31 01:00:00 RHW   wkcap1d0  d1       NA        2 #>  2 2018-01-01 01:00:00 RHW   wkcap1d0  d1       NA        1 #>  3 2018-01-02 01:00:00 RHW   wkcap1d0  d1       NA        7 #>  4 2018-01-03 01:00:00 RHW   wkcap1d0  d1       NA        7 #>  5 2018-01-04 01:00:00 RHW   wkcap1d0  d1       NA        7 #>  6 2017-12-31 01:00:00 RHW   wkcap2d0  d1       NA       11 #>  7 2018-01-01 01:00:00 RHW   wkcap2d0  d1       NA        1 #>  8 2018-01-02 01:00:00 RHW   wkcap2d0  d1       NA       14 #>  9 2018-01-03 01:00:00 RHW   wkcap2d0  d1       NA       14 #> 10 2018-01-04 01:00:00 RHW   wkcap2d0  d1       NA       14 #> # ... with 45 more rows #>"},{"path":"https://ostluft.github.io/rOstluft/reference/resample.html","id":null,"dir":"Reference","previous_headings":"","what":"Resampling data — resample","title":"Resampling data — resample","text":"Aggregate data different time periods. Following simple steps: split data series pad data serie (needed calculation capture threshold, detection gaps) group serie new interval lubridate::floor_date() apply statistical method user provides function (user can provide list per parameter) combine resampled series possible supply different methods different parameters. argument statistic can named list. name stands parameter. value can function apply, name method list names. methods renames parameter changes unit. list method names can contain one non renaming method.","code":""},{"path":"https://ostluft.github.io/rOstluft/reference/resample.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Resampling data — resample","text":"","code":"resample(   data,   statistic = \"mean\",   new_interval,   data_thresh = NULL,   max_gap = NULL,   rename_parameter = TRUE,   percentile = 0.95,   skip_padding = FALSE,   start_date = NULL,   end_date = NULL,   drop_last = FALSE )"},{"path":"https://ostluft.github.io/rOstluft/reference/resample.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Resampling data — resample","text":"data tibble rOstluft long format statistic Statistical method(s) apply aggregating data. Can simple string name method function one argument. list parameter name statistical method value (function name method). list parameter list statisticals methods. methods must support renaming parameter. default statistic parameters list, can defined name \"default_statistic\". See section Statistical methods examples new_interval New interval. Must longer actual interval (checked) data_thresh optional minimum data capture threshold use max_gap optional maxium Number consecutive NA values rename_parameter optional rename parameter percentile percentile level used statistic = \"percentile\". default 0.95 skip_padding pad data applying statistics. Default FALSE start_date optional start date padding. Default min date series floored new interval end_date optional end date padding. Default max date series ceiled new interval drop_last optional drop last added time point padding. Default False, true end_date provided max date != ceiled max date.","code":""},{"path":"https://ostluft.github.io/rOstluft/reference/resample.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Resampling data — resample","text":"tibble resampled data","code":""},{"path":"https://ostluft.github.io/rOstluft/reference/resample.html","id":"statistical-methods","dir":"Reference","previous_headings":"","what":"Statistical methods","title":"Resampling data — resample","text":"statistical method function numeric vector argument returns single value. \"mean\" average value \"median\" median value \"sd\" standard deviation values \"sum\" sum values \"max\" maxium value \"min\" minimum value \"n\" number valid records, renames parameter, changes unit \"coverage\" percentage valid records, renames parameter, changes unit \"percentile\" calculates percentile. Use argument percentile specify level, renames parameter \"perc95\" 95% percentile, renames parameter \"perc98\" 98% percentile, renames parameter \"n>8\" number values > 8 (CO d1 limit), renames parameter, changes unit \"n>10\" number values > 10 (PM2.5 y1 limit), renames parameter, changes unit \"n>25\" number values > 25 (PM2.5 d1 limit), renames parameter, changes unit \"n>50\" number values > 50 (PM10 d1 limit), renames parameter, changes unit \"n>65\" number values > 65 (O3 d1 indicator), renames parameter, changes unit \"n>80\" number values > 80 (NO2 d1 limit), renames parameter, changes unit \"n>100\" number values > 100 (SO2 d1 limit), renames parameter, changes unit \"n>120\" number values > 120 (O3 h1 limit), renames parameter, changes unit \"n>160\" number values > 160 (O3 h1 indicator), renames parameter, changes unit \"n>180\" number values > 180 (O3 h1 indicator), renames parameter, changes unit \"n>200\" number values > 200 (O3 h1 indicator), renames parameter, changes unit \"n>240\" number values > 240 (O3 h1 indicator), renames parameter, changes unit \"drop\" drops parameter result, useful persons lazy filter input data","code":""},{"path":"https://ostluft.github.io/rOstluft/reference/resample.html","id":"wind","dir":"Reference","previous_headings":"","what":"Wind","title":"Resampling data — resample","text":"Wind special case. vector averaging methods needs two inputs (direction speed). resample wind data necessary specify three parameters methods \"wind.direction\", \"wind.speed_vector\" \"wind.speed_scalar\". Even scalar vector speed present. parameter substituted . Important: Wind calculation standalone. possible calculate multiple methods non wind parameters.","code":""},{"path":"https://ostluft.github.io/rOstluft/reference/resample.html","id":"todo","dir":"Reference","previous_headings":"","what":"TODO","title":"Resampling data — resample","text":"AOT40 statistic? https://github.com/davidcarslaw/openair/blob/master/R/aqStats.R?","code":""},{"path":"https://ostluft.github.io/rOstluft/reference/resample.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Resampling data — resample","text":"","code":"min30 <- system.file(\"extdata\", \"Zch_Stampfenbachstrasse_min30_2013_Jan.csv\",                      package = \"rOstluft.data\", mustWork = TRUE)  airmo_min30 <- read_airmo_csv(min30)  # filter volume concenctrations, only use mass concentrations airmo_min30 <- dplyr::filter(airmo_min30, !(.data$unit == \"ppb\" | .data$unit == \"ppm\"))  d1_statistics <- list(   \"default_statistic\" = \"drop\",   \"Hr\" = \"mean\",   \"RainDur\" = \"sum\",   \"O3\" = list(\"mean\", \"max\", \"min\", \"n\") ) resample(airmo_min30, d1_statistics, \"d1\", data_thresh = 0.8) #> # A tibble: 186 x 6 #>    starttime           site                    parameter interval unit  value #>    <dttm>              <fct>                   <fct>     <fct>    <fct> <dbl> #>  1 2013-01-01 00:00:00 Zch_Stampfenbachstrasse Hr        d1       %Hr    76.0 #>  2 2013-01-02 00:00:00 Zch_Stampfenbachstrasse Hr        d1       %Hr    83.5 #>  3 2013-01-03 00:00:00 Zch_Stampfenbachstrasse Hr        d1       %Hr    78.0 #>  4 2013-01-04 00:00:00 Zch_Stampfenbachstrasse Hr        d1       %Hr    83.5 #>  5 2013-01-05 00:00:00 Zch_Stampfenbachstrasse Hr        d1       %Hr    83.8 #>  6 2013-01-06 00:00:00 Zch_Stampfenbachstrasse Hr        d1       %Hr    82.3 #>  7 2013-01-07 00:00:00 Zch_Stampfenbachstrasse Hr        d1       %Hr    84.9 #>  8 2013-01-08 00:00:00 Zch_Stampfenbachstrasse Hr        d1       %Hr    79.0 #>  9 2013-01-09 00:00:00 Zch_Stampfenbachstrasse Hr        d1       %Hr    89.4 #> 10 2013-01-10 00:00:00 Zch_Stampfenbachstrasse Hr        d1       %Hr    89.6 #> # ... with 176 more rows  # Note: wind parameters don't support multiple methods via list! h1_statistics <- list(   \"default_statistic\" = \"drop\",   \"WD\" = \"wind.direction\",   \"WVs\" = \"wind.speed_scalar\",   \"WVv\" = \"wind.speed_vector\",   \"RainDur\" = \"sum\",   \"NO\" = list(\"coverage\", \"mean\") ) resample(airmo_min30, h1_statistics, \"h1\", data_thresh = 0.8) #> # A tibble: 4,464 x 6 #>    starttime           site                    parameter    interval unit  value #>    <dttm>              <fct>                   <fct>        <fct>    <fct> <dbl> #>  1 2013-01-01 00:00:00 Zch_Stampfenbachstrasse NO_valid%_m~ h1       %       100 #>  2 2013-01-01 01:00:00 Zch_Stampfenbachstrasse NO_valid%_m~ h1       %       100 #>  3 2013-01-01 02:00:00 Zch_Stampfenbachstrasse NO_valid%_m~ h1       %       100 #>  4 2013-01-01 03:00:00 Zch_Stampfenbachstrasse NO_valid%_m~ h1       %       100 #>  5 2013-01-01 04:00:00 Zch_Stampfenbachstrasse NO_valid%_m~ h1       %       100 #>  6 2013-01-01 05:00:00 Zch_Stampfenbachstrasse NO_valid%_m~ h1       %       100 #>  7 2013-01-01 06:00:00 Zch_Stampfenbachstrasse NO_valid%_m~ h1       %       100 #>  8 2013-01-01 07:00:00 Zch_Stampfenbachstrasse NO_valid%_m~ h1       %       100 #>  9 2013-01-01 08:00:00 Zch_Stampfenbachstrasse NO_valid%_m~ h1       %       100 #> 10 2013-01-01 09:00:00 Zch_Stampfenbachstrasse NO_valid%_m~ h1       %       100 #> # ... with 4,454 more rows  # Note: all resulting values should be NA -> gap is to big (480 * min30 = 10 days) y1_statistics <- list(   \"default_statistic\" = \"drop\",   \"O3\" = list(\"mean\", \"perc98\", \"n\", \"max\", \"min\") ) resample(airmo_min30, y1_statistics, \"y1\", max_gap = 480) #> # A tibble: 5 x 6 #>   starttime           site                    parameter    interval unit  value #>   <dttm>              <fct>                   <fct>        <fct>    <fct> <dbl> #> 1 2013-01-01 00:00:00 Zch_Stampfenbachstrasse O3           y1       µg/m3    NA #> 2 2013-01-01 00:00:00 Zch_Stampfenbachstrasse O3_98%_min30 y1       µg/m3    NA #> 3 2013-01-01 00:00:00 Zch_Stampfenbachstrasse O3_nb_min30  y1       1        NA #> 4 2013-01-01 00:00:00 Zch_Stampfenbachstrasse O3_max_min30 y1       µg/m3    NA #> 5 2013-01-01 00:00:00 Zch_Stampfenbachstrasse O3_min_min30 y1       µg/m3    NA"},{"path":"https://ostluft.github.io/rOstluft/reference/resample_series.html","id":null,"dir":"Reference","previous_headings":"","what":"resampling a serie — resample_series","title":"resampling a serie — resample_series","text":"resampling serie","code":""},{"path":"https://ostluft.github.io/rOstluft/reference/resample_series.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"resampling a serie — resample_series","text":"","code":"resample_series(   serie,   statistic = \"mean\",   new_interval = \"d1\",   data_thresh = NULL,   max_gap = NULL,   rename_parameter = TRUE,   percentile = 0.95,   skip_padding = FALSE,   start_date = NULL,   end_date = NULL,   drop_last = FALSE )"},{"path":"https://ostluft.github.io/rOstluft/reference/resample_series.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"resampling a serie — resample_series","text":"serie tibble rOstluft long format containing exactly one serie","code":""},{"path":"https://ostluft.github.io/rOstluft/reference/resample_series.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"resampling a serie — resample_series","text":"tibble resampled series","code":""},{"path":"https://ostluft.github.io/rOstluft/reference/resample_wind.html","id":null,"dir":"Reference","previous_headings":"","what":"Resamples wind data — resample_wind","title":"Resamples wind data — resample_wind","text":"Resamples wind data","code":""},{"path":"https://ostluft.github.io/rOstluft/reference/resample_wind.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Resamples wind data — resample_wind","text":"","code":"resample_wind(   data,   statistic,   new_interval = \"d1\",   data_thresh = NULL,   skip_padding = FALSE,   start_date = NULL,   end_date = NULL,   drop_last = FALSE,   max_gap = NULL )"},{"path":"https://ostluft.github.io/rOstluft/reference/resample_wind.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Resamples wind data — resample_wind","text":"tibble resampled wind data","code":""},{"path":"https://ostluft.github.io/rOstluft/reference/resample_wind_site.html","id":null,"dir":"Reference","previous_headings":"","what":"resamples wind — resample_wind_site","title":"resamples wind — resample_wind_site","text":"resamples wind","code":""},{"path":"https://ostluft.github.io/rOstluft/reference/resample_wind_site.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"resamples wind — resample_wind_site","text":"","code":"resample_wind_site(   data.site,   statistic,   new_interval = \"d1\",   data_thresh = NULL,   max_gap = NULL,   skip_padding = FALSE,   start_date = NULL,   end_date = NULL,   drop_last = FALSE )"},{"path":"https://ostluft.github.io/rOstluft/reference/resample_wind_site.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"resamples wind — resample_wind_site","text":"data.site wind data one specific site. contain wind speed direction","code":""},{"path":"https://ostluft.github.io/rOstluft/reference/resample_wind_site.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"resamples wind — resample_wind_site","text":"tibble resampled wind speed direction","code":""},{"path":"https://ostluft.github.io/rOstluft/reference/rolf_to_openair.html","id":null,"dir":"Reference","previous_headings":"","what":"Converts data from rolf format to an openair compatible Format — rolf_to_openair","title":"Converts data from rolf format to an openair compatible Format — rolf_to_openair","text":"openair::openair provides Tools analysis air pollution data. rOstluft focus lies providing data different sources user. openair data format described openair::mydata. Basically wide format field \"date\" POSIXct Date parameters columns. Another convention fields \"ws\" wind speed \"wd\" wind direction. Although usually functions allows passing names wind fields arguments wd ws. One disadvantage wide format loss unit information. Normally parameters expressed mass terms. See openair::importKCL() openair::importAURN(). functions saves parameter <> unit information attribute \"units\". unfortunately attributes tend lost data wrangling functions. avid user might save information.","code":""},{"path":"https://ostluft.github.io/rOstluft/reference/rolf_to_openair.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Converts data from rolf format to an openair compatible Format — rolf_to_openair","text":"","code":"rolf_to_openair(   data,   as_list = FALSE,   interval = NULL,   keep_ppb = FALSE,   keep_interval = FALSE,   ws = \"WVv\",   wd = \"WD\" )"},{"path":"https://ostluft.github.io/rOstluft/reference/rolf_to_openair.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Converts data from rolf format to an openair compatible Format — rolf_to_openair","text":"data rolf format as_list optional, TRUE returns list tibble parameter keeps unit information. Handy applying functions purrr. interval optional filter interval keep_ppb usually volume concentrations used analyses dropped exception NOx. FALSE drops parameters ppb/ppm units except NOx. Default FALSE keep_interval keep \"interval\" column. Default FALSE ws renames parameter \"ws\". Default \"WVv\". Set ws = NULL disable renaming wd renames parameter \"wd\". Default \"WD\". Set wd = NULL disable renaming","code":""},{"path":"https://ostluft.github.io/rOstluft/reference/rolf_to_openair.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Converts data from rolf format to an openair compatible Format — rolf_to_openair","text":"tibble openair compatible format","code":""},{"path":"https://ostluft.github.io/rOstluft/reference/rolf_to_openair.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Converts data from rolf format to an openair compatible Format — rolf_to_openair","text":"functions, example openair::timeAverage, argument \"type\". argument allows specifiy columns grouping columns. However, type supplied grouping variables (character factor) dropped. functions need mandatory assignment argument pollutant.","code":""},{"path":"https://ostluft.github.io/rOstluft/reference/rolf_to_openair.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Converts data from rolf format to an openair compatible Format — rolf_to_openair","text":"","code":"h1 <- system.file(\"extdata\", \"Zch_Stampfenbachstrasse_h1_2013_Jan.csv\",                    package = \"rOstluft.data\", mustWork = TRUE)  airmo_h1 <- read_airmo_csv(h1) rolf_to_openair(airmo_h1) #> # A tibble: 744 x 16 #>    date                site         CO    Hr    NO   NO2   NOx    O3     p  PM10 #>    <dttm>              <fct>     <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> #>  1 2013-01-01 00:00:00 Zch_Stam~ 0.805  82.9 80.5   63.9  98.0  3.44  962. 184.  #>  2 2013-01-01 01:00:00 Zch_Stam~ 0.833  83.0 78.4   61.6  95.1  3.07  962. 272.  #>  3 2013-01-01 02:00:00 Zch_Stam~ 0.874  83.6 81.3   60.9  97.0  3.04  962. 226.  #>  4 2013-01-01 03:00:00 Zch_Stam~ 0.755  84.7 62.3   56.7  79.6  2.78  962. 198.  #>  5 2013-01-01 04:00:00 Zch_Stam~ 0.767  83.7 67.1   59.2  84.8  2.72  961. 179.  #>  6 2013-01-01 05:00:00 Zch_Stam~ 0.566  82.7 11.8   46.9  34.0  5.36  961. 124.  #>  7 2013-01-01 06:00:00 Zch_Stam~ 0.509  83.1 10.5   46.5  32.7  4.94  961.  78.7 #>  8 2013-01-01 07:00:00 Zch_Stam~ 0.460  79.3  6.45  44.2  28.3  7.03  961.  65.1 #>  9 2013-01-01 08:00:00 Zch_Stam~ 0.334  60.3  1.71  21.2  12.4 42.7   961.  41.2 #> 10 2013-01-01 09:00:00 Zch_Stam~ 0.285  62.2  1.92  21.1  12.6 41.0   961.  22.8 #> # ... with 734 more rows, and 6 more variables: RainDur <dbl>, SO2 <dbl>, #> #   StrGlo <dbl>, T <dbl>, wd <dbl>, ws <dbl>"},{"path":"https://ostluft.github.io/rOstluft/reference/rolf_to_openair_single.html","id":null,"dir":"Reference","previous_headings":"","what":"Converts one parameter in a rolf data frame to an openair compatible format — rolf_to_openair_single","title":"Converts one parameter in a rolf data frame to an openair compatible format — rolf_to_openair_single","text":"function plucks data one parameter. multiple combinations parameter, unit interval exists necessary specify unit /interval pluck.","code":""},{"path":"https://ostluft.github.io/rOstluft/reference/rolf_to_openair_single.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Converts one parameter in a rolf data frame to an openair compatible format — rolf_to_openair_single","text":"","code":"rolf_to_openair_single(   data,   parameter = NULL,   unit = NULL,   interval = NULL,   keep_interval = FALSE )"},{"path":"https://ostluft.github.io/rOstluft/reference/rolf_to_openair_single.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Converts one parameter in a rolf data frame to an openair compatible format — rolf_to_openair_single","text":"data containing parameter rolf format parameter pluck unit Optional: unit parameter pluck. Default NULL interval Optional: interval parameter pluck. Default NULL keep_interval Optional: keep interval column. Default FALSE","code":""},{"path":"https://ostluft.github.io/rOstluft/reference/rolf_to_openair_single.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Converts one parameter in a rolf data frame to an openair compatible format — rolf_to_openair_single","text":"tibble one parameter openair compatible format including unit, site optional interval column","code":""},{"path":"https://ostluft.github.io/rOstluft/reference/rolf_to_openair_single.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Converts one parameter in a rolf data frame to an openair compatible format — rolf_to_openair_single","text":"","code":"h1 <- system.file(\"extdata\", \"Zch_Stampfenbachstrasse_h1_2013_Jan.csv\",                    package = \"rOstluft.data\", mustWork = TRUE)  airmo_h1 <- read_airmo_csv(h1) rolf_to_openair_single(airmo_h1, \"NO2\", unit = \"\\u00b5g/m3\", keep_interval = TRUE) #> # A tibble: 742 x 5 #>    date                site                    interval unit    NO2 #>    <dttm>              <fct>                   <fct>    <fct> <dbl> #>  1 2013-01-01 00:00:00 Zch_Stampfenbachstrasse h1       µg/m3  63.9 #>  2 2013-01-01 01:00:00 Zch_Stampfenbachstrasse h1       µg/m3  61.6 #>  3 2013-01-01 02:00:00 Zch_Stampfenbachstrasse h1       µg/m3  60.9 #>  4 2013-01-01 03:00:00 Zch_Stampfenbachstrasse h1       µg/m3  56.7 #>  5 2013-01-01 04:00:00 Zch_Stampfenbachstrasse h1       µg/m3  59.2 #>  6 2013-01-01 05:00:00 Zch_Stampfenbachstrasse h1       µg/m3  46.9 #>  7 2013-01-01 06:00:00 Zch_Stampfenbachstrasse h1       µg/m3  46.5 #>  8 2013-01-01 07:00:00 Zch_Stampfenbachstrasse h1       µg/m3  44.2 #>  9 2013-01-01 08:00:00 Zch_Stampfenbachstrasse h1       µg/m3  21.2 #> 10 2013-01-01 09:00:00 Zch_Stampfenbachstrasse h1       µg/m3  21.1 #> # ... with 732 more rows"},{"path":"https://ostluft.github.io/rOstluft/reference/rOstluft.html","id":null,"dir":"Reference","previous_headings":"","what":"rOstluft: data store and utility functions for Ostluft — rOstluft","title":"rOstluft: data store and utility functions for Ostluft — rOstluft","text":"package provides function quickly load data merge data mulitple sources.","code":""},{"path":"https://ostluft.github.io/rOstluft/reference/split_smn.html","id":null,"dir":"Reference","previous_headings":"","what":"Splits a file from the SwissMetNet of MeteoSwiss containing multiple Exports — split_smn","title":"Splits a file from the SwissMetNet of MeteoSwiss containing multiple Exports — split_smn","text":"Splits file SwissMetNet MeteoSwiss containing multiple Exports","code":""},{"path":"https://ostluft.github.io/rOstluft/reference/split_smn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Splits a file from the SwissMetNet of MeteoSwiss containing multiple Exports — split_smn","text":"","code":"split_smn(fn, out_dir = NULL, suffix = \"%03d.part\", encoding = \"UTF-8\")"},{"path":"https://ostluft.github.io/rOstluft/reference/split_smn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Splits a file from the SwissMetNet of MeteoSwiss containing multiple Exports — split_smn","text":"fn path input file out_dir Output directory parts suffix Added suffix file name sprintf format string. Gets file counter argument. encoding Encoding input file","code":""},{"path":"https://ostluft.github.io/rOstluft/reference/statistic_fun.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the biggest number of consecutive NA Values — get_gap_in_vector","title":"Get the biggest number of consecutive NA Values — get_gap_in_vector","text":"Probably fastest way . Compared loop approach. loop lot faster short vectors. 17500 elements (1 year min30 data) faster. end perfomance really matters.","code":""},{"path":"https://ostluft.github.io/rOstluft/reference/statistic_fun.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the biggest number of consecutive NA Values — get_gap_in_vector","text":"","code":"get_gap_in_vector(x)  statistic_mean(x)  statistic_median(x)  statistic_sd(x)  statistic_n(x)  statistic_sum(x)  statistic_max(x)  statistic_min(x)  statistic_coverage(x)  statistic_aot40k(x)  get_statistic_percentile(percentile)  get_statistic_limit(limit)"},{"path":"https://ostluft.github.io/rOstluft/reference/statistic_fun.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the biggest number of consecutive NA Values — get_gap_in_vector","text":"x Vector","code":""},{"path":"https://ostluft.github.io/rOstluft/reference/statistic_fun.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the biggest number of consecutive NA Values — get_gap_in_vector","text":"number longest consecutive NA values","code":""},{"path":"https://ostluft.github.io/rOstluft/reference/statistic_fun_factory.html","id":null,"dir":"Reference","previous_headings":"","what":"Factory to generate statistical functions — statistic_fun_factory","title":"Factory to generate statistical functions — statistic_fun_factory","text":"factory adds wrapper around statistical methods handle na values. Additional provides simple way apply minimum required data capture rate function.","code":""},{"path":"https://ostluft.github.io/rOstluft/reference/statistic_fun_factory.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Factory to generate statistical functions — statistic_fun_factory","text":"","code":"statistic_fun_factory(   statistic,   percentile = 0.95,   threshold = NULL,   max_gap = NULL )"},{"path":"https://ostluft.github.io/rOstluft/reference/statistic_fun_factory.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Factory to generate statistical functions — statistic_fun_factory","text":"statistic Statistical method generate function. Can name function one argument. See section Statistical methods documention resample() details. percentile percentile level % used statistic = \"percentile\". default 0.95. threshold optional minimum data capture threshold 0 - 1.0 use max_gap optional maxium Number consecutive NA values","code":""},{"path":"https://ostluft.github.io/rOstluft/reference/statistic_fun_factory.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Factory to generate statistical functions — statistic_fun_factory","text":"statistic function one argument","code":""},{"path":"https://ostluft.github.io/rOstluft/reference/statstable_default.html","id":null,"dir":"Reference","previous_headings":"","what":"Default Statstable — statstable_default","title":"Default Statstable — statstable_default","text":"Default Statstable","code":""},{"path":"https://ostluft.github.io/rOstluft/reference/statstable_default.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Default Statstable — statstable_default","text":"","code":"statstable_default(expand = FALSE)"},{"path":"https://ostluft.github.io/rOstluft/reference/statstable_default.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Default Statstable — statstable_default","text":"expand TRUE statstable expanded","code":""},{"path":"https://ostluft.github.io/rOstluft/reference/statstable_default.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Default Statstable — statstable_default","text":"statstable","code":""},{"path":"https://ostluft.github.io/rOstluft/reference/statstable_expand.html","id":null,"dir":"Reference","previous_headings":"","what":"Expands compact statstable to a table with one stats per row — statstable_expand","title":"Expands compact statstable to a table with one stats per row — statstable_expand","text":"comma seperated value cell new row added.","code":""},{"path":"https://ostluft.github.io/rOstluft/reference/statstable_expand.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Expands compact statstable to a table with one stats per row — statstable_expand","text":"","code":"statstable_expand(statstable, sep = \"\\\\s*,\\\\s*\")"},{"path":"https://ostluft.github.io/rOstluft/reference/statstable_expand.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Expands compact statstable to a table with one stats per row — statstable_expand","text":"statstable compact statstable sep seperator combined values","code":""},{"path":"https://ostluft.github.io/rOstluft/reference/statstable_expand.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Expands compact statstable to a table with one stats per row — statstable_expand","text":"expanded statstable","code":""},{"path":[]},{"path":"https://ostluft.github.io/rOstluft/reference/statstable_expand.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Expands compact statstable to a table with one stats per row — statstable_expand","text":"","code":"statstable <- tibble::tribble(   ~parameter, ~statistic, ~from, ~to,   \"O3, NO2\", \"min, max\", \"h1, d1\", \"m1, y1\" ) statstable_expand(statstable) #> # A tibble: 16 x 4 #>    parameter statistic from  to    #>    <chr>     <chr>     <chr> <chr> #>  1 O3        min       h1    m1    #>  2 O3        min       h1    y1    #>  3 O3        min       d1    m1    #>  4 O3        min       d1    y1    #>  5 O3        max       h1    m1    #>  6 O3        max       h1    y1    #>  7 O3        max       d1    m1    #>  8 O3        max       d1    y1    #>  9 NO2       min       h1    m1    #> 10 NO2       min       h1    y1    #> 11 NO2       min       d1    m1    #> 12 NO2       min       d1    y1    #> 13 NO2       max       h1    m1    #> 14 NO2       max       h1    y1    #> 15 NO2       max       d1    m1    #> 16 NO2       max       d1    y1"},{"path":"https://ostluft.github.io/rOstluft/reference/stores.html","id":null,"dir":"Reference","previous_headings":"","what":"Predefined stores — store_aqmet","title":"Predefined stores — store_aqmet","text":"store_aqmet() - Ostluft S3 storage containing airquality meteo data store_aqmet_public() - Public Ostluft S3 storage containing airquality meteo data. store_hysplit() - Ostluft S3 storage containing NOAA Hysplit trajectories","code":""},{"path":"https://ostluft.github.io/rOstluft/reference/stores.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predefined stores — store_aqmet","text":"","code":"store_aqmet(name = \"aqmet\")  store_hysplit(name = \"hysplit\")  store_aqmet_public(name = \"aqmet_public\")"},{"path":"https://ostluft.github.io/rOstluft/reference/stores.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predefined stores — store_aqmet","text":"name store (influence caching location)","code":""},{"path":"https://ostluft.github.io/rOstluft/reference/stores.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Predefined stores — store_aqmet","text":"store","code":""},{"path":"https://ostluft.github.io/rOstluft/reference/stores.html","id":"store-aqmet-public","dir":"Reference","previous_headings":"","what":"store_aqmet_public","title":"Predefined stores — store_aqmet","text":"store contains data following sources:","code":""},{"path":"https://ostluft.github.io/rOstluft/reference/stores.html","id":"ostluft","dir":"Reference","previous_headings":"","what":"Ostluft","title":"Predefined stores — store_aqmet","text":"Ostluft inter cantonal measurement network eastern switzerland Principality Liechtenstein.","code":""},{"path":"https://ostluft.github.io/rOstluft/reference/stores.html","id":"ethz-iac","dir":"Reference","previous_headings":"","what":"ETHZ IAC","title":"Predefined stores — store_aqmet","text":"Institute Atmosheric Climate Science (IAC), ETH Zurich data can used freely scientific analysis. user agrees cite IAC ETH Zurich source data consult IAC ETH Zurich data used publication. Please note take guarantee correctness completeness available data.","code":""},{"path":"https://ostluft.github.io/rOstluft/reference/stores.html","id":"national-air-pollution-monitoring-network-nabel-","dir":"Reference","previous_headings":"","what":"National Air Pollution Monitoring Network (NABEL)","title":"Predefined stores — store_aqmet","text":"National Air Pollution Monitoring Network (NABEL) measures air pollution 16 locations Switzerland. stations distributed throughout country monitor pollution typical locations (e.g. city-centre streets, residential areas, rural stations). monitoring network commenced operations stages since 1979 operated Federal office environment Empa.","code":""},{"path":"https://ostluft.github.io/rOstluft/reference/stores.html","id":"water-police-zuerich","dir":"Reference","previous_headings":"","what":"Water police Zuerich","title":"Predefined stores — store_aqmet","text":"water police Zuerich operates two meteo station. locations Tiefenbrunnen Mythenquai.","code":""},{"path":"https://ostluft.github.io/rOstluft/reference/tidyeval.html","id":null,"dir":"Reference","previous_headings":"","what":"Tidy eval helpers — tidyeval","title":"Tidy eval helpers — tidyeval","text":"sym() creates symbol string syms() creates list symbols character vector. expr() quo() quote one expression. quo() wraps quoted expression quosure. plural variants rlang::exprs() quos() return list quoted expressions quosures. enexpr() enquo() capture expression supplied argument user current function (enquo() wraps expression quosure). enexprs() enquos() capture multiple expressions supplied arguments, including .... exprs() exported avoid conflicts Biobase::exprs(), therefore one always use rlang::exprs(). learn tidy eval use tools, visit http://rlang.r-lib.org Metaprogramming section Advanced R.","code":""},{"path":"https://ostluft.github.io/rOstluft/reference/transform_crs.html","id":null,"dir":"Reference","previous_headings":"","what":"Transform between Coordinate Reference Systems — transform_crs","title":"Transform between Coordinate Reference Systems — transform_crs","text":"Transform Coordinate Reference Systems","code":""},{"path":"https://ostluft.github.io/rOstluft/reference/transform_crs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transform between Coordinate Reference Systems — transform_crs","text":"","code":"transform_crs(data, coord, in_crs, out_crs, append = TRUE)  transform_LV95_to_WSG84(data, coord = c(lon = \"x\", lat = \"y\"), append = TRUE)  transform_WSG84_to_LV95(data, coord = c(x = \"lon\", y = \"lat\"), append = TRUE)  transform_LV03_to_WSG84(data, coord = c(lon = \"x\", lat = \"y\"), append = TRUE)  transform_WSG84_to_LV03(data, coord = c(x = \"lon\", y = \"lat\"), append = TRUE)"},{"path":"https://ostluft.github.io/rOstluft/reference/transform_crs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transform between Coordinate Reference Systems — transform_crs","text":"data input data coord mappping columns Conversion in_crs source coordinate reference system sp::CRS out_crs target coordinate reference system sp::CRS append append data new Columns","code":""},{"path":"https://ostluft.github.io/rOstluft/reference/transform_crs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transform between Coordinate Reference Systems — transform_crs","text":"tibble transformed coordinates","code":""},{"path":"https://ostluft.github.io/rOstluft/reference/transform_crs.html","id":"wsg-epsg-vs-web-pseudo-mercator-epsg-","dir":"Reference","previous_headings":"","what":"WSG84 (EPSG 4326) vs Web Pseudo Mercator (EPSG 3857)","title":"Transform between Coordinate Reference Systems — transform_crs","text":"See Tiles à la Google Maps detailed explanation. Short: EPSG:4326 uses coordinate system surface sphere ellipsoid reference. EPSG:3857 uses coordinate system PROJECTED surface sphere ellipsoid flat surface. Usually Packages Webservices expects coordinates Elements EPSG:4326, one Exception leaflet::addRasterImage()","code":""},{"path":"https://ostluft.github.io/rOstluft/reference/transform_crs.html","id":"known-issues","dir":"Reference","previous_headings":"","what":"Known Issues","title":"Transform between Coordinate Reference Systems — transform_crs","text":"R spatial migrating PROJ6+ gdal3+. moment sp::spTransform converted use WKT comments, rgdal raises Warnings. transformation done correctly. R spatial follows GDAL PROJ development Migration PROJ6/GDAL3 rOstluft Issue","code":""},{"path":[]},{"path":"https://ostluft.github.io/rOstluft/reference/transform_crs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Transform between Coordinate Reference Systems — transform_crs","text":"","code":"fn <- system.file(\"extdata\", \"meta_smn.rds\", package = \"rOstluft.data\") data <- readRDS(fn) data <- dplyr::distinct(data, site, x, y) transform_crs(   data = data,   coord = c(lon = \"x\", lat = \"y\"),   in_crs = sp::CRS(SRS_string = \"EPSG:2056\"),   out_crs = sp::CRS(SRS_string = \"EPSG:4326\") ) #> Warning: Discarded datum CH1903+ in Proj4 definition #> # A tibble: 22 x 5 #>    site                     x       y   lon   lat #>    <chr>                <dbl>   <dbl> <dbl> <dbl> #>  1 Aadorf/Tänikon     2710517 1259824  8.90  47.5 #>  2 Altenrhein         2760382 1261386  9.57  47.5 #>  3 BadRagaz           2756910 1209350  9.50  47.0 #>  4 Chur               2759465 1193152  9.53  46.9 #>  5 Ebnat-Kappel       2726347 1237176  9.11  47.3 #>  6 Glarus             2723755 1210567  9.07  47.0 #>  7 Hörnli             2713516 1247756  8.94  47.4 #>  8 Lägern             2672250 1259460  8.40  47.5 #>  9 Oberriet/Kriessern 2764170 1249582  9.61  47.4 #> 10 Pilatus            2661904 1203410  8.25  47.0 #> # ... with 12 more rows  transform_crs(   data = data,   coord = c(lon = \"x\", lat = \"y\"),   in_crs = sp::CRS(SRS_string = \"EPSG:2056\"),   out_crs = sp::CRS(SRS_string = \"EPSG:4326\"),   append = FALSE ) #> Warning: Discarded datum CH1903+ in Proj4 definition #> # A tibble: 22 x 3 #>    site                 lon   lat #>    <chr>              <dbl> <dbl> #>  1 Aadorf/Tänikon      8.90  47.5 #>  2 Altenrhein          9.57  47.5 #>  3 BadRagaz            9.50  47.0 #>  4 Chur                9.53  46.9 #>  5 Ebnat-Kappel        9.11  47.3 #>  6 Glarus              9.07  47.0 #>  7 Hörnli              8.94  47.4 #>  8 Lägern              8.40  47.5 #>  9 Oberriet/Kriessern  9.61  47.4 #> 10 Pilatus             8.25  47.0 #> # ... with 12 more rows  transform_LV95_to_WSG84(data) #> Warning: Discarded datum CH1903+ in Proj4 definition #> # A tibble: 22 x 5 #>    site                     x       y   lon   lat #>    <chr>                <dbl>   <dbl> <dbl> <dbl> #>  1 Aadorf/Tänikon     2710517 1259824  8.90  47.5 #>  2 Altenrhein         2760382 1261386  9.57  47.5 #>  3 BadRagaz           2756910 1209350  9.50  47.0 #>  4 Chur               2759465 1193152  9.53  46.9 #>  5 Ebnat-Kappel       2726347 1237176  9.11  47.3 #>  6 Glarus             2723755 1210567  9.07  47.0 #>  7 Hörnli             2713516 1247756  8.94  47.4 #>  8 Lägern             2672250 1259460  8.40  47.5 #>  9 Oberriet/Kriessern 2764170 1249582  9.61  47.4 #> 10 Pilatus            2661904 1203410  8.25  47.0 #> # ... with 12 more rows"},{"path":"https://ostluft.github.io/rOstluft/reference/treshold_wrapper_function.html","id":null,"dir":"Reference","previous_headings":"","what":"Wrapper function for minimum capture threshold — treshold_wrapper_function","title":"Wrapper function for minimum capture threshold — treshold_wrapper_function","text":"Wrapper function minimum capture threshold","code":""},{"path":"https://ostluft.github.io/rOstluft/reference/treshold_wrapper_function.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wrapper function for minimum capture threshold — treshold_wrapper_function","text":"","code":"treshold_wrapper_function(statistic_fun, threshold, ...)"},{"path":"https://ostluft.github.io/rOstluft/reference/treshold_wrapper_function.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wrapper function for minimum capture threshold — treshold_wrapper_function","text":"statistic_fun statistic function apply minimum capture threshold meet threshold minimum data capture threshold 0 - 1.0 use ... Additional arguments passed statistic function","code":""},{"path":"https://ostluft.github.io/rOstluft/reference/treshold_wrapper_function.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Wrapper function for minimum capture threshold — treshold_wrapper_function","text":"wrapped function","code":""},{"path":"https://ostluft.github.io/rOstluft/reference/vars.html","id":null,"dir":"Reference","previous_headings":"","what":"Pass grouping definitions into functions — vars","title":"Pass grouping definitions into functions — vars","text":"Inspired dplyr::vars(), converting strings symbols auto names arguments","code":""},{"path":"https://ostluft.github.io/rOstluft/reference/vars.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pass grouping definitions into functions — vars","text":"","code":"vars(...)"},{"path":"https://ostluft.github.io/rOstluft/reference/vars.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pass grouping definitions into functions — vars","text":"... Variables group . arguments automatically quoted later evaluated context data frame. support unquoting.","code":""},{"path":"https://ostluft.github.io/rOstluft/reference/vars.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pass grouping definitions into functions — vars","text":"named list containing quosures symbols","code":""},{"path":"https://ostluft.github.io/rOstluft/reference/wmean.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculates weighted arithmetic means of irregular data series — wmean","title":"Calculates weighted arithmetic means of irregular data series — wmean","text":"Sometimes records (e.g. measurements passive samplers miniDOAS) provide values representative irregular time intervals starting odd start times odd end times. example 09:58 10:08 20 Feb 06 March. function interpolates irregular data standard interval. handles - upsampling correct.","code":""},{"path":"https://ostluft.github.io/rOstluft/reference/wmean.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculates weighted arithmetic means of irregular data series — wmean","text":"","code":"wmean(   data,   ...,   starttime = \"starttime\",   endtime = \"endtime\",   value = \"value\",   interval = \"h1\" )"},{"path":"https://ostluft.github.io/rOstluft/reference/wmean.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculates weighted arithmetic means of irregular data series — wmean","text":"data data.frame averaging; df long format contain start- end-time column class POSIXct (arbitrarily named) ... columns containing values grouping (passed dplyr::group_by()) calculating weighted means (e.g. different measurement parameters). Columns explicitly passed dropped starttime name starttime column symbol string endtime name endtime column  symbol string value name column containing values averaged symbol string interval specifying output interval averaging string","code":""},{"path":"https://ostluft.github.io/rOstluft/reference/wmean.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculates weighted arithmetic means of irregular data series — wmean","text":"tibble starttime, endtime, value grouping columns additional column \"n\" containing sum weighted intervals within averaged time interval (data availability interval, 1 = 100\\","code":""},{"path":"https://ostluft.github.io/rOstluft/reference/wmean.html","id":"caution","dir":"Reference","previous_headings":"","what":"Caution","title":"Calculates weighted arithmetic means of irregular data series — wmean","text":"Removes NA values correctly calculate data availability interval output data padded","code":""},{"path":"https://ostluft.github.io/rOstluft/reference/wmean.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculates weighted arithmetic means of irregular data series — wmean","text":"","code":"fn <- system.file(\"extdata\", \"Zch_Stampfenbachstrasse_h1_2013_Jan.csv\", package = \"rOstluft.data\") ps_fn <- system.file(\"extdata\", \"NO2_PS.rds\", package = \"rOstluft.data\") data <- read_airmo_csv(fn, time_shift = lubridate::period(25, \"minutes\")) data_ps <- readRDS(ps_fn) %>% pluck_site(\"Zch_Stampfenbachstrasse\")  df <- pluck_parameter(data, \"CO\") %>%   pluck_unit(\"ppm\") %>%   dplyr::mutate(endtime = .data$starttime + lubridate::hours(1)) %>%   dplyr::select(-interval)  wmean(df, site, parameter, unit, interval = \"h1\") #> # A tibble: 744 x 7 #>    starttime           endtime             site      parameter unit  value     n #>    <dttm>              <dttm>              <fct>     <fct>     <fct> <dbl> <dbl> #>  1 2013-01-01 00:00:00 2013-01-01 01:00:00 Zch_Stam~ CO        ppm   0.692 0.583 #>  2 2013-01-01 01:00:00 2013-01-01 02:00:00 Zch_Stam~ CO        ppm   0.705 1     #>  3 2013-01-01 02:00:00 2013-01-01 03:00:00 Zch_Stam~ CO        ppm   0.736 1     #>  4 2013-01-01 03:00:00 2013-01-01 04:00:00 Zch_Stam~ CO        ppm   0.691 1     #>  5 2013-01-01 04:00:00 2013-01-01 05:00:00 Zch_Stam~ CO        ppm   0.654 1     #>  6 2013-01-01 05:00:00 2013-01-01 06:00:00 Zch_Stam~ CO        ppm   0.558 1     #>  7 2013-01-01 06:00:00 2013-01-01 07:00:00 Zch_Stam~ CO        ppm   0.458 1     #>  8 2013-01-01 07:00:00 2013-01-01 08:00:00 Zch_Stam~ CO        ppm   0.413 1     #>  9 2013-01-01 08:00:00 2013-01-01 09:00:00 Zch_Stam~ CO        ppm   0.332 1     #> 10 2013-01-01 09:00:00 2013-01-01 10:00:00 Zch_Stam~ CO        ppm   0.262 1     #> # ... with 734 more rows  wmean(df, site, parameter, unit, interval = \"m1\") #> # A tibble: 2 x 7 #>   starttime           endtime             site     parameter unit  value       n #>   <dttm>              <dttm>              <fct>    <fct>     <fct> <dbl>   <dbl> #> 1 2013-01-01 00:00:00 2013-02-01 00:00:00 Zch_Sta~ CO        ppm   0.375 9.97e-1 #> 2 2013-02-01 00:00:00 2013-03-01 00:00:00 Zch_Sta~ CO        ppm   0.161 6.20e-4  wmean(df, site, parameter, unit, interval = \"y1\") #> # A tibble: 1 x 7 #>   starttime           endtime             site      parameter unit  value      n #>   <dttm>              <dttm>              <fct>     <fct>     <fct> <dbl>  <dbl> #> 1 2013-01-01 00:00:00 2014-01-01 00:00:00 Zch_Stam~ CO        ppm   0.375 0.0847  wmean(data_ps, site, parameter, unit, interval = \"d1\") #> # A tibble: 324 x 7 #>    starttime           endtime             site      parameter unit  value     n #>    <dttm>              <dttm>              <chr>     <chr>     <chr> <dbl> <dbl> #>  1 2018-01-03 00:00:00 2018-01-04 00:00:00 Zch_Stam~ NO2_PS    µg/m3  29.2 0.431 #>  2 2018-01-04 00:00:00 2018-01-05 00:00:00 Zch_Stam~ NO2_PS    µg/m3  29.2 1     #>  3 2018-01-05 00:00:00 2018-01-06 00:00:00 Zch_Stam~ NO2_PS    µg/m3  29.2 1     #>  4 2018-01-06 00:00:00 2018-01-07 00:00:00 Zch_Stam~ NO2_PS    µg/m3  29.2 1     #>  5 2018-01-07 00:00:00 2018-01-08 00:00:00 Zch_Stam~ NO2_PS    µg/m3  29.2 1     #>  6 2018-01-08 00:00:00 2018-01-09 00:00:00 Zch_Stam~ NO2_PS    µg/m3  29.2 1     #>  7 2018-01-09 00:00:00 2018-01-10 00:00:00 Zch_Stam~ NO2_PS    µg/m3  29.2 1     #>  8 2018-01-10 00:00:00 2018-01-11 00:00:00 Zch_Stam~ NO2_PS    µg/m3  29.2 1     #>  9 2018-01-11 00:00:00 2018-01-12 00:00:00 Zch_Stam~ NO2_PS    µg/m3  29.2 1     #> 10 2018-01-12 00:00:00 2018-01-13 00:00:00 Zch_Stam~ NO2_PS    µg/m3  29.2 1     #> # ... with 314 more rows  wmean(data_ps, site, parameter, unit, interval = \"1 week\") #> # A tibble: 49 x 7 #>    starttime           endtime             site      parameter unit  value     n #>    <dttm>              <dttm>              <chr>     <chr>     <chr> <dbl> <dbl> #>  1 2017-12-31 00:00:00 2018-01-07 00:00:00 Zch_Stam~ NO2_PS    µg/m3  29.2 0.490 #>  2 2018-01-07 00:00:00 2018-01-14 00:00:00 Zch_Stam~ NO2_PS    µg/m3  29.2 1     #>  3 2018-01-14 00:00:00 2018-01-21 00:00:00 Zch_Stam~ NO2_PS    µg/m3  26.5 1     #>  4 2018-01-21 00:00:00 2018-01-28 00:00:00 Zch_Stam~ NO2_PS    µg/m3  25.1 1     #>  5 2018-01-28 00:00:00 2018-02-04 00:00:00 Zch_Stam~ NO2_PS    µg/m3  27.7 1     #>  6 2018-02-04 00:00:00 2018-02-11 00:00:00 Zch_Stam~ NO2_PS    µg/m3  29.0 1     #>  7 2018-02-11 00:00:00 2018-02-18 00:00:00 Zch_Stam~ NO2_PS    µg/m3  30.3 1     #>  8 2018-02-18 00:00:00 2018-02-25 00:00:00 Zch_Stam~ NO2_PS    µg/m3  31   1     #>  9 2018-02-25 00:00:00 2018-03-04 00:00:00 Zch_Stam~ NO2_PS    µg/m3  33.8 1     #> 10 2018-03-04 00:00:00 2018-03-11 00:00:00 Zch_Stam~ NO2_PS    µg/m3  35.4 1     #> # ... with 39 more rows  wmean(data_ps, site, parameter, unit, interval = \"m1\") #> # A tibble: 12 x 7 #>    starttime           endtime             site      parameter unit  value     n #>    <dttm>              <dttm>              <chr>     <chr>     <chr> <dbl> <dbl> #>  1 2018-01-01 00:00:00 2018-02-01 00:00:00 Zch_Stam~ NO2_PS    µg/m3  27.2 0.917 #>  2 2018-02-01 00:00:00 2018-03-01 00:00:00 Zch_Stam~ NO2_PS    µg/m3  30.4 1     #>  3 2018-03-01 00:00:00 2018-04-01 00:00:00 Zch_Stam~ NO2_PS    µg/m3  31.9 1     #>  4 2018-04-01 00:00:00 2018-05-01 00:00:00 Zch_Stam~ NO2_PS    µg/m3  28.2 1     #>  5 2018-05-01 00:00:00 2018-06-01 00:00:00 Zch_Stam~ NO2_PS    µg/m3  20.6 0.548 #>  6 2018-06-01 00:00:00 2018-07-01 00:00:00 Zch_Stam~ NO2_PS    µg/m3  22.2 1     #>  7 2018-07-01 00:00:00 2018-08-01 00:00:00 Zch_Stam~ NO2_PS    µg/m3  23.1 1     #>  8 2018-08-01 00:00:00 2018-09-01 00:00:00 Zch_Stam~ NO2_PS    µg/m3  24.2 1     #>  9 2018-09-01 00:00:00 2018-10-01 00:00:00 Zch_Stam~ NO2_PS    µg/m3  32.2 1     #> 10 2018-10-01 00:00:00 2018-11-01 00:00:00 Zch_Stam~ NO2_PS    µg/m3  37.2 1     #> 11 2018-11-01 00:00:00 2018-12-01 00:00:00 Zch_Stam~ NO2_PS    µg/m3  30.2 0.536 #> 12 2018-12-01 00:00:00 2019-01-01 00:00:00 Zch_Stam~ NO2_PS    µg/m3  28.5 0.560  wmean(data_ps, site, parameter, unit, interval = \"y1\") #> # A tibble: 1 x 7 #>   starttime           endtime             site       parameter unit  value     n #>   <dttm>              <dttm>              <chr>      <chr>     <chr> <dbl> <dbl> #> 1 2018-01-01 00:00:00 2019-01-01 00:00:00 Zch_Stamp~ NO2_PS    µg/m3  28.2 0.879"},{"path":"https://ostluft.github.io/rOstluft/news/index.html","id":"rostluft-144","dir":"Changelog","previous_headings":"","what":"rOstluft 1.4.4","title":"rOstluft 1.4.4","text":"Updated readr dependency 2.0. caused minor changes various reading functions.","code":""},{"path":"https://ostluft.github.io/rOstluft/news/index.html","id":"rostluft-143","dir":"Changelog","previous_headings":"","what":"rOstluft 1.4.3","title":"rOstluft 1.4.3","text":"Added check list item exists resample()","code":""},{"path":"https://ostluft.github.io/rOstluft/news/index.html","id":"rostluft-142","dir":"Changelog","previous_headings":"","what":"rOstluft 1.4.2","title":"rOstluft 1.4.2","text":"Migrated testthat 3rd edition bind_rows_with_factor_columns() obsolete (dplyr::bind_rows() longer converts factors different levels characters) Fixed deprecated usage .dots argument dplyr::count() calls","code":""},{"path":"https://ostluft.github.io/rOstluft/news/index.html","id":"rostluft-140","dir":"Changelog","previous_headings":"","what":"rOstluft 1.4.0","title":"rOstluft 1.4.0","text":"minor changes updated dependencies.","code":""},{"path":"https://ostluft.github.io/rOstluft/news/index.html","id":"updated-dependencies-1-4-0","dir":"Changelog","previous_headings":"","what":"Updated dependencies","title":"rOstluft 1.4.0","text":"dplyr 0.8.0 1.0.0. sp 1.4.0 gdal 1.5.8","code":""},{"path":"https://ostluft.github.io/rOstluft/news/index.html","id":"known-issues-1-4-0","dir":"Changelog","previous_headings":"","what":"Known Issues","title":"rOstluft 1.4.0","text":"Warnings transform_crs functions functions working intented. See Issue (#7)","code":""},{"path":"https://ostluft.github.io/rOstluft/news/index.html","id":"rostluft-131","dir":"Changelog","previous_headings":"","what":"rOstluft 1.3.1","title":"rOstluft 1.3.1","text":"Extended read_smn() handle latest format changes (columns renamed “stn” => “Sta.”, “time” => “Date”). Added ... treshold_wrapper_function() gap_wrapper_function() allow passing additional arguments statistic function.","code":""},{"path":"https://ostluft.github.io/rOstluft/news/index.html","id":"rostluft-130","dir":"Changelog","previous_headings":"","what":"rOstluft 1.3.0","title":"rOstluft 1.3.0","text":"New store_aqmet_public() public access airquality meteo data New statistics ‘n>10’ ‘n>25’ PM2.5 limits resampling data Fixed get_seepolizei() returning values character","code":""},{"path":"https://ostluft.github.io/rOstluft/news/index.html","id":"rostluft-120","dir":"Changelog","previous_headings":"","what":"rOstluft 1.2.0","title":"rOstluft 1.2.0","text":"New read_seepolizei() read historic meteorological data Messwerte der Wetterstationen der Wasserschutzpolizei Zürich New get_seepolizei() gets actual data Messwerte der Wetterstationen der Wasserschutzpolizei Zürich using Tecdottir API New read_airmo_webexport() read AIRMO exports web format.","code":""},{"path":"https://ostluft.github.io/rOstluft/news/index.html","id":"rostluft-110","dir":"Changelog","previous_headings":"","what":"rOstluft 1.1.0","title":"rOstluft 1.1.0","text":"Added NEWS.md file track changes package. first put storage saves order data types columns data frame. following puts must match saved columns (#1).","code":""},{"path":"https://ostluft.github.io/rOstluft/news/index.html","id":"rostluft-100","dir":"Changelog","previous_headings":"","what":"rOstluft 1.0.0","title":"rOstluft 1.0.0","text":"Initial Release","code":""}]
